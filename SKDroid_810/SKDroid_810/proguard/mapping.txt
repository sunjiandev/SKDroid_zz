com.leadcore.rs485control.Rs485Controller -> com.leadcore.rs485control.Rs485Controller:
    byte addrCode -> a
    int pelcoProtocolType -> b
    int rs485ControllerOpen(byte) -> rs485ControllerOpen
    int rs485ControllerWrite(byte[],int) -> rs485ControllerWrite
    int rs485ControllerClose() -> rs485ControllerClose
    int yuntaiControllerOpen(int) -> a
    int yuntaiControllerClose() -> a
    int tiltUp(int) -> b
    int tiltDown(int) -> c
    int actionStop() -> b
    int getCrcCode_P(byte[]) -> a
    int getCrcCode_D(byte[]) -> b
com.sks.adhoc.service.SKSPerson -> com.a.a.a.a:
    java.lang.String personNickeName -> a
    java.lang.String mobileNo -> b
    java.lang.String ipAddress -> c
    long loginTime -> d
    long heartbeatTime -> e
    int cmdType -> f
    java.lang.String toString() -> toString
com.sks.net.socket.base.SocketMsgReceiver -> com.a.b.a.a.a:
    void onMsgReceived$4e958227(com.sks.net.socket.message.BaseSocketMessage) -> a
com.sks.net.socket.base.SocketReader -> com.a.b.a.a.b:
    java.io.DataInputStream reader -> a
    com.sks.net.socket.base.SocketWorker worker -> b
    void close() -> a
    void run() -> run
com.sks.net.socket.base.SocketWorker -> com.a.b.a.a.c:
    java.util.concurrent.BlockingQueue sendInstantQueue -> b
    java.util.concurrent.BlockingQueue socketErrorQueue -> c
    java.util.concurrent.Semaphore writeAvailable -> d
    com.sks.net.socket.base.SocketMsgReceiver msgReceiver -> a
    java.net.Socket socket -> e
    com.sks.net.socket.base.SocketReader reader -> f
    com.sks.net.socket.base.SocketWriter writer -> g
    boolean servermode -> h
    boolean isActive() -> a
    boolean sendMessage(com.sks.net.socket.message.BaseSocketMessage) -> b
    boolean receiveMessage(int,byte[]) -> a
    void putErrorNo(int) -> a
    com.sks.net.socket.message.BaseSocketMessage getMessageSend() -> b
    com.sks.net.socket.message.BaseSocketMessage getMessageSendBlock() -> c
    void onMsgReceived$4e958227(com.sks.net.socket.message.BaseSocketMessage) -> a
com.sks.net.socket.base.SocketWriter -> com.a.b.a.a.d:
    java.io.DataOutputStream writer -> a
    com.sks.net.socket.base.SocketWorker worker -> b
    void close() -> a
    void run() -> run
com.sks.net.socket.message.BCDTools -> com.a.b.a.b.a:
    java.lang.String BCD2Str(byte[]) -> a
    byte[] Str2BCD(java.lang.String,int) -> a
com.sks.net.socket.message.BaseSocketMessage -> com.a.b.a.b.b:
    int msgType -> a
    byte[] data -> b
    int getType() -> a
    byte[] getData() -> b
    java.lang.String description() -> c
com.sks.net.socket.message.MessageTools -> com.a.b.a.b.c:
    int bytesToInt(byte[]) -> a
    byte[] intToBytes$486860e8(int) -> a
    java.lang.String bytes2HexString(byte[]) -> b
com.sks.net.socket.server.ServerMsgReceiver -> com.a.b.a.c.a:
    java.lang.String TAG -> c
    int mMobileNoLength -> a
    int mPwdLength -> b
    org.doubango.ngn.utils.NgnTimer mTimerAudioPTTReport -> d
    java.util.TimerTask mTimerTaskAudioPTTReport -> e
    void onSocketReceive(android.content.Context,android.content.Intent) -> a
    void onMsgReceived$4e958227(com.sks.net.socket.message.BaseSocketMessage) -> a
    java.lang.String getDefaultGroupNo() -> a
    boolean sendPTTRequestInfoMsg() -> b
    boolean sendPTTReleaseInfoMsg() -> c
    boolean sendInfo(java.lang.String,java.lang.String) -> a
    boolean access$0() -> d
com.sks.net.socket.server.ServerMsgReceiver$1 -> com.a.b.a.c.b:
    void run() -> run
com.sks.net.socket.server.ServerMsgReceiver$2 -> com.a.b.a.c.c:
    void handleMessage(android.os.Message) -> handleMessage
com.sks.net.socket.server.SocketServer -> com.a.b.a.c.d:
    java.lang.String TAG -> b
    java.net.ServerSocket ss -> c
    com.sks.net.socket.server.ServerMsgReceiver sreceiver -> d
    java.util.List workerList -> a
    void sendMessage(com.sks.net.socket.message.BaseSocketMessage) -> a
com.sunkaisens.skdroid.Engine -> com.sunkaisens.skdroid.a:
    java.lang.String TAG -> a
    java.lang.String notifPTTTone -> b
    com.sunkaisens.skdroid.Services.IScreenService mScreenService -> c
    boolean hasSMSNotif -> d
    boolean hasPushNotif -> e
    org.doubango.ngn.NgnEngine getInstance() -> a
    boolean start() -> start
    boolean stop() -> stop
    void showNotification(int,int,java.lang.String) -> a
    void showAppNotif(int,java.lang.String) -> a
    void showAVCallNotif$4f708078(java.lang.String) -> a
    void showAVCallNotNotif$13462e() -> b
    void cancelAVCallNotNotif() -> c
    void refreshAVCallNotif$13462e() -> d
    void refreshContentShareNotif$13462e() -> e
    void refreshChatNotif$13462e() -> f
    void playNotificationTone() -> g
    void showSMSNotif$4f708078(java.lang.String) -> b
    void cancelSMSNotif() -> h
    com.sunkaisens.skdroid.Services.IScreenService getScreenService() -> i
    java.lang.Class getNativeServiceClass() -> getNativeServiceClass
    void showPushNotif$4f708078(java.lang.String) -> c
    void cancelPushNotif() -> j
    void showMapNotif$4f708078(java.lang.String) -> d
com.sunkaisens.skdroid.Engine$1 -> com.sunkaisens.skdroid.b:
    com.sunkaisens.skdroid.Engine this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Engine$3 -> com.sunkaisens.skdroid.c:
    com.sunkaisens.skdroid.Engine this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Engine$5 -> com.sunkaisens.skdroid.d:
    com.sunkaisens.skdroid.Engine this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.GPSDataService -> com.sunkaisens.skdroid.GPSDataService:
    java.lang.String TAG -> b
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> c
    android.location.LocationManager mLocationManager -> d
    java.lang.Boolean EnableSetGPSData -> e
    com.sunkaisens.skdroid.GPSDataService$ServiceWorker worker -> f
    java.net.DatagramSocket socket -> g
    java.util.Timer myTimer -> a
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void access$2(com.sunkaisens.skdroid.GPSDataService,android.location.LocationManager) -> a
    android.location.LocationManager access$3(com.sunkaisens.skdroid.GPSDataService) -> a
com.sunkaisens.skdroid.GPSDataService$ServiceWorker -> com.sunkaisens.skdroid.e:
    com.sunkaisens.skdroid.GPSDataService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.GPSDataService$ServiceWorker$1 -> com.sunkaisens.skdroid.f:
    com.sunkaisens.skdroid.GPSDataService$ServiceWorker this$1 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.sunkaisens.skdroid.GlobalBroadcastReceiver -> com.sunkaisens.skdroid.GlobalBroadcastReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.GroupContactsDowloadService -> com.sunkaisens.skdroid.GroupContactsDowloadService:
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> a
    java.lang.Boolean ContactsHasChanged -> b
    com.sunkaisens.skdroid.GroupContactsDowloadService$ServiceDownloader downloader -> c
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    org.doubango.ngn.services.INgnConfigurationService access$0(com.sunkaisens.skdroid.GroupContactsDowloadService) -> a
com.sunkaisens.skdroid.GroupContactsDowloadService$ServiceDownloader -> com.sunkaisens.skdroid.g:
    com.sunkaisens.skdroid.GroupContactsDowloadService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Main -> com.sunkaisens.skdroid.Main:
    java.lang.String TAG -> c
    android.os.Handler mHanler -> d
    com.sunkaisens.skdroid.Engine mEngine -> e
    com.sunkaisens.skdroid.Services.IScreenService mScreenService -> f
    android.os.Handler mTipsHandler -> g
    boolean isFirstPTT_onKeyDown -> a
    boolean isFirstPTT_onKeyLongPress -> b
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$Screens$BaseScreen$SCREEN_TYPE -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyLongPress(int,android.view.KeyEvent) -> onKeyLongPress
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void exit() -> a
    void background() -> b
    void handleAction(android.os.Bundle) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    void onRestart() -> onRestart
    java.lang.String access$0() -> c
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$Screens$BaseScreen$SCREEN_TYPE() -> d
com.sunkaisens.skdroid.Main$1 -> com.sunkaisens.skdroid.h:
    com.sunkaisens.skdroid.Main this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Main$2 -> com.sunkaisens.skdroid.i:
    com.sunkaisens.skdroid.Main this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Main$3 -> com.sunkaisens.skdroid.j:
    com.sunkaisens.skdroid.Main this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Main$4 -> com.sunkaisens.skdroid.k:
    com.sunkaisens.skdroid.Main this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Main$5 -> com.sunkaisens.skdroid.l:
    com.sunkaisens.skdroid.Main this$0 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.MainService -> com.sunkaisens.skdroid.MainService:
    java.lang.String TAG -> e
    com.sunkaisens.skdroid.Engine mEngine -> f
    android.os.Handler mTipsHandler -> g
    boolean isFirstPTT_onKeyDown_bh03 -> a
    boolean isFirstPTT_onKeyLongPress_bh03 -> b
    boolean isFirstPTT_onKeyDown_bh04 -> c
    boolean isFirstPTT_onKeyLongPress_bh04 -> d
    android.content.BroadcastReceiver mBroadCastRecv -> h
    org.doubango.ngn.services.INgnSipService mSipService -> i
    void onCreate() -> onCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onDestroy() -> onDestroy
    void onStart(android.content.Intent,int) -> onStart
    android.os.IBinder onBind(android.content.Intent) -> onBind
    java.lang.String access$0() -> a
    android.os.Handler access$1(com.sunkaisens.skdroid.MainService) -> a
    com.sunkaisens.skdroid.Engine access$2(com.sunkaisens.skdroid.MainService) -> b
com.sunkaisens.skdroid.MainService$1 -> com.sunkaisens.skdroid.m:
    com.sunkaisens.skdroid.MainService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.MainService$2 -> com.sunkaisens.skdroid.n:
    com.sunkaisens.skdroid.MainService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.MainService$3 -> com.sunkaisens.skdroid.o:
    com.sunkaisens.skdroid.MainService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.MainService$4 -> com.sunkaisens.skdroid.p:
    com.sunkaisens.skdroid.MainService this$0 -> a
    com.sunkaisens.skdroid.Engine val$engine -> b
    void run() -> run
com.sunkaisens.skdroid.NativeService -> com.sunkaisens.skdroid.NativeService:
    java.lang.String TAG -> c
    java.lang.String ACTION_STATE_EVENT -> a
    android.os.PowerManager$WakeLock mWakeLock -> d
    android.content.BroadcastReceiver mBroadcastReceiver -> e
    com.sunkaisens.skdroid.Engine mEngine -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    org.doubango.ngn.sip.NgnSipStack sipStack -> h
    org.doubango.ngn.services.INgnSipService sipService -> i
    boolean mRegisteSign -> j
    android.content.BroadcastReceiver mCdmaCallReceiver -> k
    boolean mNetCheckThreadsign -> l
    java.lang.Thread serverThread -> b
    java.lang.Thread mNetCheckThread -> m
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes -> n
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMsrpEventTypes -> o
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMessagingEventTypes -> p
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes -> q
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnPublicationEventTypes -> r
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnSubscriptionEventTypes -> s
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    void Invite_OnReceive$3b2d1350(android.content.Intent) -> a
    void Msrp_OnReceive$3b2d1350(android.content.Intent) -> b
    void Message_OnReceive$3b2d1350(android.content.Intent) -> c
    void onDestroy() -> onDestroy
    java.lang.String access$0() -> a
    org.doubango.ngn.services.INgnSipService access$1(com.sunkaisens.skdroid.NativeService) -> a
    void access$2$7e6c1aaf(com.sunkaisens.skdroid.NativeService,android.content.Intent) -> a
    void access$3$7e6c1aaf(com.sunkaisens.skdroid.NativeService,android.content.Intent) -> b
    void access$4$7e6c1aaf(com.sunkaisens.skdroid.NativeService,android.content.Intent) -> c
    void access$5(com.sunkaisens.skdroid.NativeService) -> b
    void access$6(com.sunkaisens.skdroid.NativeService,boolean) -> a
    org.doubango.ngn.sip.NgnSipStack access$7(com.sunkaisens.skdroid.NativeService) -> c
    boolean access$8(com.sunkaisens.skdroid.NativeService) -> d
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes() -> b
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMsrpEventTypes() -> c
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMessagingEventTypes() -> d
    void access$12(com.sunkaisens.skdroid.NativeService,org.doubango.ngn.sip.NgnSipStack) -> a
    void access$13$93ea4a0(com.sunkaisens.skdroid.NativeService) -> e
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes() -> e
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnPublicationEventTypes() -> f
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnSubscriptionEventTypes() -> g
com.sunkaisens.skdroid.NativeService$1 -> com.sunkaisens.skdroid.q:
    void run() -> run
com.sunkaisens.skdroid.NativeService$2 -> com.sunkaisens.skdroid.r:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.NativeService$3 -> com.sunkaisens.skdroid.s:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.NativeService$4 -> com.sunkaisens.skdroid.t:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.NativeService$5 -> com.sunkaisens.skdroid.u:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.NativeService$6 -> com.sunkaisens.skdroid.v:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.NativeService$MyPhoneStateListener -> com.sunkaisens.skdroid.w:
    com.sunkaisens.skdroid.NativeService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
com.sunkaisens.skdroid.SKDroid -> com.sunkaisens.skdroid.SKDroid:
    java.lang.String TAG -> a
    void onCreate() -> onCreate
com.sunkaisens.skdroid.Screens.BaseScreen -> com.sunkaisens.skdroid.Screens.BaseScreen:
    boolean isFirstback -> f
    java.lang.String TAG -> g
    java.lang.String mId -> a
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE mType -> b
    boolean mComputeConfiguration -> c
    android.os.Handler mHanler -> d
    com.sunkaisens.skdroid.Services.IScreenService mScreenService -> e
    long exitTime -> h
    com.sunkaisens.skdroid.Engine getEngine() -> a
    boolean refresh() -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    java.lang.String getId() -> c
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE getType() -> d
    boolean hasMenu() -> e
    boolean hasBack() -> f
    boolean back() -> g
    boolean createOptionsMenu(android.view.Menu) -> a
    void addConfigurationListener(android.widget.RadioButton) -> a
    void addConfigurationListener(android.widget.EditText) -> a
    void addConfigurationListener(android.widget.CheckBox) -> a
    void addConfigurationListener(android.widget.Spinner) -> a
    int getSpinnerIndex(java.lang.String,java.lang.String[]) -> a
    java.lang.String getPath(android.net.Uri) -> a
    boolean processDoubleBackExitKey$4765ad2(int) -> a
    boolean processKeyDown(int,android.view.KeyEvent) -> a
com.sunkaisens.skdroid.Screens.BaseScreen$1 -> com.sunkaisens.skdroid.Screens.a:
    com.sunkaisens.skdroid.Screens.BaseScreen this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.BaseScreen$2 -> com.sunkaisens.skdroid.Screens.b:
    com.sunkaisens.skdroid.Screens.BaseScreen this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.BaseScreen$3 -> com.sunkaisens.skdroid.Screens.c:
    com.sunkaisens.skdroid.Screens.BaseScreen this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.BaseScreen$4 -> com.sunkaisens.skdroid.Screens.d:
    com.sunkaisens.skdroid.Screens.BaseScreen this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE -> com.sunkaisens.skdroid.Screens.e:
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE MAIN_T -> a
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE ABOUT_T -> b
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE AV_QUEUE_T -> c
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CHAT_T -> d
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CHAT_QUEUE_T -> e
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CODECS_T -> f
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CONTACTS_T -> g
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE DIALER_T -> h
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE FILETRANSFER_QUEUE_T -> i
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE FILETRANSFER_VIEW_T -> j
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE HOME_T -> k
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE IDENTITY_T -> l
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE INTERCEPT_CALL_T -> m
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE GENERAL_T -> n
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE MESSAGING_T -> o
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE NATT_T -> p
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE NETWORK_T -> q
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE PRESENCE_T -> r
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE QOS_T -> s
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SETTINGS_T -> t
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SECURITY_T -> u
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SPLASH_T -> v
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_CONTACTS -> w
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_HISTORY_T -> x
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_INFO_T -> y
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_ONLINE -> z
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_MESSAGES_T -> A
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_HOME -> B
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE AV_T -> C
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE NEW_SMS_T -> D
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE GPSScreen_T -> E
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE GroupContactsScreen_T -> F
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE ScreenSendMessage_T -> G
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE GROUPCONTACTITEM_T -> H
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CONFIGURE_T -> I
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SCREENLOGIN_T -> J
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE LOGIN_T -> K
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SKS_ScreenNewMessage_T -> L
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SKS_Screen_PersionInfo -> M
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE SKS_Screen_OrgInfo -> N
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE CONTACT_CHILD -> O
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE TAB_HOME_ADHOC -> P
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE LOGIN_ADHOC -> Q
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE[] ENUM$VALUES -> R
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE[] values() -> values
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE valueOf(java.lang.String) -> valueOf
com.sunkaisens.skdroid.Screens.CameraSurfacePreview -> com.sunkaisens.skdroid.Screens.f:
    android.view.SurfaceHolder mHolder -> a
    android.hardware.Camera mCamera -> b
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void takePicture(android.hardware.Camera$PictureCallback) -> a
com.sunkaisens.skdroid.Screens.IBaseScreen -> com.sunkaisens.skdroid.Screens.g:
    java.lang.String getId() -> c
    com.sunkaisens.skdroid.Screens.BaseScreen$SCREEN_TYPE getType() -> d
    boolean hasMenu() -> e
    boolean hasBack() -> f
    boolean back() -> g
    boolean createOptionsMenu(android.view.Menu) -> a
com.sunkaisens.skdroid.Screens.MessageBodyInfo -> com.sunkaisens.skdroid.Screens.h:
    java.lang.String NS -> a
    java.lang.String msgType -> b
    java.lang.String msgReport -> c
    java.lang.String localMsgID -> d
    java.lang.String conType -> e
    java.lang.String toString() -> toString
com.sunkaisens.skdroid.Screens.ScreenAV -> com.sunkaisens.skdroid.Screens.ScreenAV:
    java.lang.String TAG -> m
    java.text.SimpleDateFormat sDurationTimerFormat -> n
    int mCountBlankPacket -> o
    int mLastRotation -> p
    boolean mSendDeviceInfo -> q
    int mLastOrientation -> r
    java.lang.String mRemotePartyDisplayName -> s
    int imageid -> t
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType mCurrentView -> u
    android.view.LayoutInflater mInflater -> v
    android.widget.RelativeLayout mMainLayout -> w
    android.view.View mViewTrying -> x
    android.view.View mViewInCallAudio -> y
    android.view.View mViewInCallVideo -> z
    android.view.View mViewInGroupCallAudio -> A
    android.view.View mViewInGroupCallVideo -> B
    android.widget.FrameLayout mViewLocalVideoPreview -> C
    android.widget.FrameLayout mViewRemoteVideoPreview -> D
    android.widget.ImageButton mSwitchCamera -> E
    android.widget.Button mVideoHangUpBt -> F
    android.widget.Button mGroupVideoHangUpBt -> G
    android.widget.TextView mVideoDurationTv -> H
    android.widget.ImageView mVideoSpeaker -> I
    android.widget.ImageView mAudioSpeaker -> J
    android.widget.ImageView mGroupVideoSpeaker -> K
    android.widget.ImageView mGroupAudioSpeaker -> L
    boolean isSpeaker -> M
    android.widget.Button btHangup -> N
    android.view.View mViewTermwait -> O
    android.widget.ImageView viewUsers -> P
    android.widget.GridView usersView -> Q
    org.doubango.ngn.utils.NgnTimer mTimerInCall -> R
    boolean mTimerInCallIsStart -> S
    org.doubango.ngn.utils.NgnTimer mTimerSuicide -> T
    org.doubango.ngn.utils.NgnTimer mTimerBlankPacket -> U
    org.doubango.ngn.utils.NgnTimer mTimerAudioPTTReport -> V
    org.doubango.ngn.utils.NgnTimer mTimerVideoPTTReport -> W
    org.doubango.ngn.utils.NgnTimer mTimerVideoMonitorReport -> X
    org.doubango.ngn.utils.NgnTimer mTimerVideoDuraton -> Y
    boolean mIsVideoCall -> f
    android.widget.TextView mTvInfo -> Z
    android.widget.TextView mTvDuration -> aa
    android.widget.Button mBtPTT -> ab
    boolean mTakePTTFlag -> ac
    boolean mPttClickable -> ad
    com.sunkaisens.skdroid.groupcall.GroupPTTCall mPttCall -> ae
    android.app.KeyguardManager$KeyguardLock mKeyguardLock -> af
    android.view.OrientationEventListener mListener -> ag
    com.sunkaisens.skdroid.Engine mEngine -> ah
    android.os.PowerManager$WakeLock mWakeLock -> ai
    boolean SHOW_SIP_PHRASE -> aj
    java.lang.String pttName -> ak
    org.doubango.ngn.utils.NgnTimer mTimerTrying -> al
    org.doubango.ngn.utils.NgnTimer mTimerGroupTrying -> am
    org.doubango.ngn.utils.NgnTimer mTimerGroupInCall -> an
    android.widget.TextView mTvDurationTrying -> ao
    android.widget.TextView mTvDurationGroupTrying -> ap
    android.widget.TextView mTvDurationGroupInCall -> aq
    com.sunkaisens.skdroid.Services.ServiceAV serviceAV -> g
    int mSessionType -> ar
    android.widget.RelativeLayout mScreen_top -> as
    android.widget.HorizontalScrollView mContactview -> at
    android.widget.LinearLayout mGroup_pickup_hangup -> au
    com.sunkaisens.skdroid.model.ModelContact mModelContact -> av
    int MSG_IS_VIDEO_REFRESH -> h
    int PTTENABLE -> i
    int PTTNOTENABLE -> j
    android.os.Handler mRefreshHandler -> aw
    boolean isSuicide -> ax
    boolean mTimerBlankPacketIsCanceled -> ay
    boolean isGroupInCall -> az
    boolean isScreenChange -> aA
    java.util.List onLineUsers -> aB
    com.leadcore.rs485control.Rs485Controller controller -> aC
    java.lang.String controllerProtocol -> aD
    int controllerSpeed -> aE
    android.widget.ImageView userIcon -> aF
    android.widget.TextView userRemoteparty -> aG
    android.view.View$OnClickListener onImageClickListener -> k
    android.view.View$OnClickListener onImageSpeakerClickListener -> l
    java.util.TimerTask mTimerTaskInCall -> aH
    java.util.TimerTask mTimerTaskTrying -> aI
    java.util.TimerTask mTimerTaskGroupTrying -> aJ
    java.util.TimerTask mTimerTaskGroupInCall -> aK
    java.util.TimerTask mTimerTaskVideoDuraton -> aL
    java.util.TimerTask mTimerTaskAudioPTTReport -> aM
    java.util.TimerTask mTimerTaskVideoPTTReport -> aN
    java.util.TimerTask mTimerTaskVideoMonitorReport -> aO
    java.util.TimerTask mTimerTaskBlankPacket -> aP
    java.util.TimerTask mTimerTaskSuicide -> aQ
    android.view.View$OnClickListener mOnKeyboardClickListener -> aR
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> aS
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMediaPluginEventTypes -> aT
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes -> aU
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$groupcall$GroupPTTCall$PTTState -> aV
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    boolean hasMenu() -> e
    boolean createOptionsMenu(android.view.Menu) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean hasBack() -> f
    boolean back() -> g
    boolean onVolumeChanged(boolean) -> a
    void handleMediaEvent(android.content.Intent) -> a
    void handleSipEvent(android.content.Intent) -> b
    void loadView() -> k
    void loadTryingView() -> l
    void handleEncryptInfoMsg(byte[]) -> a
    void loadGroupTryingView() -> m
    void loadGroupInCallAudioView() -> n
    void loadGroupInCallVideoView() -> o
    void loadInCallAudioView() -> p
    void loadInCallVideoView() -> q
    void loadTermView(java.lang.String) -> a
    void loadTermView() -> r
    void loadVideoPreview() -> s
    void cancelBlankPacket() -> t
    void startVideo$25decb5() -> u
    void startVideo$49605cbf() -> v
    void onRestart() -> onRestart
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void stopTimerAndTask() -> w
    void onNewIntent(android.content.Intent) -> onNewIntent
    java.lang.String access$0() -> h
    void access$1(com.sunkaisens.skdroid.Screens.ScreenAV) -> a
    boolean access$2(com.sunkaisens.skdroid.Screens.ScreenAV) -> b
    android.widget.ImageView access$3(com.sunkaisens.skdroid.Screens.ScreenAV) -> c
    void access$4(com.sunkaisens.skdroid.Screens.ScreenAV,boolean) -> a
    android.widget.ImageView access$5(com.sunkaisens.skdroid.Screens.ScreenAV) -> d
    android.widget.ImageView access$6(com.sunkaisens.skdroid.Screens.ScreenAV) -> e
    android.widget.ImageView access$7(com.sunkaisens.skdroid.Screens.ScreenAV) -> f
    android.widget.TextView access$8(com.sunkaisens.skdroid.Screens.ScreenAV) -> g
    android.widget.TextView access$9(com.sunkaisens.skdroid.Screens.ScreenAV) -> h
    android.widget.TextView access$10(com.sunkaisens.skdroid.Screens.ScreenAV) -> i
    android.widget.TextView access$11(com.sunkaisens.skdroid.Screens.ScreenAV) -> j
    android.widget.TextView access$12(com.sunkaisens.skdroid.Screens.ScreenAV) -> k
    int access$13() -> i
    void access$14(int) -> a
    int access$15() -> j
    boolean access$16(com.sunkaisens.skdroid.Screens.ScreenAV) -> l
    int access$17(com.sunkaisens.skdroid.Screens.ScreenAV) -> m
    void access$18(com.sunkaisens.skdroid.Screens.ScreenAV,int) -> a
    android.widget.RelativeLayout access$19(com.sunkaisens.skdroid.Screens.ScreenAV) -> n
    android.view.View access$20(com.sunkaisens.skdroid.Screens.ScreenAV) -> o
    android.widget.ImageView access$21(com.sunkaisens.skdroid.Screens.ScreenAV) -> p
    android.widget.ImageButton access$22(com.sunkaisens.skdroid.Screens.ScreenAV) -> q
    android.widget.Button access$23(com.sunkaisens.skdroid.Screens.ScreenAV) -> r
    android.widget.Button access$24(com.sunkaisens.skdroid.Screens.ScreenAV) -> s
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> x
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMediaPluginEventTypes() -> y
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes() -> z
    com.sunkaisens.skdroid.Engine access$28(com.sunkaisens.skdroid.Screens.ScreenAV) -> t
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$groupcall$GroupPTTCall$PTTState() -> A
    android.view.View access$30(com.sunkaisens.skdroid.Screens.ScreenAV) -> u
    android.widget.GridView access$31(com.sunkaisens.skdroid.Screens.ScreenAV) -> v
    java.util.List access$32(com.sunkaisens.skdroid.Screens.ScreenAV) -> w
    com.sunkaisens.skdroid.groupcall.GroupPTTCall access$33(com.sunkaisens.skdroid.Screens.ScreenAV) -> x
    boolean access$34(com.sunkaisens.skdroid.Screens.ScreenAV) -> y
    void access$35(com.sunkaisens.skdroid.Screens.ScreenAV,boolean) -> b
    void access$36(com.sunkaisens.skdroid.Screens.ScreenAV,boolean) -> c
    void access$37(com.sunkaisens.skdroid.Screens.ScreenAV,com.sunkaisens.skdroid.groupcall.GroupPTTCall) -> a
    android.widget.TextView access$38(com.sunkaisens.skdroid.Screens.ScreenAV) -> z
    android.widget.HorizontalScrollView access$39(com.sunkaisens.skdroid.Screens.ScreenAV) -> A
    android.os.Handler access$40(com.sunkaisens.skdroid.Screens.ScreenAV) -> B
com.sunkaisens.skdroid.Screens.ScreenAV$1 -> com.sunkaisens.skdroid.Screens.i:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$10 -> com.sunkaisens.skdroid.Screens.j:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$11 -> com.sunkaisens.skdroid.Screens.k:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$12 -> com.sunkaisens.skdroid.Screens.l:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$12) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$12$1 -> com.sunkaisens.skdroid.Screens.m:
    com.sunkaisens.skdroid.Screens.ScreenAV$12 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$13 -> com.sunkaisens.skdroid.Screens.n:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$14 -> com.sunkaisens.skdroid.Screens.o:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onOrientationChanged(int) -> onOrientationChanged
com.sunkaisens.skdroid.Screens.ScreenAV$15 -> com.sunkaisens.skdroid.Screens.p:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenAV$16 -> com.sunkaisens.skdroid.Screens.q:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$17 -> com.sunkaisens.skdroid.Screens.r:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$18 -> com.sunkaisens.skdroid.Screens.s:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$19 -> com.sunkaisens.skdroid.Screens.t:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$2 -> com.sunkaisens.skdroid.Screens.u:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$20 -> com.sunkaisens.skdroid.Screens.v:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$21 -> com.sunkaisens.skdroid.Screens.w:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$22 -> com.sunkaisens.skdroid.Screens.x:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$23 -> com.sunkaisens.skdroid.Screens.y:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$24 -> com.sunkaisens.skdroid.Screens.z:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$25 -> com.sunkaisens.skdroid.Screens.aa:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$25) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$25$1 -> com.sunkaisens.skdroid.Screens.ab:
    com.sunkaisens.skdroid.Screens.ScreenAV$25 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$26 -> com.sunkaisens.skdroid.Screens.ac:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$27 -> com.sunkaisens.skdroid.Screens.ad:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$28 -> com.sunkaisens.skdroid.Screens.ae:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$29 -> com.sunkaisens.skdroid.Screens.af:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$3 -> com.sunkaisens.skdroid.Screens.ag:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$3) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$3$1 -> com.sunkaisens.skdroid.Screens.ah:
    com.sunkaisens.skdroid.Screens.ScreenAV$3 this$1 -> a
    long val$period -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$30 -> com.sunkaisens.skdroid.Screens.ai:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$30) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$30$1 -> com.sunkaisens.skdroid.Screens.aj:
    com.sunkaisens.skdroid.Screens.ScreenAV$30 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$31 -> com.sunkaisens.skdroid.Screens.ak:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$32 -> com.sunkaisens.skdroid.Screens.al:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$33 -> com.sunkaisens.skdroid.Screens.am:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$34 -> com.sunkaisens.skdroid.Screens.an:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$35 -> com.sunkaisens.skdroid.Screens.ao:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$36 -> com.sunkaisens.skdroid.Screens.ap:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    boolean val$mMonitorSignTmp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$37 -> com.sunkaisens.skdroid.Screens.aq:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    boolean val$mMonitorSignTmp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAV$38 -> com.sunkaisens.skdroid.Screens.ar:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$4 -> com.sunkaisens.skdroid.Screens.as:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$4) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$4$1 -> com.sunkaisens.skdroid.Screens.at:
    com.sunkaisens.skdroid.Screens.ScreenAV$4 this$1 -> a
    long val$period -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$5 -> com.sunkaisens.skdroid.Screens.au:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$5) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$5$1 -> com.sunkaisens.skdroid.Screens.av:
    com.sunkaisens.skdroid.Screens.ScreenAV$5 this$1 -> a
    long val$period -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$6 -> com.sunkaisens.skdroid.Screens.aw:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$6) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$6$1 -> com.sunkaisens.skdroid.Screens.ax:
    com.sunkaisens.skdroid.Screens.ScreenAV$6 this$1 -> a
    long val$period -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$7 -> com.sunkaisens.skdroid.Screens.ay:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenAV access$0(com.sunkaisens.skdroid.Screens.ScreenAV$7) -> a
com.sunkaisens.skdroid.Screens.ScreenAV$7$1 -> com.sunkaisens.skdroid.Screens.az:
    com.sunkaisens.skdroid.Screens.ScreenAV$7 this$1 -> a
    long val$period -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$8 -> com.sunkaisens.skdroid.Screens.ba:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$9 -> com.sunkaisens.skdroid.Screens.bb:
    com.sunkaisens.skdroid.Screens.ScreenAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAV$ViewType -> com.sunkaisens.skdroid.Screens.bc:
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType ViewNone -> a
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType ViewTrying -> b
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType ViewInCall -> c
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType ViewProxSensor -> d
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType ViewTermwait -> e
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType[] ENUM$VALUES -> f
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType[] values() -> values
    com.sunkaisens.skdroid.Screens.ScreenAV$ViewType valueOf(java.lang.String) -> valueOf
com.sunkaisens.skdroid.Screens.ScreenAVQueue -> com.sunkaisens.skdroid.Screens.ScreenAVQueue:
    java.lang.String TAG -> f
    android.widget.ListView mListView -> g
    com.sunkaisens.skdroid.Screens.ScreenAVQueue$ScreenAVQueueAdapter mAdapter -> h
    void onCreate(android.os.Bundle) -> onCreate
    boolean createOptionsMenu(android.view.Menu) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean hasMenu() -> e
    boolean hasBack() -> f
    boolean back() -> g
    void resumeAVSession(org.doubango.ngn.sip.NgnAVSession) -> a
    com.sunkaisens.skdroid.Screens.ScreenAVQueue$ScreenAVQueueAdapter access$0(com.sunkaisens.skdroid.Screens.ScreenAVQueue) -> a
    void access$1(com.sunkaisens.skdroid.Screens.ScreenAVQueue,org.doubango.ngn.sip.NgnAVSession) -> a
com.sunkaisens.skdroid.Screens.ScreenAVQueue$1 -> com.sunkaisens.skdroid.Screens.bd:
    com.sunkaisens.skdroid.Screens.ScreenAVQueue this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenAVQueue$ScreenAVQueueAdapter -> com.sunkaisens.skdroid.Screens.be:
    org.doubango.ngn.utils.NgnObservableHashMap mAVSessions -> b
    android.view.LayoutInflater mInflater -> c
    android.os.Handler mHandler -> d
    com.sunkaisens.skdroid.Screens.ScreenAVQueue this$0 -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    void update(java.util.Observable,java.lang.Object) -> update
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> a
com.sunkaisens.skdroid.Screens.ScreenAVQueue$ScreenAVQueueAdapter$1 -> com.sunkaisens.skdroid.Screens.bf:
    com.sunkaisens.skdroid.Screens.ScreenAVQueue$ScreenAVQueueAdapter this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenAbout -> com.sunkaisens.skdroid.Screens.ScreenAbout:
    java.lang.String TAG -> f
    android.widget.Button feedback -> g
    void onCreate(android.os.Bundle) -> onCreate
com.sunkaisens.skdroid.Screens.ScreenAbout$1 -> com.sunkaisens.skdroid.Screens.bg:
    com.sunkaisens.skdroid.Screens.ScreenAbout this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAbout$2 -> com.sunkaisens.skdroid.Screens.bh:
    com.sunkaisens.skdroid.Screens.ScreenAbout this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAdhockLogin -> com.sunkaisens.skdroid.Screens.ScreenAdhockLogin:
    java.lang.String TAG -> f
    android.widget.EditText mEditName -> g
    android.widget.EditText mEditAccount -> h
    android.widget.Button mBtLogin -> i
    java.util.HashMap mMessageREPORTHashMap -> j
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.EditText access$0(com.sunkaisens.skdroid.Screens.ScreenAdhockLogin) -> a
    android.widget.EditText access$1(com.sunkaisens.skdroid.Screens.ScreenAdhockLogin) -> b
    java.util.HashMap access$2(com.sunkaisens.skdroid.Screens.ScreenAdhockLogin) -> c
com.sunkaisens.skdroid.Screens.ScreenAdhockLogin$1 -> com.sunkaisens.skdroid.Screens.bi:
    com.sunkaisens.skdroid.Screens.ScreenAdhockLogin this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenAdhockLogin$2 -> com.sunkaisens.skdroid.Screens.bj:
    com.sunkaisens.skdroid.Screens.ScreenAdhockLogin this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat -> com.sunkaisens.skdroid.Screens.ScreenChat:
    java.lang.String TAG -> k
    org.doubango.ngn.services.INgnHistoryService mHistorytService -> f
    org.doubango.ngn.services.INgnSipService mSipService -> l
    android.view.inputmethod.InputMethodManager mInputMethodManager -> m
    java.lang.String sRemoteParty -> n
    org.doubango.ngn.sip.NgnMsrpSession mSession -> o
    org.doubango.ngn.media.NgnMediaType mMediaType -> p
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter mAdapter -> g
    android.widget.EditText mEtCompose -> q
    android.widget.ListView mLvHistoy -> r
    android.widget.TextView mTvName -> s
    android.widget.Button mBtSend -> t
    android.widget.ImageButton mBtadd_filetransfer_imagebutton -> u
    boolean zhankai -> v
    android.widget.ImageButton mBt_takephoto_button -> w
    android.widget.ImageButton mBt_IMaudio -> x
    android.widget.ImageButton mBt_IMvideoButton -> y
    android.media.MediaRecorder mMediaRecorder -> z
    java.lang.String SDPATH -> A
    java.io.File recAudioFile -> B
    android.widget.ImageButton mBtFiletransfer -> C
    android.view.View mViewFiletransfer_view -> D
    android.widget.LinearLayout mLinearLayoutFiletransfer_ll -> E
    android.widget.LinearLayout mLinearLayoutBottomAudioButton -> F
    android.widget.Button mBtbottom_IMaudioTalk_button_button -> G
    android.widget.ImageButton mBtInfo -> H
    android.widget.ImageButton mBtBack -> I
    android.widget.TextView mTvContentCount -> J
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> K
    com.sunkaisens.skdroid.model.ModelContact userinfo -> h
    java.util.HashMap uploadMap -> i
    java.util.HashMap downloadMap -> j
    long downtime -> L
    long uptime -> M
    long jiangetime -> N
    android.os.Handler mChangeAudioHandler -> O
    java.lang.Runnable mGetAudioDBRunnable -> P
    java.lang.Thread mGetAudioDBthread -> Q
    android.widget.ImageView audio_loudImageView -> R
    android.app.Dialog selectDialog -> S
    android.content.ClipboardManager clipboardManager -> T
    void onCreate(android.os.Bundle) -> onCreate
    void getAudiodb() -> h
    void getimage() -> i
    boolean hasMenu() -> e
    boolean createOptionsMenu(android.view.Menu) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    void changeUserMsgReadStatus() -> m
    void initialize(org.doubango.ngn.media.NgnMediaType) -> a
    long findMaxHistoryMsgTime() -> n
    boolean sendMessageDirect(java.lang.String,java.lang.String) -> a
    boolean sendMessageDirectNoHistory(org.doubango.ngn.model.NgnHistorySMSEvent) -> a
    java.lang.String ctreateExpandedField_socket(java.lang.String) -> a
    void startChat(java.lang.String,boolean) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void sendtakephoto(java.lang.String,java.lang.String) -> b
    void sendIMaudio() -> j
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    java.lang.String access$0() -> k
    android.widget.ImageView access$1(com.sunkaisens.skdroid.Screens.ScreenChat) -> a
    android.app.Dialog access$2(com.sunkaisens.skdroid.Screens.ScreenChat) -> b
    org.doubango.ngn.services.INgnSipService access$3(com.sunkaisens.skdroid.Screens.ScreenChat) -> c
    android.widget.EditText access$4(com.sunkaisens.skdroid.Screens.ScreenChat) -> d
    boolean access$5(com.sunkaisens.skdroid.Screens.ScreenChat) -> e
    android.view.inputmethod.InputMethodManager access$6(com.sunkaisens.skdroid.Screens.ScreenChat) -> f
    boolean access$7() -> l
    android.view.View access$8(com.sunkaisens.skdroid.Screens.ScreenChat) -> g
    android.widget.LinearLayout access$9(com.sunkaisens.skdroid.Screens.ScreenChat) -> h
    android.widget.LinearLayout access$10(com.sunkaisens.skdroid.Screens.ScreenChat) -> i
    void access$11(boolean) -> a
    void access$12(com.sunkaisens.skdroid.Screens.ScreenChat,long) -> a
    void access$13(com.sunkaisens.skdroid.Screens.ScreenChat) -> j
    void access$14(com.sunkaisens.skdroid.Screens.ScreenChat,long) -> b
    long access$15(com.sunkaisens.skdroid.Screens.ScreenChat) -> k
    long access$16(com.sunkaisens.skdroid.Screens.ScreenChat) -> l
    void access$17(com.sunkaisens.skdroid.Screens.ScreenChat,long) -> c
    void access$18(com.sunkaisens.skdroid.Screens.ScreenChat) -> m
    long access$19(com.sunkaisens.skdroid.Screens.ScreenChat) -> n
    android.widget.Button access$20(com.sunkaisens.skdroid.Screens.ScreenChat) -> o
    android.widget.ImageButton access$21(com.sunkaisens.skdroid.Screens.ScreenChat) -> p
    android.widget.TextView access$22(com.sunkaisens.skdroid.Screens.ScreenChat) -> q
com.sunkaisens.skdroid.Screens.ScreenChat$1 -> com.sunkaisens.skdroid.Screens.bk:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenChat$10 -> com.sunkaisens.skdroid.Screens.bl:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$11 -> com.sunkaisens.skdroid.Screens.bm:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenChat$12 -> com.sunkaisens.skdroid.Screens.bn:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.sunkaisens.skdroid.Screens.ScreenChat$13 -> com.sunkaisens.skdroid.Screens.bo:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenChat$14 -> com.sunkaisens.skdroid.Screens.bp:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> filter
com.sunkaisens.skdroid.Screens.ScreenChat$15 -> com.sunkaisens.skdroid.Screens.bq:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$16 -> com.sunkaisens.skdroid.Screens.br:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    java.lang.String val$validUri -> b
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Screens.ScreenChat$2 -> com.sunkaisens.skdroid.Screens.bs:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    android.view.View val$audio_loudvView -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenChat$3 -> com.sunkaisens.skdroid.Screens.bt:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$4 -> com.sunkaisens.skdroid.Screens.bu:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$5 -> com.sunkaisens.skdroid.Screens.bv:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$6 -> com.sunkaisens.skdroid.Screens.bw:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$7 -> com.sunkaisens.skdroid.Screens.bx:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$8 -> com.sunkaisens.skdroid.Screens.by:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$9 -> com.sunkaisens.skdroid.Screens.bz:
    com.sunkaisens.skdroid.Screens.ScreenChat this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenChat$HistoryEventChatFilter -> com.sunkaisens.skdroid.Screens.ca:
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Screens.ScreenChatQueue -> com.sunkaisens.skdroid.Screens.ScreenChatQueue:
    java.lang.String TAG -> f
    android.widget.ListView mListView -> g
    com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter mAdapter -> h
    void onCreate(android.os.Bundle) -> onCreate
    com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter access$0(com.sunkaisens.skdroid.Screens.ScreenChatQueue) -> a
    java.lang.String access$1() -> h
com.sunkaisens.skdroid.Screens.ScreenChatQueue$1 -> com.sunkaisens.skdroid.Screens.cb:
    com.sunkaisens.skdroid.Screens.ScreenChatQueue this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter -> com.sunkaisens.skdroid.Screens.cc:
    java.util.List mSessions -> b
    android.view.LayoutInflater mInflater -> c
    android.os.Handler mHandler -> d
    org.doubango.ngn.utils.NgnPredicate mFilter -> e
    com.sunkaisens.skdroid.Screens.ScreenChatQueue this$0 -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> f
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    void update(java.util.Observable,java.lang.Object) -> update
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> a
com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter$1 -> com.sunkaisens.skdroid.Screens.cd:
    com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter this$1 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter$2 -> com.sunkaisens.skdroid.Screens.ce:
    com.sunkaisens.skdroid.Screens.ScreenChatQueue$ScreenChatQueueAdapter this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenCodecs -> com.sunkaisens.skdroid.Screens.ScreenCodecs:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.GridView mGridView -> h
    com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsAdapter mAdapter -> i
    int mCodecs -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    int access$0(com.sunkaisens.skdroid.Screens.ScreenCodecs) -> a
    void access$1(com.sunkaisens.skdroid.Screens.ScreenCodecs,int) -> a
    com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsAdapter access$2(com.sunkaisens.skdroid.Screens.ScreenCodecs) -> b
com.sunkaisens.skdroid.Screens.ScreenCodecs$1 -> com.sunkaisens.skdroid.Screens.cf:
    com.sunkaisens.skdroid.Screens.ScreenCodecs this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsAdapter -> com.sunkaisens.skdroid.Screens.cg:
    java.util.ArrayList sScreenCodecsItems -> a
    android.view.LayoutInflater mInflater -> b
    com.sunkaisens.skdroid.Screens.ScreenCodecs mBaseScreen -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void access$0(com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsAdapter) -> a
com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsItem -> com.sunkaisens.skdroid.Screens.ch:
    java.lang.String mName -> a
    java.lang.String mDescription -> b
    int mId -> c
    int access$1(com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsItem) -> a
    java.lang.String access$2(com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsItem) -> b
    java.lang.String access$3(com.sunkaisens.skdroid.Screens.ScreenCodecs$ScreenCodecsItem) -> c
com.sunkaisens.skdroid.Screens.ScreenContactAdd -> com.sunkaisens.skdroid.Screens.ScreenContactAdd:
    java.lang.String TAG -> f
    java.util.List contactListAll -> g
    java.lang.String searchContent -> h
    boolean hasBack() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean back() -> g
    void onStart() -> onStart
    void onRestart() -> onRestart
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    boolean refresh() -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List access$0(com.sunkaisens.skdroid.Screens.ScreenContactAdd) -> a
    void access$1(com.sunkaisens.skdroid.Screens.ScreenContactAdd,java.lang.String) -> a
com.sunkaisens.skdroid.Screens.ScreenContactAdd$1 -> com.sunkaisens.skdroid.Screens.ci:
    com.sunkaisens.skdroid.Screens.ScreenContactAdd this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactAdd$2 -> com.sunkaisens.skdroid.Screens.cj:
    com.sunkaisens.skdroid.Screens.ScreenContactAdd this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenContactAdd$3 -> com.sunkaisens.skdroid.Screens.ck:
    com.sunkaisens.skdroid.Screens.ScreenContactAdd this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.ScreenContactChild -> com.sunkaisens.skdroid.Screens.ScreenContactChild:
    java.lang.String TAG -> f
    java.util.List contactListAll -> h
    java.util.List contactListOrg -> i
    java.lang.String searchContent -> j
    com.sunkaisens.skdroid.model.ModelContact org -> k
    android.widget.TabHost mHost -> l
    android.app.LocalActivityManager lam -> g
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    void onCreate(android.os.Bundle) -> onCreate
    void updateInfo(java.lang.String) -> a
    void refreshContactListShow() -> h
    void onNewIntent(android.content.Intent) -> onNewIntent
    java.util.List access$0(com.sunkaisens.skdroid.Screens.ScreenContactChild) -> a
    java.util.List access$1(com.sunkaisens.skdroid.Screens.ScreenContactChild) -> b
    android.widget.TabHost access$2(com.sunkaisens.skdroid.Screens.ScreenContactChild) -> c
    void access$3(com.sunkaisens.skdroid.Screens.ScreenContactChild,java.lang.String) -> a
    void access$4(com.sunkaisens.skdroid.Screens.ScreenContactChild) -> d
com.sunkaisens.skdroid.Screens.ScreenContactChild$1 -> com.sunkaisens.skdroid.Screens.cl:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenContactChild$2 -> com.sunkaisens.skdroid.Screens.cm:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactChild$3 -> com.sunkaisens.skdroid.Screens.cn:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactChild$4 -> com.sunkaisens.skdroid.Screens.co:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void onTabChanged(java.lang.String) -> onTabChanged
com.sunkaisens.skdroid.Screens.ScreenContactChild$5 -> com.sunkaisens.skdroid.Screens.cp:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.ScreenContactChild$6 -> com.sunkaisens.skdroid.Screens.cq:
    com.sunkaisens.skdroid.Screens.ScreenContactChild this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenContactSelect -> com.sunkaisens.skdroid.Screens.ScreenContactSelect:
    java.lang.String TAG -> g
    java.util.List contactListRecent -> h
    java.util.List contactListAll -> i
    java.util.List contactListOrg -> j
    java.lang.String searchContent -> k
    android.widget.TabHost mHost -> l
    android.app.LocalActivityManager lam -> f
    void onStart() -> onStart
    void onRestart() -> onRestart
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    boolean refresh() -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List access$0(com.sunkaisens.skdroid.Screens.ScreenContactSelect) -> a
    java.util.List access$1(com.sunkaisens.skdroid.Screens.ScreenContactSelect) -> b
    java.util.List access$2(com.sunkaisens.skdroid.Screens.ScreenContactSelect) -> c
    void access$3(com.sunkaisens.skdroid.Screens.ScreenContactSelect,java.lang.String) -> a
    android.widget.TabHost access$4(com.sunkaisens.skdroid.Screens.ScreenContactSelect) -> d
com.sunkaisens.skdroid.Screens.ScreenContactSelect$1 -> com.sunkaisens.skdroid.Screens.cr:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactSelect$2 -> com.sunkaisens.skdroid.Screens.cs:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactSelect$3 -> com.sunkaisens.skdroid.Screens.ct:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenContactSelect$4 -> com.sunkaisens.skdroid.Screens.cu:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenContactSelect$5 -> com.sunkaisens.skdroid.Screens.cv:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.ScreenContactSelect$6 -> com.sunkaisens.skdroid.Screens.cw:
    com.sunkaisens.skdroid.Screens.ScreenContactSelect this$0 -> a
    void onTabChanged(java.lang.String) -> onTabChanged
com.sunkaisens.skdroid.Screens.ScreenDownloadConcacts -> com.sunkaisens.skdroid.Screens.cx:
    java.lang.String TAG -> b
    com.sunkaisens.skdroid.Screens.ScreenDownloadConcacts mScreenDownloadConcacts -> c
    java.util.List list -> d
    java.util.Stack stk -> e
    java.lang.String mIdentity -> f
    java.lang.String mNetworkGroupRealm -> g
    java.lang.String mNetworkRealm -> h
    java.lang.String mNetworkGroupPort -> i
    java.lang.String XMLContact -> j
    int timeout -> k
    boolean isSubscribeServiceGroup -> l
    boolean isSubscribePublicGroup -> m
    java.lang.String XMLContactNet -> n
    java.util.List listNet -> o
    java.lang.String XMLContactCommGroup -> p
    java.util.List listCommGroup -> q
    java.lang.String ReqContact -> r
    java.lang.String auidString -> s
    boolean isShenYang -> a
    java.lang.String shenYangString -> t
    java.lang.String NotshenYangString -> u
    com.sunkaisens.skdroid.Screens.ScreenDownloadConcacts getInstance() -> a
    void setUnSubscribeOK() -> b
    boolean downloadContacts() -> c
    java.util.List parserContactsTree() -> d
    boolean downloadContactsNet() -> e
    java.util.List parserContactsNetTree() -> f
    boolean downloadContactsCommGroup() -> g
    java.util.List parserContactsCommGroupTree() -> h
    boolean ContactReq() -> i
    java.lang.String parserContactReq() -> j
com.sunkaisens.skdroid.Screens.ScreenFeedback -> com.sunkaisens.skdroid.Screens.ScreenFeedback:
    android.widget.EditText feedback_body -> a
    android.widget.Button feedback_commit -> b
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.EditText access$0(com.sunkaisens.skdroid.Screens.ScreenFeedback) -> a
com.sunkaisens.skdroid.Screens.ScreenFeedback$1 -> com.sunkaisens.skdroid.Screens.cy:
    com.sunkaisens.skdroid.Screens.ScreenFeedback this$0 -> a
    void onClick(android.view.View) -> onClick
    com.sunkaisens.skdroid.Screens.ScreenFeedback access$0(com.sunkaisens.skdroid.Screens.ScreenFeedback$1) -> a
com.sunkaisens.skdroid.Screens.ScreenFeedback$1$1 -> com.sunkaisens.skdroid.Screens.cz:
    com.sunkaisens.skdroid.Screens.ScreenFeedback$1 this$1 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue -> com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue:
    java.lang.String TAG -> f
    android.widget.ListView mListView -> g
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter mAdapter -> h
    void onCreate(android.os.Bundle) -> onCreate
    boolean hasBack() -> f
    boolean back() -> g
    java.lang.String access$0() -> h
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter access$1(com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue) -> a
com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$1 -> com.sunkaisens.skdroid.Screens.da:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter -> com.sunkaisens.skdroid.Screens.db:
    java.util.List mSessions -> a
    org.doubango.ngn.utils.NgnPredicate mFilter -> b
    android.os.Handler mHandler -> c
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue mBaseScreen -> d
    android.view.LayoutInflater mInflater -> e
    void finalize() -> finalize
    void update(java.util.Observable,java.lang.Object) -> update
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter$1 -> com.sunkaisens.skdroid.Screens.dc:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter this$1 -> a
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter$2 -> com.sunkaisens.skdroid.Screens.dd:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferQueue$ScreenFileTransferQueueAdapter this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenFileTransferView -> com.sunkaisens.skdroid.Screens.ScreenFileTransferView:
    java.lang.String TAG -> f
    org.doubango.ngn.sip.NgnMsrpSession mSession -> g
    android.content.BroadcastReceiver mSipAndMsrpBroadCastRecv -> h
    android.widget.RelativeLayout mRelativeLayout -> i
    android.widget.ImageView mIvPreview -> j
    android.widget.ProgressBar mProgressBar -> k
    android.widget.Button mBtAccept -> l
    android.widget.Button mBtAbort -> m
    android.widget.TextView mTvInfo -> n
    android.widget.TextView mTvByteRange -> o
    android.widget.TextView mTvFileName -> p
    android.widget.TextView mTvRemoteParty -> q
    java.lang.String mStringFormat -> r
    org.doubango.ngn.utils.NgnTimer mTimerSuicide -> s
    java.util.TimerTask mTimerTaskSuicide -> t
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> u
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMsrpEventTypes -> v
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    boolean hasBack() -> f
    boolean back() -> g
    void scheduleSuicide() -> i
    void updateProgressBar$487762af(long,long) -> a
    boolean sendFile(java.lang.String,java.lang.String) -> a
    void access$0(com.sunkaisens.skdroid.Screens.ScreenFileTransferView,android.content.Intent) -> a
    org.doubango.ngn.sip.NgnMsrpSession access$1(com.sunkaisens.skdroid.Screens.ScreenFileTransferView) -> a
    void access$2(com.sunkaisens.skdroid.Screens.ScreenFileTransferView) -> b
    java.lang.String access$3() -> h
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> j
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMsrpEventTypes() -> k
com.sunkaisens.skdroid.Screens.ScreenFileTransferView$1 -> com.sunkaisens.skdroid.Screens.de:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView this$0 -> a
    void run() -> run
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView access$0(com.sunkaisens.skdroid.Screens.ScreenFileTransferView$1) -> a
com.sunkaisens.skdroid.Screens.ScreenFileTransferView$1$1 -> com.sunkaisens.skdroid.Screens.df:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView$1 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenFileTransferView$2 -> com.sunkaisens.skdroid.Screens.dg:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenFileTransferView$3 -> com.sunkaisens.skdroid.Screens.dh:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenFileTransferView$4 -> com.sunkaisens.skdroid.Screens.di:
    com.sunkaisens.skdroid.Screens.ScreenFileTransferView this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenGPS -> com.sunkaisens.skdroid.Screens.ScreenGPS:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.EditText mETSendGPSToHost -> h
    android.widget.EditText mETSendGPSToPort -> i
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
com.sunkaisens.skdroid.Screens.ScreenGeneral -> com.sunkaisens.skdroid.Screens.ScreenGeneral:
    java.lang.String TAG -> g
    android.widget.Spinner mSpProfile -> h
    android.widget.Spinner mSpAudioPlaybackLevel -> i
    android.widget.CheckBox mCbFullScreenVideo -> j
    android.widget.CheckBox mCbFFC -> k
    android.widget.CheckBox mCbAutoStart -> l
    android.widget.CheckBox mCbInterceptOutgoingCalls -> m
    android.widget.EditText mEtEnumDomain -> n
    android.widget.CheckBox mCbAEC -> o
    android.widget.CheckBox mCbVAD -> p
    android.widget.CheckBox mCbNR -> q
    android.widget.CheckBox mCheck_autologin -> r
    java.util.HashMap mMessageReportHashMap -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> s
    com.sunkaisens.skdroid.Screens.ScreenGeneral$AudioPlayBackLevel[] sAudioPlaybackLevels -> t
    com.sunkaisens.skdroid.Screens.ScreenGeneral$Profile[] sProfiles -> u
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    com.sunkaisens.skdroid.Screens.ScreenGeneral$Profile[] access$0() -> h
    com.sunkaisens.skdroid.Screens.ScreenGeneral$AudioPlayBackLevel[] access$1() -> i
com.sunkaisens.skdroid.Screens.ScreenGeneral$AudioPlayBackLevel -> com.sunkaisens.skdroid.Screens.dj:
    float mValue -> a
    java.lang.String mDescription -> b
    java.lang.String toString() -> toString
    int getSpinnerIndex(float) -> a
com.sunkaisens.skdroid.Screens.ScreenGeneral$Profile -> com.sunkaisens.skdroid.Screens.dk:
    org.doubango.tinyWRAP.tmedia_profile_t mValue -> a
    java.lang.String mDescription -> b
    java.lang.String toString() -> toString
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_profile_t) -> a
com.sunkaisens.skdroid.Screens.ScreenIdentity -> com.sunkaisens.skdroid.Screens.ScreenIdentity:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    java.lang.String ACTION_CHANGACCOUNT_EVENT -> h
    android.widget.TextView mEtDisplayName -> i
    android.widget.TextView mEtIMPU -> j
    android.widget.TextView mEtIMPI -> k
    android.widget.TextView mEtPassword -> l
    android.widget.TextView mEtRealm -> m
    android.widget.CheckBox mCbEarlyIMS -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    org.doubango.ngn.services.INgnConfigurationService access$0(com.sunkaisens.skdroid.Screens.ScreenIdentity) -> a
com.sunkaisens.skdroid.Screens.ScreenIdentity$1 -> com.sunkaisens.skdroid.Screens.dl:
    com.sunkaisens.skdroid.Screens.ScreenIdentity this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenIdentity$2 -> com.sunkaisens.skdroid.Screens.dm:
    com.sunkaisens.skdroid.Screens.ScreenIdentity this$0 -> a
    void onClick(android.view.View) -> onClick
    com.sunkaisens.skdroid.Screens.ScreenIdentity access$0(com.sunkaisens.skdroid.Screens.ScreenIdentity$2) -> a
com.sunkaisens.skdroid.Screens.ScreenIdentity$2$1 -> com.sunkaisens.skdroid.Screens.dn:
    com.sunkaisens.skdroid.Screens.ScreenIdentity$2 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenIdentity$2$2 -> com.sunkaisens.skdroid.Screens.do:
    com.sunkaisens.skdroid.Screens.ScreenIdentity$2 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenInterceptCall -> com.sunkaisens.skdroid.Screens.ScreenInterceptCall:
    java.lang.String TAG -> f
    void onCreate(android.os.Bundle) -> onCreate
com.sunkaisens.skdroid.Screens.ScreenInterceptCall$1 -> com.sunkaisens.skdroid.Screens.dp:
    com.sunkaisens.skdroid.Screens.ScreenInterceptCall this$0 -> a
    java.lang.String val$phone -> b
    android.content.Intent val$i -> c
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenInterceptCall$2 -> com.sunkaisens.skdroid.Screens.dq:
    com.sunkaisens.skdroid.Screens.ScreenInterceptCall this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.sunkaisens.skdroid.Screens.ScreenLoginAccount -> com.sunkaisens.skdroid.Screens.ScreenLoginAccount:
    java.lang.String TAG -> i
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount mLoginAccount -> f
    android.widget.EditText mEditAccount -> j
    android.widget.EditText mEditAccountPassword -> k
    android.widget.Button mBtLogin -> l
    android.widget.ImageButton mBtConfigure -> m
    android.widget.CheckBox mCheck_remember -> n
    android.widget.CheckBox mCheck_autologin -> o
    android.widget.ProgressBar mProgressBar -> p
    android.app.ProgressDialog mProgressDialog -> q
    java.lang.String mUserName -> r
    java.util.HashMap mMessageReportHashMap -> g
    boolean btLogin_isClicked -> h
    android.widget.PopupWindow mPopupWindow -> s
    android.widget.ImageView mImageView -> t
    android.os.Handler mHandler -> u
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String getSimCardMdn() -> i
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onRestart() -> onRestart
    void onStart() -> onStart
    void onStop() -> onStop
    android.app.ProgressDialog access$0(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> a
    android.os.Handler access$1(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> b
    android.widget.EditText access$2(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> c
    android.widget.EditText access$3(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> d
    android.widget.CheckBox access$4(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> e
    android.widget.CheckBox access$5(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> f
    java.lang.String access$6(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> g
    void access$7(com.sunkaisens.skdroid.Screens.ScreenLoginAccount,android.app.ProgressDialog) -> a
    java.lang.String access$8() -> h
    android.widget.PopupWindow access$9(com.sunkaisens.skdroid.Screens.ScreenLoginAccount) -> h
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$1 -> com.sunkaisens.skdroid.Screens.dr:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$2 -> com.sunkaisens.skdroid.Screens.ds:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$3 -> com.sunkaisens.skdroid.Screens.dt:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$4 -> com.sunkaisens.skdroid.Screens.du:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5 -> com.sunkaisens.skdroid.Screens.dv:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void onClick(android.view.View) -> onClick
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount access$0(com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5) -> a
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5$1 -> com.sunkaisens.skdroid.Screens.dw:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5$2 -> com.sunkaisens.skdroid.Screens.dx:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount$5 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$6 -> com.sunkaisens.skdroid.Screens.dy:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenLoginAccount$7 -> com.sunkaisens.skdroid.Screens.dz:
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenLoginSetting -> com.sunkaisens.skdroid.Screens.ScreenLoginSetting:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.EditText mEtFileServer -> h
    android.widget.EditText mEtMapServer -> i
    android.widget.EditText mEtRealm -> j
    android.widget.EditText mEtGroupPort -> k
    android.widget.EditText mEtGroupRealm -> l
    android.widget.CheckBox mCbEarlyIMS -> m
    android.widget.EditText mEtProxyHost -> n
    android.widget.EditText mEtProxyPort -> o
    android.widget.Spinner mSpTransport -> p
    android.widget.Spinner mSpProxyDiscovery -> q
    android.widget.CheckBox mCbSigComp -> r
    android.widget.CheckBox mCbWiFi -> s
    android.widget.CheckBox mCb3G -> t
    android.widget.RadioButton mRbIPv4 -> u
    android.widget.RadioButton mRbIPv6 -> v
    android.widget.EditText mEtReflashTime -> w
    android.widget.CheckBox mCbEnableStun -> x
    android.widget.RelativeLayout mRlStunServer -> y
    android.widget.EditText mEtStunServer -> z
    android.widget.EditText mEtStunPort -> A
    java.lang.String[] sSpinnerTransportItems -> B
    java.lang.String[] sSpinnerProxydiscoveryItems -> C
    android.widget.CompoundButton$OnCheckedChangeListener mCbEnableStun_OnCheckedChangeListener -> D
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
com.sunkaisens.skdroid.Screens.ScreenLoginSetting$1 -> com.sunkaisens.skdroid.Screens.ea:
    com.sunkaisens.skdroid.Screens.ScreenLoginSetting this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenMap -> com.sunkaisens.skdroid.Screens.ScreenMap:
    java.lang.String TAG -> S
    java.lang.String url -> T
    java.lang.String errorHtml -> U
    android.webkit.WebView mWebView -> V
    android.webkit.WebSettings mWebSettings -> W
    android.widget.LinearLayout mFloatLayout -> f
    android.view.WindowManager$LayoutParams wmParams -> g
    android.view.WindowManager mWindowManager -> h
    android.widget.LinearLayout mFloatLayout_user_list -> i
    android.widget.LinearLayout mFloatLayout_user_gps -> j
    android.widget.RelativeLayout mFloatLayout_seek_site -> k
    android.widget.ImageButton mIbOpenKind -> l
    android.widget.LinearLayout mLlPlotting -> m
    android.widget.ImageButton mMoving -> n
    android.widget.ImageButton mFold -> o
    android.widget.ImageButton mDistance -> p
    android.widget.ImageButton mIBPlotting_green -> q
    android.widget.ImageButton mIBPlotting_red -> r
    android.widget.ImageButton mIBPlotting_tank -> s
    android.widget.ImageButton mIBPlotting_truck -> t
    android.widget.ImageButton mIBPlotting_drag -> u
    android.widget.ImageButton mIBPlotting_delete -> v
    android.widget.ImageButton mIBDrawCircle -> w
    android.widget.ImageButton mIBMarkPropModify -> x
    android.widget.LinearLayout mContent -> y
    boolean isDraw -> z
    boolean isPlotting_green -> A
    boolean isPlotting_red -> B
    boolean isPlotting_tank -> C
    boolean isPlotting_truck -> D
    boolean isPlotting_drag -> E
    boolean isPlotting_delete -> F
    boolean isDrawCircle -> G
    boolean isMarkPropModify -> H
    android.os.Handler mMapHandler -> I
    android.widget.TextView mTitle -> J
    android.widget.PopupWindow mPopupWindow -> X
    android.widget.PopupWindow mPopupWindow_report -> Y
    android.widget.PopupWindow mPopupWindow_site -> Z
    android.widget.RadioGroup mRGPlotting -> aa
    android.widget.EditText mEtName -> ab
    android.widget.LinearLayout mLlCallLayout -> K
    android.widget.Button mBtnAudioCall -> ac
    android.widget.Button mBtnVideoCall -> ad
    android.widget.Button mBtnSendMessage -> ae
    android.widget.Button mBtnEndReport -> af
    android.widget.Button mBtnOpenReport -> ag
    android.widget.Button mBtnCloseReport -> ah
    java.util.HashMap contactMapOnLine -> L
    android.widget.ImageButton mUserOnLine -> ai
    android.widget.ListView mUserOnLineList -> aj
    com.sunkaisens.skdroid.Screens.ScreenMap$UserOnLineAdapter mUserOnLineAdapter -> ak
    java.util.HashMap contactMapGps -> M
    java.util.List contactListGps -> N
    android.widget.ImageButton mUserGps -> al
    android.widget.ListView mUserGpsList -> am
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter mUserGpsAdapter -> an
    android.widget.ImageButton mIbSeekSite -> ao
    android.widget.EditText mEtSeekSite -> ap
    android.widget.Button mBtnSeek -> aq
    android.widget.Button mBtnBrowse -> ar
    android.widget.Button mBtnExit -> as
    java.util.List mSeekSiteList -> at
    android.widget.ListView mLvSeekSiteList -> au
    com.sunkaisens.skdroid.Screens.ScreenMap$SeekSiteAdapter mSeekSiteAdapter -> av
    java.lang.String mName -> aw
    java.lang.String mFlag -> ax
    java.lang.String mSeekSite -> ay
    java.lang.String mRemoteParty -> az
    int mMessageType -> aA
    int mIndex -> aB
    double mLon -> aC
    double mLat -> aD
    android.view.LayoutInflater mInflater -> aE
    android.widget.RelativeLayout mCallLayout -> aF
    android.view.View mViewTrying -> aG
    android.view.View mViewInCallAudio -> aH
    android.view.View mViewChat -> aI
    boolean SHOW_SIP_PHRASE -> aJ
    com.sunkaisens.skdroid.Services.ServiceAV serviceAV_map -> O
    android.content.Context context_map -> P
    boolean bMapCall -> Q
    com.sunkaisens.skdroid.adapter.ScreenChatMapAdapter mAdapter -> R
    android.widget.EditText mEtCompose -> aK
    android.widget.ListView mLvHistoy -> aL
    android.widget.TextView mTvName -> aM
    android.widget.Button mBtSend -> aN
    android.widget.ImageButton mBtBack -> aO
    android.widget.TextView mTvContentCount -> aP
    com.sunkaisens.skdroid.model.ModelContact userinfo -> aQ
    org.doubango.ngn.services.INgnHistoryService mHistorytService -> aR
    org.doubango.ngn.services.INgnSipService mSipService -> aS
    org.doubango.ngn.utils.NgnTimer mTimerSuicide -> aT
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    boolean refresh() -> b
    java.lang.String getRemoteParty() -> h
    long findMaxHistoryMsgTime() -> r
    java.lang.String access$0() -> i
    java.lang.String access$1(com.sunkaisens.skdroid.Screens.ScreenMap) -> a
    java.lang.String access$2() -> j
    void access$3(java.lang.String) -> a
    void access$4$7b19576a() -> k
    android.widget.PopupWindow access$5(com.sunkaisens.skdroid.Screens.ScreenMap) -> b
    void access$6$1b9d6f8(android.widget.PopupWindow) -> a
    android.widget.PopupWindow access$7(com.sunkaisens.skdroid.Screens.ScreenMap) -> c
    android.widget.EditText access$8(com.sunkaisens.skdroid.Screens.ScreenMap) -> d
    void access$9(com.sunkaisens.skdroid.Screens.ScreenMap,java.lang.String) -> a
    android.webkit.WebView access$10(com.sunkaisens.skdroid.Screens.ScreenMap) -> e
    java.lang.String access$11(com.sunkaisens.skdroid.Screens.ScreenMap) -> f
    void access$12(com.sunkaisens.skdroid.Screens.ScreenMap) -> g
    void access$13$1b9d6f8(com.sunkaisens.skdroid.Screens.ScreenMap) -> h
    android.widget.ImageButton access$14(com.sunkaisens.skdroid.Screens.ScreenMap) -> i
    android.widget.ListView access$15(com.sunkaisens.skdroid.Screens.ScreenMap) -> j
    void access$16(com.sunkaisens.skdroid.Screens.ScreenMap,int) -> a
    android.widget.RadioGroup access$17(com.sunkaisens.skdroid.Screens.ScreenMap) -> k
    void access$18(com.sunkaisens.skdroid.Screens.ScreenMap,java.lang.String) -> b
    android.widget.EditText access$19(com.sunkaisens.skdroid.Screens.ScreenMap) -> l
    void access$20(com.sunkaisens.skdroid.Screens.ScreenMap,java.lang.String) -> c
    java.lang.String access$21(com.sunkaisens.skdroid.Screens.ScreenMap) -> m
    java.lang.String access$22(com.sunkaisens.skdroid.Screens.ScreenMap) -> n
    android.widget.PopupWindow access$23(com.sunkaisens.skdroid.Screens.ScreenMap) -> o
    android.widget.ListView access$24(com.sunkaisens.skdroid.Screens.ScreenMap) -> p
    android.widget.ImageButton access$25(com.sunkaisens.skdroid.Screens.ScreenMap) -> q
    android.widget.ListView access$26(com.sunkaisens.skdroid.Screens.ScreenMap) -> r
    android.widget.ImageButton access$27(com.sunkaisens.skdroid.Screens.ScreenMap) -> s
    void access$28(com.sunkaisens.skdroid.Screens.ScreenMap,android.view.View) -> a
    void access$29(com.sunkaisens.skdroid.Screens.ScreenMap,android.view.View,java.lang.String) -> a
    java.util.List access$30(com.sunkaisens.skdroid.Screens.ScreenMap) -> t
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter access$31(com.sunkaisens.skdroid.Screens.ScreenMap) -> u
    android.widget.RelativeLayout access$32() -> l
    int access$33(com.sunkaisens.skdroid.Screens.ScreenMap) -> v
    void access$34(com.sunkaisens.skdroid.Screens.ScreenMap,int) -> b
    void access$36$1b9d6f8(com.sunkaisens.skdroid.Screens.ScreenMap) -> w
    org.doubango.ngn.services.INgnSipService access$41() -> m
    android.widget.EditText access$42() -> n
    boolean access$43() -> o
    android.widget.Button access$44() -> p
    android.widget.TextView access$45() -> q
com.sunkaisens.skdroid.Screens.ScreenMap$1 -> com.sunkaisens.skdroid.Screens.eb:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$12 -> com.sunkaisens.skdroid.Screens.ec:
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$13 -> com.sunkaisens.skdroid.Screens.ed:
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$14 -> com.sunkaisens.skdroid.Screens.ee:
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.sunkaisens.skdroid.Screens.ScreenMap$15 -> com.sunkaisens.skdroid.Screens.ef:
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenMap$2 -> com.sunkaisens.skdroid.Screens.eg:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenMap$3 -> com.sunkaisens.skdroid.Screens.eh:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenMap$4 -> com.sunkaisens.skdroid.Screens.ei:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenMap$7 -> com.sunkaisens.skdroid.Screens.ej:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenMap$BtnListener -> com.sunkaisens.skdroid.Screens.ek:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$HistoryEventChatMapFilter -> com.sunkaisens.skdroid.Screens.el:
    boolean apply(java.lang.Object) -> apply
com.sunkaisens.skdroid.Screens.ScreenMap$MyWebChromeClient -> com.sunkaisens.skdroid.Screens.em:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    void onProgressChanged(android.webkit.WebView,int) -> onProgressChanged
    void onReceivedTitle(android.webkit.WebView,java.lang.String) -> onReceivedTitle
    boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsAlert
    boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult) -> onJsPrompt
    boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult) -> onJsConfirm
com.sunkaisens.skdroid.Screens.ScreenMap$MyWebViewClient -> com.sunkaisens.skdroid.Screens.en:
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
com.sunkaisens.skdroid.Screens.ScreenMap$SeekSiteAdapter -> com.sunkaisens.skdroid.Screens.eo:
    java.util.List mSeekSites -> b
    android.view.LayoutInflater mInflater -> c
    com.sunkaisens.skdroid.Screens.ScreenMap mBaseScreen -> d
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void access$0(com.sunkaisens.skdroid.Screens.ScreenMap$SeekSiteAdapter,java.lang.String,java.lang.String) -> a
com.sunkaisens.skdroid.Screens.ScreenMap$SeekSiteAdapter$1 -> com.sunkaisens.skdroid.Screens.ep:
    com.sunkaisens.skdroid.Screens.ScreenMap$SeekSiteAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter -> com.sunkaisens.skdroid.Screens.eq:
    java.util.List mUsers -> b
    android.view.LayoutInflater mInflater -> c
    com.sunkaisens.skdroid.Screens.ScreenMap mBaseScreen -> d
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void access$0(com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter,java.lang.String,java.lang.String) -> a
    void access$1(com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter,java.lang.String,java.lang.String,java.lang.String) -> a
    void access$2(com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter,java.lang.String) -> a
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter$1 -> com.sunkaisens.skdroid.Screens.er:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter$2 -> com.sunkaisens.skdroid.Screens.es:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter$3 -> com.sunkaisens.skdroid.Screens.et:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter$4 -> com.sunkaisens.skdroid.Screens.eu:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter$5 -> com.sunkaisens.skdroid.Screens.ev:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserGpsAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMap$UserOnLineAdapter -> com.sunkaisens.skdroid.Screens.ew:
    java.util.List mUsers -> b
    android.view.LayoutInflater mInflater -> c
    com.sunkaisens.skdroid.Screens.ScreenMap mBaseScreen -> d
    com.sunkaisens.skdroid.Screens.ScreenMap this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.sunkaisens.skdroid.Screens.ScreenMap access$0(com.sunkaisens.skdroid.Screens.ScreenMap$UserOnLineAdapter) -> a
com.sunkaisens.skdroid.Screens.ScreenMap$UserOnLineAdapter$1 -> com.sunkaisens.skdroid.Screens.ex:
    com.sunkaisens.skdroid.Screens.ScreenMap$UserOnLineAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenMessaging -> com.sunkaisens.skdroid.Screens.ScreenMessaging:
    java.lang.String TAG -> f
    android.widget.EditText mEtConferenceFactory -> g
    android.widget.EditText mEtSMSC -> h
    android.widget.CheckBox mCbBinarySMS -> i
    android.widget.CheckBox mCbMsrpSuccessReports -> j
    android.widget.CheckBox mCbMsrpFailureReports -> k
    android.widget.CheckBox mCbMsrpOMFDR -> l
    android.widget.CheckBox mCbMWI -> m
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
com.sunkaisens.skdroid.Screens.ScreenNatt -> com.sunkaisens.skdroid.Screens.ScreenNatt:
    java.lang.String TAG -> f
    android.widget.CheckBox mCbHackAoR -> g
    android.widget.CheckBox mCbEnableStun -> h
    android.widget.RelativeLayout mRlEnableStun -> i
    android.widget.CheckBox mCbEnableIce -> j
    android.widget.RelativeLayout mRlStunServer -> k
    android.widget.RadioButton mRbDiscoStun -> l
    android.widget.RadioButton mRbSetStun -> m
    android.widget.EditText mEtStunServer -> n
    android.widget.EditText mEtStunPort -> o
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> p
    android.widget.CompoundButton$OnCheckedChangeListener mCbEnableStun_OnCheckedChangeListener -> q
    android.widget.CompoundButton$OnCheckedChangeListener mRbSetStun_OnCheckedChangeListener -> r
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    android.widget.RelativeLayout access$0(com.sunkaisens.skdroid.Screens.ScreenNatt) -> a
    android.widget.RelativeLayout access$1(com.sunkaisens.skdroid.Screens.ScreenNatt) -> b
com.sunkaisens.skdroid.Screens.ScreenNatt$1 -> com.sunkaisens.skdroid.Screens.ey:
    com.sunkaisens.skdroid.Screens.ScreenNatt this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenNatt$2 -> com.sunkaisens.skdroid.Screens.ez:
    com.sunkaisens.skdroid.Screens.ScreenNatt this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenNetInfo -> com.sunkaisens.skdroid.Screens.ScreenNetInfo:
    java.lang.String TAG -> f
    com.sunkaisens.skdroid.model.ModelContact info -> g
    android.widget.Button audiocall -> h
    android.widget.Button sms -> i
    android.widget.Button videocall -> j
    android.widget.Button members -> k
    android.widget.Button setcurrentgroup -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    com.sunkaisens.skdroid.model.ModelContact access$0(com.sunkaisens.skdroid.Screens.ScreenNetInfo) -> a
com.sunkaisens.skdroid.Screens.ScreenNetInfo$1 -> com.sunkaisens.skdroid.Screens.fa:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetInfo$2 -> com.sunkaisens.skdroid.Screens.fb:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetInfo$3 -> com.sunkaisens.skdroid.Screens.fc:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetInfo$4 -> com.sunkaisens.skdroid.Screens.fd:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetInfo$5 -> com.sunkaisens.skdroid.Screens.fe:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetInfo$6 -> com.sunkaisens.skdroid.Screens.ff:
    com.sunkaisens.skdroid.Screens.ScreenNetInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNetwork -> com.sunkaisens.skdroid.Screens.ScreenNetwork:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.EditText mEtProxyHost -> h
    android.widget.EditText mEtProxyPort -> i
    android.widget.Spinner mSpTransport -> j
    android.widget.Spinner mSpProxyDiscovery -> k
    android.widget.CheckBox mCbSigComp -> l
    android.widget.CheckBox mCbWiFi -> m
    android.widget.CheckBox mCb3G -> n
    android.widget.RadioButton mRbIPv4 -> o
    android.widget.RadioButton mRbIPv6 -> p
    android.widget.RadioButton mRbLocal -> q
    android.widget.RadioButton mRbRemote -> r
    android.widget.EditText mEtXcapRoot -> s
    android.widget.EditText mEtXUI -> t
    android.widget.EditText mEtPassword -> u
    android.widget.RelativeLayout mRlRemote -> v
    android.widget.EditText mETSendGPSToHost -> w
    android.widget.EditText mETSendGPSToPort -> x
    java.lang.String[] sSpinnerTransportItems -> y
    java.lang.String[] sSpinnerProxydiscoveryItems -> z
    android.widget.CompoundButton$OnCheckedChangeListener rbLocal_OnCheckedChangeListener -> A
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    android.widget.RelativeLayout access$0(com.sunkaisens.skdroid.Screens.ScreenNetwork) -> a
com.sunkaisens.skdroid.Screens.ScreenNetwork$1 -> com.sunkaisens.skdroid.Screens.fg:
    com.sunkaisens.skdroid.Screens.ScreenNetwork this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenNewSMS -> com.sunkaisens.skdroid.Screens.ScreenNewSMS:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnHistoryService mHistorytService -> g
    org.doubango.ngn.services.INgnSipService mSipService -> h
    android.view.inputmethod.InputMethodManager mInputMethodManager -> i
    org.doubango.ngn.sip.NgnMsrpSession mSession -> j
    org.doubango.ngn.media.NgnMediaType mMediaType -> k
    android.widget.EditText mEtName -> l
    android.widget.EditText mEtCompose -> m
    android.widget.Button mBtSend -> n
    android.widget.ImageButton mBtadd_filetransfer_imagebutton -> o
    android.widget.Button mBtFiletransfer -> p
    android.view.View mViewFiletransfer_view -> q
    android.widget.LinearLayout mLinearLayoutFiletransfer_ll -> r
    android.widget.TextView mTvContentCount -> s
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onResume() -> onResume
    void onPause() -> onPause
    boolean isContainCharacter(java.lang.String) -> a
    long findMaxHistoryMsgTime() -> h
    org.doubango.ngn.services.INgnSipService access$0(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> a
    android.widget.EditText access$1(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> b
    android.widget.EditText access$2(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> c
    boolean access$3(com.sunkaisens.skdroid.Screens.ScreenNewSMS,java.lang.String,java.lang.String) -> a
    android.widget.TextView access$4(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> d
    android.view.inputmethod.InputMethodManager access$5(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> e
    android.view.View access$6(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> f
    android.widget.LinearLayout access$7(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> g
    android.widget.Button access$8(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> h
    android.widget.ImageButton access$9(com.sunkaisens.skdroid.Screens.ScreenNewSMS) -> i
com.sunkaisens.skdroid.Screens.ScreenNewSMS$1 -> com.sunkaisens.skdroid.Screens.fh:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNewSMS$2 -> com.sunkaisens.skdroid.Screens.fi:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNewSMS$3 -> com.sunkaisens.skdroid.Screens.fj:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNewSMS$4 -> com.sunkaisens.skdroid.Screens.fk:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNewSMS$5 -> com.sunkaisens.skdroid.Screens.fl:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenNewSMS$6 -> com.sunkaisens.skdroid.Screens.fm:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.sunkaisens.skdroid.Screens.ScreenNewSMS$7 -> com.sunkaisens.skdroid.Screens.fn:
    com.sunkaisens.skdroid.Screens.ScreenNewSMS this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.sunkaisens.skdroid.Screens.ScreenOrgInfo -> com.sunkaisens.skdroid.Screens.ScreenOrgInfo:
    java.lang.String TAG -> f
    com.sunkaisens.skdroid.model.ModelContact info -> h
    android.widget.Button audiocall -> i
    android.widget.Button sms -> j
    android.widget.Button videocall -> k
    android.widget.Button members -> l
    android.widget.Button setcurrentgroup -> m
    org.doubango.ngn.services.INgnNetworkService networkService -> n
    boolean isable -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    void updateInfo(java.lang.String) -> a
    void onNewIntent(android.content.Intent) -> onNewIntent
    com.sunkaisens.skdroid.model.ModelContact access$0(com.sunkaisens.skdroid.Screens.ScreenOrgInfo) -> a
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$1 -> com.sunkaisens.skdroid.Screens.fo:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$2 -> com.sunkaisens.skdroid.Screens.fp:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo val$so -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$3 -> com.sunkaisens.skdroid.Screens.fq:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$4 -> com.sunkaisens.skdroid.Screens.fr:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo val$so -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$5 -> com.sunkaisens.skdroid.Screens.fs:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenOrgInfo$6 -> com.sunkaisens.skdroid.Screens.ft:
    com.sunkaisens.skdroid.Screens.ScreenOrgInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo -> com.sunkaisens.skdroid.Screens.ScreenPersonInfo:
    java.lang.String TAG -> f
    com.sunkaisens.skdroid.model.ModelContact info -> g
    android.widget.Button uamonitor -> h
    org.doubango.ngn.services.INgnNetworkService networkService -> i
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    void updateInfo(java.lang.String) -> a
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    com.sunkaisens.skdroid.model.ModelContact access$0(com.sunkaisens.skdroid.Screens.ScreenPersonInfo) -> a
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$1 -> com.sunkaisens.skdroid.Screens.fu:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$2 -> com.sunkaisens.skdroid.Screens.fv:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo val$sp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$3 -> com.sunkaisens.skdroid.Screens.fw:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$4 -> com.sunkaisens.skdroid.Screens.fx:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo val$sp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$5 -> com.sunkaisens.skdroid.Screens.fy:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo val$sp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$6 -> com.sunkaisens.skdroid.Screens.fz:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo val$sp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$7 -> com.sunkaisens.skdroid.Screens.ga:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo val$sp -> b
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPersonInfo$8 -> com.sunkaisens.skdroid.Screens.gb:
    com.sunkaisens.skdroid.Screens.ScreenPersonInfo this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPresence -> com.sunkaisens.skdroid.Screens.ScreenPresence:
    java.lang.String TAG -> f
    android.widget.CheckBox mCbEnablePresence -> g
    android.widget.CheckBox mCbEnableRLS -> h
    android.widget.CheckBox mCbEnablePartialPub -> i
    android.widget.EditText mEtFreeText -> j
    android.widget.ImageView mIvAvatar -> k
    android.widget.ImageButton mBtCamera -> l
    android.widget.ImageButton mBtChooseFile -> m
    android.widget.RelativeLayout mRlPresence -> n
    android.widget.Spinner mSpStatus -> o
    com.sunkaisens.skdroid.Screens.ScreenPresence$Preview mPreview -> p
    com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem[] sSpinnerStatusItems -> q
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> r
    org.doubango.ngn.services.INgnSipService mSipService -> s
    android.view.View$OnClickListener mBtCamera_OnClickListener -> t
    android.widget.CompoundButton$OnCheckedChangeListener cbEnablePresence_OnCheckedChangeListener -> u
    android.widget.AdapterView$OnItemSelectedListener spStatus_OnItemSelectedListener -> v
    android.view.View$OnClickListener mBtChooseFile_OnClickListener -> w
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    com.sunkaisens.skdroid.Screens.ScreenPresence$Preview access$0(com.sunkaisens.skdroid.Screens.ScreenPresence) -> a
    android.widget.RelativeLayout access$1(com.sunkaisens.skdroid.Screens.ScreenPresence) -> b
    org.doubango.ngn.services.INgnConfigurationService access$2(com.sunkaisens.skdroid.Screens.ScreenPresence) -> c
    com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem[] access$3() -> h
    org.doubango.ngn.services.INgnSipService access$4(com.sunkaisens.skdroid.Screens.ScreenPresence) -> d
com.sunkaisens.skdroid.Screens.ScreenPresence$1 -> com.sunkaisens.skdroid.Screens.gc:
    com.sunkaisens.skdroid.Screens.ScreenPresence this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPresence$2 -> com.sunkaisens.skdroid.Screens.gd:
    com.sunkaisens.skdroid.Screens.ScreenPresence this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenPresence$3 -> com.sunkaisens.skdroid.Screens.ge:
    com.sunkaisens.skdroid.Screens.ScreenPresence this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.sunkaisens.skdroid.Screens.ScreenPresence$4 -> com.sunkaisens.skdroid.Screens.gf:
    com.sunkaisens.skdroid.Screens.ScreenPresence this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenPresence$Preview -> com.sunkaisens.skdroid.Screens.gg:
    android.view.SurfaceHolder mHolder -> c
    android.hardware.Camera camera -> a
    com.sunkaisens.skdroid.Screens.ScreenPresence this$0 -> b
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
com.sunkaisens.skdroid.Screens.ScreenPresence$ScreenOptionsAdapter -> com.sunkaisens.skdroid.Screens.gh:
    android.view.LayoutInflater mInflater -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem -> com.sunkaisens.skdroid.Screens.gi:
    int mDrawableId -> a
    org.doubango.ngn.sip.NgnPresenceStatus mStatus -> b
    java.lang.String mText -> c
    org.doubango.ngn.sip.NgnPresenceStatus access$1(com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem) -> a
    int access$2(com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem) -> b
    java.lang.String access$3(com.sunkaisens.skdroid.Screens.ScreenPresence$StatusItem) -> c
com.sunkaisens.skdroid.Screens.ScreenQoS -> com.sunkaisens.skdroid.Screens.ScreenQoS:
    java.lang.String TAG -> f
    android.widget.CheckBox mCbEnableSessionTimers -> g
    android.widget.RelativeLayout mRlSessionTimers -> h
    android.widget.EditText mEtSessionTimeOut -> i
    android.widget.Spinner mSpRefresher -> j
    android.widget.Spinner mSpPrecondStrength -> k
    android.widget.Spinner mSpPrecondType -> l
    android.widget.Spinner mSpVsize -> m
    android.widget.EditText mEtVideoFps -> n
    java.lang.String[] sSpinnerRefresherItems -> o
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSStrength[] sSpinnerPrecondStrengthItems -> p
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSType[] sSpinnerPrecondTypeItems -> q
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSVsize[] sSpinnerVsizeItems -> r
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> s
    android.widget.CompoundButton$OnCheckedChangeListener mCbEnableSessionTimers_OnCheckedChangeListener -> t
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    android.widget.RelativeLayout access$0(com.sunkaisens.skdroid.Screens.ScreenQoS) -> a
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSStrength[] access$1() -> h
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSType[] access$2() -> i
    com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSVsize[] access$3() -> j
com.sunkaisens.skdroid.Screens.ScreenQoS$1 -> com.sunkaisens.skdroid.Screens.gj:
    com.sunkaisens.skdroid.Screens.ScreenQoS this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSStrength -> com.sunkaisens.skdroid.Screens.gk:
    java.lang.String mDescription -> a
    org.doubango.tinyWRAP.tmedia_qos_strength_t mStrength -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_qos_strength_t) -> a
    org.doubango.tinyWRAP.tmedia_qos_strength_t access$1(com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSStrength) -> a
com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSType -> com.sunkaisens.skdroid.Screens.gl:
    java.lang.String mDescription -> a
    org.doubango.tinyWRAP.tmedia_qos_stype_t mType -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_qos_stype_t) -> a
    org.doubango.tinyWRAP.tmedia_qos_stype_t access$1(com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSType) -> a
com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSVsize -> com.sunkaisens.skdroid.Screens.gm:
    java.lang.String mDescription -> a
    org.doubango.tinyWRAP.tmedia_pref_video_size_t mValue -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_pref_video_size_t) -> a
    org.doubango.tinyWRAP.tmedia_pref_video_size_t access$1(com.sunkaisens.skdroid.Screens.ScreenQoS$ScreenQoSVsize) -> a
com.sunkaisens.skdroid.Screens.ScreenSecurity -> com.sunkaisens.skdroid.Screens.ScreenSecurity:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.Spinner mSpSRtpMode -> h
    android.widget.LinearLayout mLlTlsFiles -> i
    android.widget.ImageButton mIbPrivKey -> j
    android.widget.ImageButton mIbPubKey -> k
    android.widget.ImageButton mIbCA -> l
    android.widget.EditText mEtAMF -> m
    android.widget.EditText mEtOpId -> n
    android.widget.EditText mEtPrivKey -> o
    android.widget.EditText mEtPubKey -> p
    android.widget.EditText mEtCA -> q
    android.widget.CheckBox mCbTlsSecAgree -> r
    android.widget.CheckBox mCbTlsFiles -> s
    com.sunkaisens.skdroid.Screens.ScreenSecurity$ScreenSecuritySRtpMode[] sSpinnerSRtpModeItems -> t
    android.view.View$OnClickListener ibPrivKey_OnClickListener -> u
    android.view.View$OnClickListener ibPubKey_OnClickListener -> v
    android.view.View$OnClickListener ibCA_OnClickListener -> w
    android.widget.CompoundButton$OnCheckedChangeListener cbTlsFiles_OnCheckedChangeListener -> x
    android.widget.CompoundButton$OnCheckedChangeListener cbTlsSecAgree_OnCheckedChangeListener -> y
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.widget.LinearLayout access$0(com.sunkaisens.skdroid.Screens.ScreenSecurity) -> a
    com.sunkaisens.skdroid.Screens.ScreenSecurity$ScreenSecuritySRtpMode[] access$1() -> h
com.sunkaisens.skdroid.Screens.ScreenSecurity$1 -> com.sunkaisens.skdroid.Screens.gn:
    com.sunkaisens.skdroid.Screens.ScreenSecurity this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSecurity$2 -> com.sunkaisens.skdroid.Screens.go:
    com.sunkaisens.skdroid.Screens.ScreenSecurity this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSecurity$3 -> com.sunkaisens.skdroid.Screens.gp:
    com.sunkaisens.skdroid.Screens.ScreenSecurity this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSecurity$4 -> com.sunkaisens.skdroid.Screens.gq:
    com.sunkaisens.skdroid.Screens.ScreenSecurity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenSecurity$5 -> com.sunkaisens.skdroid.Screens.gr:
    com.sunkaisens.skdroid.Screens.ScreenSecurity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenSecurity$ScreenSecuritySRtpMode -> com.sunkaisens.skdroid.Screens.gs:
    java.lang.String mDescription -> a
    org.doubango.tinyWRAP.tmedia_srtp_mode_t mMode -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_srtp_mode_t) -> a
    org.doubango.tinyWRAP.tmedia_srtp_mode_t access$1(com.sunkaisens.skdroid.Screens.ScreenSecurity$ScreenSecuritySRtpMode) -> a
com.sunkaisens.skdroid.Screens.ScreenSettings -> com.sunkaisens.skdroid.Screens.ScreenSettings:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
com.sunkaisens.skdroid.Screens.ScreenSettings$1 -> com.sunkaisens.skdroid.Screens.gt:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$2 -> com.sunkaisens.skdroid.Screens.gu:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$3 -> com.sunkaisens.skdroid.Screens.gv:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$4 -> com.sunkaisens.skdroid.Screens.gw:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$5 -> com.sunkaisens.skdroid.Screens.gx:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$6 -> com.sunkaisens.skdroid.Screens.gy:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings$7 -> com.sunkaisens.skdroid.Screens.gz:
    com.sunkaisens.skdroid.Screens.ScreenSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings_bak -> com.sunkaisens.skdroid.Screens.ScreenSettings_bak:
    java.lang.String TAG -> f
    android.widget.GridView mGridView -> g
    void onResume() -> onResume
    void onCreate(android.os.Bundle) -> onCreate
com.sunkaisens.skdroid.Screens.ScreenSettings_bak$1 -> com.sunkaisens.skdroid.Screens.ha:
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenSettings_bak$2 -> com.sunkaisens.skdroid.Screens.hb:
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSettings_bak$3 -> com.sunkaisens.skdroid.Screens.hc:
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenSettings_bak$ScreenSettingsAdapter -> com.sunkaisens.skdroid.Screens.hd:
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak$ScreenSettingsItem[] sItems -> b
    android.view.LayoutInflater mInflater -> c
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.sunkaisens.skdroid.Screens.ScreenSettings_bak$ScreenSettingsItem -> com.sunkaisens.skdroid.Screens.he:
    int mIconResId -> a
    java.lang.String mText -> b
    java.lang.Class mClass -> c
    com.sunkaisens.skdroid.Screens.ScreenSettings_bak this$0 -> d
com.sunkaisens.skdroid.Screens.ScreenSimpleSettings -> com.sunkaisens.skdroid.Screens.ScreenSimpleSettings:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> g
    android.widget.Spinner mSpVsize -> h
    android.widget.CheckBox mCbNR -> i
    android.widget.CheckBox mCbAutoStart -> j
    android.widget.CheckBox mCbFullScreenVideo -> k
    android.widget.CheckBox mCbFFC -> l
    android.widget.CheckBox mCbEnableIce -> m
    android.widget.CheckBox mCbHackAoR -> n
    android.widget.EditText mEtVideoFps -> o
    com.sunkaisens.skdroid.Screens.ScreenSimpleSettings$ScreenQoSVsize[] sSpinnerVsizeItems -> p
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    com.sunkaisens.skdroid.Screens.ScreenSimpleSettings$ScreenQoSVsize[] access$0() -> h
com.sunkaisens.skdroid.Screens.ScreenSimpleSettings$1 -> com.sunkaisens.skdroid.Screens.hf:
    com.sunkaisens.skdroid.Screens.ScreenSimpleSettings this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenSimpleSettings$ScreenQoSVsize -> com.sunkaisens.skdroid.Screens.hg:
    java.lang.String mDescription -> a
    org.doubango.tinyWRAP.tmedia_pref_video_size_t mValue -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int getSpinnerIndex(org.doubango.tinyWRAP.tmedia_pref_video_size_t) -> a
    org.doubango.tinyWRAP.tmedia_pref_video_size_t access$1(com.sunkaisens.skdroid.Screens.ScreenSimpleSettings$ScreenQoSVsize) -> a
com.sunkaisens.skdroid.Screens.ScreenSplash -> com.sunkaisens.skdroid.Screens.ScreenSplash:
    java.lang.String TAG -> f
    android.content.BroadcastReceiver mBroadCastRecv -> g
    org.doubango.ngn.services.INgnSipService mSipService -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void access$0(com.sunkaisens.skdroid.Screens.ScreenSplash,android.content.BroadcastReceiver) -> a
    android.content.BroadcastReceiver access$1(com.sunkaisens.skdroid.Screens.ScreenSplash) -> a
    java.lang.String access$2() -> h
com.sunkaisens.skdroid.Screens.ScreenSplash$1 -> com.sunkaisens.skdroid.Screens.hh:
    com.sunkaisens.skdroid.Screens.ScreenSplash this$0 -> a
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    com.sunkaisens.skdroid.Screens.ScreenSplash access$0(com.sunkaisens.skdroid.Screens.ScreenSplash$1) -> a
com.sunkaisens.skdroid.Screens.ScreenSplash$1$1 -> com.sunkaisens.skdroid.Screens.hi:
    com.sunkaisens.skdroid.Screens.ScreenSplash$1 this$1 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenSplash$2 -> com.sunkaisens.skdroid.Screens.hj:
    com.sunkaisens.skdroid.Screens.ScreenSplash this$0 -> a
    com.sunkaisens.skdroid.Engine val$engine -> b
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabCall -> com.sunkaisens.skdroid.Screens.ScreenTabCall:
    java.lang.String TAG -> h
    com.sunkaisens.skdroid.component.ClearEditText mEtNumber -> i
    int position -> j
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType mInputType -> k
    android.view.inputmethod.InputMethodManager mInputMethodManager -> l
    org.doubango.ngn.services.INgnSipService mSipService -> m
    org.doubango.ngn.services.INgnHistoryService mHistorytService -> f
    com.sunkaisens.skdroid.adapter.CallAdapter mAdapter -> g
    android.view.View$OnClickListener mOnDialerClick -> n
    boolean refresh() -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    boolean hasBack() -> f
    boolean back() -> g
    boolean hasMenu() -> e
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    com.sunkaisens.skdroid.component.ClearEditText access$0(com.sunkaisens.skdroid.Screens.ScreenTabCall) -> a
    org.doubango.ngn.services.INgnSipService access$1(com.sunkaisens.skdroid.Screens.ScreenTabCall) -> b
    void access$2(com.sunkaisens.skdroid.Screens.ScreenTabCall,java.lang.String) -> a
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType access$3(com.sunkaisens.skdroid.Screens.ScreenTabCall) -> c
com.sunkaisens.skdroid.Screens.ScreenTabCall$1 -> com.sunkaisens.skdroid.Screens.hk:
    com.sunkaisens.skdroid.Screens.ScreenTabCall this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabCall$2 -> com.sunkaisens.skdroid.Screens.hl:
    com.sunkaisens.skdroid.Screens.ScreenTabCall this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.sunkaisens.skdroid.Screens.ScreenTabCall$3 -> com.sunkaisens.skdroid.Screens.hm:
    com.sunkaisens.skdroid.Screens.ScreenTabCall this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.ScreenTabCall$4 -> com.sunkaisens.skdroid.Screens.hn:
    com.sunkaisens.skdroid.Screens.ScreenTabCall this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.sunkaisens.skdroid.Screens.ScreenTabCall$5 -> com.sunkaisens.skdroid.Screens.ho:
    com.sunkaisens.skdroid.Screens.ScreenTabCall this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType -> com.sunkaisens.skdroid.Screens.hp:
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType Numbers -> a
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType Text -> b
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType[] ENUM$VALUES -> c
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType[] values() -> values
    com.sunkaisens.skdroid.Screens.ScreenTabCall$PhoneInputType valueOf(java.lang.String) -> valueOf
com.sunkaisens.skdroid.Screens.ScreenTabContact -> com.sunkaisens.skdroid.Screens.ScreenTabContact:
    java.lang.String TAG -> h
    java.util.List contactListRecent -> i
    java.util.List contactListAll -> j
    java.util.List contactListOrg -> k
    java.util.List contactListNet -> l
    java.util.List contactListDisp -> m
    java.util.List contactListCommGroup -> n
    java.lang.String searchContent -> o
    android.widget.TabHost mHost -> p
    android.app.LocalActivityManager lam -> f
    java.util.List mTabViews -> q
    boolean isable -> g
    void onStart() -> onStart
    void onRestart() -> onRestart
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    boolean refresh() -> b
    void setTabContactParams() -> h
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List access$0(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> a
    java.util.List access$1(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> b
    java.util.List access$2(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> c
    java.util.List access$3(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> d
    java.util.List access$4(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> e
    java.util.List access$5(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> f
    void access$6(com.sunkaisens.skdroid.Screens.ScreenTabContact,java.lang.String) -> a
    android.widget.TabHost access$7(com.sunkaisens.skdroid.Screens.ScreenTabContact) -> g
com.sunkaisens.skdroid.Screens.ScreenTabContact$1 -> com.sunkaisens.skdroid.Screens.hq:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$2 -> com.sunkaisens.skdroid.Screens.hr:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$3 -> com.sunkaisens.skdroid.Screens.hs:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$4 -> com.sunkaisens.skdroid.Screens.ht:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$5 -> com.sunkaisens.skdroid.Screens.hu:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$6 -> com.sunkaisens.skdroid.Screens.hv:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabContact$7 -> com.sunkaisens.skdroid.Screens.hw:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenTabContact$8 -> com.sunkaisens.skdroid.Screens.hx:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.sunkaisens.skdroid.Screens.ScreenTabContact$9 -> com.sunkaisens.skdroid.Screens.hy:
    com.sunkaisens.skdroid.Screens.ScreenTabContact this$0 -> a
    void onTabChanged(java.lang.String) -> onTabChanged
com.sunkaisens.skdroid.Screens.ScreenTabHome -> com.sunkaisens.skdroid.Screens.ScreenTabHome:
    java.lang.String TAG -> f
    android.widget.TabHost mHost -> h
    android.app.LocalActivityManager lam -> g
    android.widget.RadioGroup mainTab -> i
    android.os.Handler mMainHandler -> j
    com.sunkaisens.skdroid.Screens.ScreenTabHome$ContactGetThread mHandlerThread -> k
    android.content.BroadcastReceiver mSipBroadCastRecv -> l
    java.lang.String ACTION_CHANGACCOUNT_EVENT -> m
    android.widget.ImageView neterror -> n
    android.widget.RelativeLayout taball -> o
    org.doubango.ngn.services.INgnSipService mSipService -> p
    android.os.Handler mContactReq -> q
    boolean candownloadContact -> r
    boolean candownloadContactNet -> s
    boolean candownloadContactcommgroup -> t
    android.view.View$OnClickListener neterror_clickListener -> u
    void onStart() -> onStart
    void onRestart() -> onRestart
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    void onStop() -> onStop
    boolean updateData(int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean hasBack() -> f
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    boolean hasMenu() -> e
    boolean createOptionsMenu(android.view.Menu) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    android.os.Handler access$0(com.sunkaisens.skdroid.Screens.ScreenTabHome) -> a
    org.doubango.ngn.services.INgnSipService access$1(com.sunkaisens.skdroid.Screens.ScreenTabHome) -> b
    android.os.Handler access$2(com.sunkaisens.skdroid.Screens.ScreenTabHome) -> c
    void access$3(com.sunkaisens.skdroid.Screens.ScreenTabHome,boolean) -> a
    void access$4(com.sunkaisens.skdroid.Screens.ScreenTabHome,boolean) -> b
    void access$5(com.sunkaisens.skdroid.Screens.ScreenTabHome,boolean) -> c
    android.widget.ImageView access$6(com.sunkaisens.skdroid.Screens.ScreenTabHome) -> d
    void access$7(com.sunkaisens.skdroid.Screens.ScreenTabHome,android.os.Handler) -> a
com.sunkaisens.skdroid.Screens.ScreenTabHome$1 -> com.sunkaisens.skdroid.Screens.hz:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    void onClick(android.view.View) -> onClick
    com.sunkaisens.skdroid.Screens.ScreenTabHome access$0(com.sunkaisens.skdroid.Screens.ScreenTabHome$1) -> a
com.sunkaisens.skdroid.Screens.ScreenTabHome$1$1 -> com.sunkaisens.skdroid.Screens.ia:
    com.sunkaisens.skdroid.Screens.ScreenTabHome$1 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabHome$1$2 -> com.sunkaisens.skdroid.Screens.ib:
    com.sunkaisens.skdroid.Screens.ScreenTabHome$1 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabHome$2 -> com.sunkaisens.skdroid.Screens.ic:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenTabHome$3 -> com.sunkaisens.skdroid.Screens.id:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes -> b
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes() -> a
com.sunkaisens.skdroid.Screens.ScreenTabHome$4 -> com.sunkaisens.skdroid.Screens.ie:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenTabHome$4$1 -> com.sunkaisens.skdroid.Screens.if:
    com.sunkaisens.skdroid.Screens.ScreenTabHome$4 this$1 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenTabHome$ContactGetThread -> com.sunkaisens.skdroid.Screens.ig:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabHome$ContactReqThread -> com.sunkaisens.skdroid.Screens.ih:
    com.sunkaisens.skdroid.Screens.ScreenTabHome this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabMessage -> com.sunkaisens.skdroid.Screens.ScreenTabMessage:
    java.lang.String TAG -> f
    org.doubango.ngn.services.INgnHistoryService mHistoryService -> g
    org.doubango.ngn.services.INgnContactService mContactService -> h
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> i
    android.widget.ImageButton mBNewSMS -> j
    android.widget.ListView mListView -> k
    com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter mAdapter -> l
    int position -> m
    android.widget.AdapterView$OnItemClickListener mOnItemListViewClickListener -> n
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    boolean hasBack() -> f
    boolean back() -> g
    boolean refresh() -> b
    boolean hasMenu() -> e
    void doDelete(java.lang.String) -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    org.doubango.ngn.services.INgnHistoryService access$0(com.sunkaisens.skdroid.Screens.ScreenTabMessage) -> a
    java.lang.String access$1() -> h
    org.doubango.ngn.services.INgnConfigurationService access$2() -> i
com.sunkaisens.skdroid.Screens.ScreenTabMessage$1 -> com.sunkaisens.skdroid.Screens.ii:
    com.sunkaisens.skdroid.Screens.ScreenTabMessage this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTabMessage$2 -> com.sunkaisens.skdroid.Screens.ij:
    com.sunkaisens.skdroid.Screens.ScreenTabMessage this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMessage$3 -> com.sunkaisens.skdroid.Screens.ik:
    com.sunkaisens.skdroid.Screens.ScreenTabMessage this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Screens.ScreenTabMessage$MyHistoryEventSMSIntelligentFilter -> com.sunkaisens.skdroid.Screens.il:
    int mUnSeen -> a
    int getUnSeen() -> a
    void reset() -> reset
    boolean apply(org.doubango.ngn.model.NgnHistoryEvent) -> apply
com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter -> com.sunkaisens.skdroid.Screens.im:
    java.util.List mEvents -> a
    android.view.LayoutInflater mInflater -> b
    android.os.Handler mHandler -> c
    com.sunkaisens.skdroid.Screens.ScreenTabMessage mBaseScreen -> d
    com.sunkaisens.skdroid.Screens.ScreenTabMessage$MyHistoryEventSMSIntelligentFilter mFilter -> e
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> f
    void finalize() -> finalize
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void update(java.util.Observable,java.lang.Object) -> update
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> a
com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter$1 -> com.sunkaisens.skdroid.Screens.in:
    com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter$2 -> com.sunkaisens.skdroid.Screens.io:
    com.sunkaisens.skdroid.Screens.ScreenTabMessage$ScreenTabMessagesAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore -> com.sunkaisens.skdroid.Screens.ScreenTabMore:
    java.lang.String TAG -> f
    java.lang.Boolean flag -> g
    boolean updatingFlag -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
    void access$0(com.sunkaisens.skdroid.Screens.ScreenTabMore) -> a
    void access$1(com.sunkaisens.skdroid.Screens.ScreenTabMore,boolean) -> a
com.sunkaisens.skdroid.Screens.ScreenTabMore$1 -> com.sunkaisens.skdroid.Screens.ip:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$10 -> com.sunkaisens.skdroid.Screens.iq:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$11 -> com.sunkaisens.skdroid.Screens.ir:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$11$1 -> com.sunkaisens.skdroid.Screens.is:
    com.sunkaisens.skdroid.Screens.ScreenTabMore$11 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$11$2 -> com.sunkaisens.skdroid.Screens.it:
    com.sunkaisens.skdroid.Screens.ScreenTabMore$11 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$12 -> com.sunkaisens.skdroid.Screens.iu:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    com.sunkaisens.skdroid.update.SKDroidUpdate val$sKDroidUpdate -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.Screens.ScreenTabMore$13 -> com.sunkaisens.skdroid.Screens.iv:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    com.sunkaisens.skdroid.update.SKDroidUpdate val$sKDroidUpdate -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.sunkaisens.skdroid.Screens.ScreenTabMore$2 -> com.sunkaisens.skdroid.Screens.iw:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$3 -> com.sunkaisens.skdroid.Screens.ix:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$4 -> com.sunkaisens.skdroid.Screens.iy:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$5 -> com.sunkaisens.skdroid.Screens.iz:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$6 -> com.sunkaisens.skdroid.Screens.ja:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$7 -> com.sunkaisens.skdroid.Screens.jb:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$8 -> com.sunkaisens.skdroid.Screens.jc:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore$9 -> com.sunkaisens.skdroid.Screens.jd:
    com.sunkaisens.skdroid.Screens.ScreenTabMore this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTabMore_bak -> com.sunkaisens.skdroid.Screens.ScreenTabMore_bak:
    java.lang.String TAG -> f
    java.util.List morelist -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    boolean hasBack() -> f
    boolean back() -> g
com.sunkaisens.skdroid.Screens.ScreenTabMore_bak$1 -> com.sunkaisens.skdroid.Screens.je:
    com.sunkaisens.skdroid.Screens.ScreenTabMore_bak this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer -> com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer:
    android.widget.ImageView photoimage -> a
    android.widget.Button bTn_picture_transfer -> b
    android.widget.Button bTn_picture_cancel -> c
    java.lang.String takephotoUri -> d
    java.lang.String usernum -> e
    void onCreate(android.os.Bundle) -> onCreate
    int readPictureDegree(java.lang.String) -> a
    java.lang.String access$0(com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer) -> a
    java.lang.String access$1(com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer) -> b
com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer$1 -> com.sunkaisens.skdroid.Screens.jf:
    com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer$2 -> com.sunkaisens.skdroid.Screens.jg:
    com.sunkaisens.skdroid.Screens.ScreenTakePhotoIstransfer this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.Screen_VideoRecorder -> com.sunkaisens.skdroid.Screens.Screen_VideoRecorder:
    android.widget.Button record -> a
    android.widget.Button stop -> b
    android.widget.Button play -> c
    android.widget.Button istransfer -> d
    android.widget.Button cancel -> e
    java.io.File videofile -> f
    android.media.MediaRecorder mRecorder -> g
    android.view.SurfaceView sView -> h
    android.hardware.Camera mCamera -> i
    android.media.MediaPlayer mPlayer -> j
    boolean isRecording -> k
    boolean isplaying -> l
    java.lang.String SDPATH -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onDestroy() -> onDestroy
com.sunkaisens.skdroid.Screens.Screen_takephoto_camera -> com.sunkaisens.skdroid.Screens.Screen_takephoto_camera:
    com.sunkaisens.skdroid.Screens.CameraSurfacePreview mCameraSurfacePreview -> a
    android.widget.ImageButton mCaptureButton -> b
    android.widget.Button mCancelButton -> c
    java.lang.String TAG -> d
    java.lang.String SDPATH -> e
    java.io.File takephoto_tempfile -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
    java.io.File getOutputMediaFile() -> a
    android.widget.ImageButton access$0(com.sunkaisens.skdroid.Screens.Screen_takephoto_camera) -> a
    com.sunkaisens.skdroid.Screens.CameraSurfacePreview access$1(com.sunkaisens.skdroid.Screens.Screen_takephoto_camera) -> b
com.sunkaisens.skdroid.Screens.Screen_takephoto_camera$1 -> com.sunkaisens.skdroid.Screens.jh:
    com.sunkaisens.skdroid.Screens.Screen_takephoto_camera this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.Screens.Screen_takephoto_camera$2 -> com.sunkaisens.skdroid.Screens.ji:
    com.sunkaisens.skdroid.Screens.Screen_takephoto_camera this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.SensorService -> com.sunkaisens.skdroid.SensorService:
    android.hardware.SensorManager mManager -> a
    android.hardware.Sensor mSensor -> b
    android.hardware.SensorEventListener mListener -> c
    android.os.PowerManager localPowerManager -> d
    android.os.PowerManager$WakeLock localWakeLock -> e
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    android.os.PowerManager$WakeLock access$0(com.sunkaisens.skdroid.SensorService) -> a
com.sunkaisens.skdroid.SensorService$1 -> com.sunkaisens.skdroid.x:
    com.sunkaisens.skdroid.SensorService this$0 -> a
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
com.sunkaisens.skdroid.Services.IScreenService -> com.sunkaisens.skdroid.a.a:
    boolean back() -> a
    boolean bringToFront(int,java.lang.String[][]) -> a
    boolean show(java.lang.Class) -> a
    boolean show(java.lang.Class,java.lang.String) -> a
    boolean show(java.lang.Class,android.os.Bundle) -> a
    boolean showPersonOrOrgInfo(java.lang.Class,java.lang.String) -> b
    boolean show(java.lang.String) -> a
    boolean destroy(java.lang.String) -> b
    com.sunkaisens.skdroid.Screens.IBaseScreen getCurrentScreen() -> b
    com.sunkaisens.skdroid.Screens.IBaseScreen getScreen(java.lang.String) -> c
com.sunkaisens.skdroid.Services.ScreenService -> com.sunkaisens.skdroid.a.b:
    java.lang.String TAG -> a
    int mLastScreensIndex -> b
    java.lang.String[] mLastScreens -> c
    java.util.List mLastScreensN -> d
    boolean mIsScreenAV -> e
    boolean start() -> start
    boolean stop() -> stop
    boolean back() -> a
    boolean bringToFront(int,java.lang.String[][]) -> a
    boolean show(java.lang.Class,java.lang.String) -> a
    boolean showPersonOrOrgInfo(java.lang.Class,java.lang.String) -> b
    boolean show(java.lang.Class) -> a
    boolean show(java.lang.String) -> a
    boolean destroy(java.lang.String) -> b
    com.sunkaisens.skdroid.Screens.IBaseScreen getCurrentScreen() -> b
    com.sunkaisens.skdroid.Screens.IBaseScreen getScreen(java.lang.String) -> c
    boolean show(java.lang.Class,android.os.Bundle) -> a
com.sunkaisens.skdroid.Services.ServiceAV -> com.sunkaisens.skdroid.a.c:
    java.lang.String TAG -> b
    com.sunkaisens.skdroid.Services.ServiceAV lastServiceAV -> c
    java.util.Vector receiverArray -> d
    boolean antiRotation -> e
    com.sunkaisens.skdroid.NativeService nativeService -> a
    org.doubango.ngn.sip.NgnAVSession mAVSession -> f
    com.sunkaisens.skdroid.Screens.ScreenAV screenav -> g
    com.sunkaisens.skdroid.groupcall.GroupPTTCall mPttCall -> h
    java.lang.String pttName -> i
    int mLastRotation -> j
    com.sunkaisens.skdroid.Screens.ScreenMap screenMap -> k
    long mCurrentInfoCseq -> l
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMediaPluginEventTypes -> m
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> n
    void setNativeService(com.sunkaisens.skdroid.NativeService) -> a
    com.sunkaisens.skdroid.Services.ServiceAV create(org.doubango.ngn.sip.NgnAVSession,com.sunkaisens.skdroid.NativeService) -> a
    com.sunkaisens.skdroid.Services.ServiceAV create(org.doubango.ngn.sip.NgnAVSession,com.sunkaisens.skdroid.Screens.ScreenAV) -> a
    void release() -> a
    org.doubango.ngn.sip.NgnAVSession getAVSession() -> b
    com.sunkaisens.skdroid.Services.ServiceAV receiveCall(org.doubango.ngn.sip.NgnAVSession) -> a
    com.sunkaisens.skdroid.Services.ServiceAV makeCall(java.lang.String,org.doubango.ngn.media.NgnMediaType,int) -> a
    void applyCamRotation(int) -> a
    boolean hangUpCall() -> c
    boolean acceptCall() -> d
    void setOnResetJB() -> e
    void setOnPause(boolean) -> a
    void setConsumerOnPause(boolean) -> b
    boolean sendInfo(java.nio.ByteBuffer,java.lang.String) -> a
    boolean sendInfo(java.lang.String,java.lang.String) -> a
    void registerReceiver() -> f
    void unRegisterReceiver() -> g
    void onReceive$3b2d1350(android.content.Intent) -> a
    boolean sendPTTRequestInfoMsg() -> h
    boolean sendPTTReleaseInfoMsg() -> i
    boolean sendPTTInquireInfoMsg() -> j
    boolean sendPTTSubscribeInfoMsg(java.lang.String) -> a
    boolean sendPTTCancelInfoMsg(java.lang.String) -> b
    boolean sendPTTSubscribeAckInfoMsg() -> k
    boolean sendPTTCancelAckInfoMsg() -> l
    boolean sendPTTReleaseAckInfoMsg() -> m
    boolean sendPTTReportAliveInfoMsg() -> n
    boolean sendMonitorReportAliveInfoMsg() -> o
    void switchCameraFrontOrBack() -> p
    long getmCurrentInfoCseq() -> q
    void setmCurrentInfoCseq(long) -> a
    org.doubango.ngn.sip.NgnAVSession access$0(com.sunkaisens.skdroid.Services.ServiceAV) -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMediaPluginEventTypes() -> r
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> s
com.sunkaisens.skdroid.Services.ServiceAV$1 -> com.sunkaisens.skdroid.a.d:
    com.sunkaisens.skdroid.Services.ServiceAV this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceAdhoc -> com.sunkaisens.skdroid.a.e:
    java.util.concurrent.ConcurrentHashMap childrenMap -> a
    java.lang.String localIp -> c
    com.sks.adhoc.service.SKSPerson me -> d
    com.sunkaisens.skdroid.Services.ServiceAdhoc$AdhocCommunication adhocCom -> e
    com.sunkaisens.skdroid.Services.ServiceAdhoc$UpdateMe mUpdateMe -> f
    com.sunkaisens.skdroid.Services.ServiceAdhoc$CheckUserOnline mCheckUserOnline -> g
    java.util.List list -> h
    boolean isStopUpdateMe -> b
    android.os.Handler mAdhocHandler -> i
    com.sunkaisens.skdroid.Services.ServiceAdhoc instance -> j
    android.content.BroadcastReceiver broadcastReceiver -> k
    boolean isStartOK -> l
    boolean isStartOK() -> a
    void StartAdhoc() -> b
    com.sunkaisens.skdroid.Services.ServiceAdhoc getInstance() -> c
    void StopAdhoc() -> d
    void sendPersonHasChangedBroadcast(java.lang.String) -> b
    com.sunkaisens.skdroid.Services.ServiceAdhoc$AdhocCommunication access$0(com.sunkaisens.skdroid.Services.ServiceAdhoc) -> a
    com.sks.adhoc.service.SKSPerson access$1() -> e
    void access$2$16fe38c7(java.lang.String) -> a
    java.util.List access$3(com.sunkaisens.skdroid.Services.ServiceAdhoc) -> b
com.sunkaisens.skdroid.Services.ServiceAdhoc$1 -> com.sunkaisens.skdroid.a.f:
    com.sunkaisens.skdroid.Services.ServiceAdhoc this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Services.ServiceAdhoc$AdhocCommunication -> com.sunkaisens.skdroid.a.g:
    java.net.DatagramSocket socketReceive -> b
    byte[] recvBuffer -> c
    com.sunkaisens.skdroid.Services.ServiceAdhoc this$0 -> a
    void run() -> run
    void addPerson(com.sks.adhoc.service.SKSPerson) -> a
    void sendMessage(int,java.lang.String) -> a
    void access$0(com.sunkaisens.skdroid.Services.ServiceAdhoc$AdhocCommunication) -> a
com.sunkaisens.skdroid.Services.ServiceAdhoc$CheckUserOnline -> com.sunkaisens.skdroid.a.h:
    com.sunkaisens.skdroid.Services.ServiceAdhoc this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceAdhoc$UpdateMe -> com.sunkaisens.skdroid.a.i:
    com.sunkaisens.skdroid.Services.ServiceAdhoc this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceGPSReport -> com.sunkaisens.skdroid.a.j:
    java.lang.String TAG -> g
    android.location.LocationManager mLocationManager -> h
    double longitude -> i
    double latitude -> j
    double mLastLocationLongitude -> a
    double mLastLocationLatitude -> b
    org.doubango.ngn.utils.NgnTimer reportTimer -> k
    org.doubango.ngn.services.INgnSipService mSipService -> l
    java.lang.String remotePartyUri -> m
    java.lang.String mDisplayName -> n
    java.lang.String mPhoneNumber -> o
    android.os.Handler mMapHandler -> p
    int mImageId -> q
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> r
    long period -> c
    java.lang.Boolean EnableSendGPSData -> s
    com.sunkaisens.skdroid.Services.ServiceGPSReport$GPSReportThread mGPSReportThread -> d
    com.sunkaisens.skdroid.Services.ServiceGPSReport instance -> t
    android.location.Location lastLocation -> u
    int speedLimit -> v
    java.lang.String appName -> w
    boolean gpsNotifSign1 -> x
    boolean oldLoc -> y
    boolean bFirst -> e
    int k -> f
    android.location.LocationListener llListener -> z
    com.sunkaisens.skdroid.Services.ServiceGPSReport getInstance() -> a
    boolean getGPSServiceReprotStart() -> b
    void SetRemoteRartyUri(java.lang.String) -> a
    void setMapHandler(android.os.Handler) -> a
    void GPSReport(java.lang.String,java.lang.String) -> a
    void StopGPSReport() -> c
    void sendGPSInfo(double,double) -> a
    boolean isBetterLocation(android.location.Location,android.location.Location) -> a
    void openGpsReport(java.lang.String) -> b
    void closeGpsReport(java.lang.String,java.util.HashMap,java.util.List) -> a
    java.lang.String ctreateGpsReportXml(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void receiveGPSInfo(java.lang.String) -> c
    java.lang.String access$0() -> d
    void access$1(com.sunkaisens.skdroid.Services.ServiceGPSReport,double) -> a
    void access$2(com.sunkaisens.skdroid.Services.ServiceGPSReport,double) -> b
    android.location.LocationManager access$3(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> a
    void access$4(com.sunkaisens.skdroid.Services.ServiceGPSReport,boolean) -> a
    android.location.LocationListener access$5(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> b
    android.location.Location access$6(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> c
    void access$7(com.sunkaisens.skdroid.Services.ServiceGPSReport,android.location.Location) -> a
    boolean access$8(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> d
    java.lang.String access$9(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> e
    java.lang.Boolean access$10(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> f
    com.sunkaisens.skdroid.Services.ServiceGPSReport access$11() -> e
    double access$12(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> g
    double access$13(com.sunkaisens.skdroid.Services.ServiceGPSReport) -> h
com.sunkaisens.skdroid.Services.ServiceGPSReport$1 -> com.sunkaisens.skdroid.a.k:
    com.sunkaisens.skdroid.Services.ServiceGPSReport this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.sunkaisens.skdroid.Services.ServiceGPSReport$2 -> com.sunkaisens.skdroid.a.l:
    com.sunkaisens.skdroid.Services.ServiceGPSReport this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceGPSReport$GPSReportThread -> com.sunkaisens.skdroid.a.m:
    com.sunkaisens.skdroid.Services.ServiceGPSReport this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceLoginAccount -> com.sunkaisens.skdroid.a.n:
    java.lang.String TAG -> b
    com.sunkaisens.skdroid.Services.ServiceLoginAccount instance -> c
    java.lang.String mUserName -> d
    org.doubango.ngn.services.INgnSipService mSipService -> e
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> f
    java.util.HashMap mMessageIDHashMap -> a
    com.sunkaisens.skdroid.Screens.ScreenLoginAccount ownerScreen -> g
    com.sunkaisens.skdroid.NativeService nativeService -> h
    android.os.Handler mHandler -> i
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes -> j
    com.sunkaisens.skdroid.Services.ServiceLoginAccount getInstance() -> a
    void setNativeService(com.sunkaisens.skdroid.NativeService) -> a
    void onReceive$3b2d1350(android.content.Intent) -> a
    void adhoc_Login(java.lang.String,java.lang.String) -> a
    void adhoc_Logout() -> b
    boolean login(java.lang.String,java.lang.String) -> b
    void setHandler(android.os.Handler) -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes() -> c
com.sunkaisens.skdroid.Services.ServiceSocketMode -> com.sunkaisens.skdroid.a.o:
    java.lang.String TAG -> a
    com.sunkaisens.skdroid.Services.ServiceSocketMode instance -> b
    com.sunkaisens.skdroid.NativeService nativeService -> c
    com.sunkaisens.skdroid.groupcall.GroupPTTCall mPttCall -> d
    org.doubango.ngn.utils.NgnTimer mTimerAudioPTTReport -> e
    java.util.TimerTask mTimerTaskAudioPTTReport -> f
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes -> g
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMessagingEventTypes -> h
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes -> i
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnSubscriptionEventTypes -> j
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> k
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$groupcall$GroupPTTCall$PTTState -> l
    com.sunkaisens.skdroid.Services.ServiceSocketMode getInstance() -> a
    void setNativeService(com.sunkaisens.skdroid.NativeService) -> a
    void onReceive$3b2d1350(android.content.Intent) -> a
    void pushcontacts(boolean) -> a
    void handleEncryptInfoMsg(org.doubango.ngn.sip.NgnAVSession,byte[]) -> a
    byte[] intToBytes2(int) -> a
    boolean sendInfo(org.doubango.ngn.sip.NgnAVSession,java.nio.ByteBuffer,java.lang.String) -> a
    boolean sendInfo(java.lang.String,java.lang.String) -> a
    boolean access$0() -> b
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnRegistrationEventTypes() -> d
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnMessagingEventTypes() -> e
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnInviteEventTypes() -> f
    int[] $SWITCH_TABLE$org$doubango$ngn$events$NgnSubscriptionEventTypes() -> g
    java.lang.String access$5() -> c
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> h
    int[] $SWITCH_TABLE$com$sunkaisens$skdroid$groupcall$GroupPTTCall$PTTState() -> i
com.sunkaisens.skdroid.Services.ServiceSocketMode$1 -> com.sunkaisens.skdroid.a.p:
    void run() -> run
com.sunkaisens.skdroid.Services.ServiceSocketMode$2 -> com.sunkaisens.skdroid.a.q:
    com.sunkaisens.skdroid.Services.ServiceSocketMode this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.TvOut.TvOut -> com.sunkaisens.skdroid.TvOut.a:
    int native_tvout_open$134621() -> a
    int native_tvout_write(byte[],int,int) -> a
    int native_tvout_close() -> b
com.sunkaisens.skdroid.TvOut.TvOutJNI -> com.sunkaisens.skdroid.TvOut.TvOutJNI:
    int nativeTvoutOpen(int) -> nativeTvoutOpen
    int nativeTvoutWrite(byte[],int,int) -> nativeTvoutWrite
    int nativeTvoutClose() -> nativeTvoutClose
com.sunkaisens.skdroid.Utils.BootBroadcastReceiver -> com.sunkaisens.skdroid.Utils.BootBroadcastReceiver:
    java.lang.String TAG -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Utils.BootServiceBroadcastReceiver -> com.sunkaisens.skdroid.Utils.BootServiceBroadcastReceiver:
    java.lang.String TAG -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.sunkaisens.skdroid.Utils.ChkVer -> com.sunkaisens.skdroid.Utils.a:
    java.lang.String getAppName(android.content.Context) -> a
com.sunkaisens.skdroid.Utils.DateTimeUtils -> com.sunkaisens.skdroid.Utils.b:
    java.text.DateFormat sDateFormat -> a
    java.text.DateFormat sDateTimeFormat -> b
    java.text.DateFormat sTimeFormat -> c
    java.lang.String sTodayName -> d
    java.lang.String sYesterdayName -> e
    java.lang.String getFriendlyDateString(java.util.Date) -> a
com.sunkaisens.skdroid.Utils.DialerUtils -> com.sunkaisens.skdroid.Utils.c:
    void setDialerTextButton$1f94f3ba(android.app.Activity,int,java.lang.String,int,android.view.View$OnClickListener) -> a
    void setDialerImageButton(android.app.Activity,int,int,int,android.view.View$OnClickListener) -> a
com.sunkaisens.skdroid.Utils.FileHttpDownLoadClient -> com.sunkaisens.skdroid.Utils.d:
    java.lang.String TAG -> h
    java.lang.String fRemoteURL -> a
    java.lang.String fSavePath -> b
    boolean result -> c
    long sumLength -> d
    long downloadLength -> e
    org.doubango.ngn.model.NgnHistorySMSEvent chatEvent -> f
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter chatAdapter -> g
    boolean bCancel -> i
    android.os.Handler mProgressHandler -> j
    void setmProgressHandler(android.os.Handler) -> a
    java.lang.String[] getURLnFileNameFromContent(java.lang.String) -> a
    void httpDownloadFileInThread(java.lang.String,java.lang.String,org.doubango.ngn.model.NgnHistorySMSEvent,com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> a
    void cancel() -> a
    boolean httpDownloadFile(java.lang.String,java.lang.String) -> a
    void sendHandlerMsg(java.lang.String,java.lang.String) -> b
    boolean access$0(com.sunkaisens.skdroid.Utils.FileHttpDownLoadClient) -> a
com.sunkaisens.skdroid.Utils.FileHttpDownLoadClient$1 -> com.sunkaisens.skdroid.Utils.e:
    com.sunkaisens.skdroid.Utils.FileHttpDownLoadClient this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient -> com.sunkaisens.skdroid.Utils.f:
    java.lang.String TAG -> a
    java.lang.String serverRoot -> b
    java.lang.String fLocalPath -> c
    java.lang.String fSaveMame -> d
    java.lang.String result -> e
    long sumLength -> f
    long uploadLength -> g
    org.doubango.ngn.model.NgnHistorySMSEvent chatEvent -> h
    android.os.Handler mSMSHisEventHandler -> j
    android.os.Handler mFileUploadProgressHandler -> k
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter chatAdapter -> i
    boolean bCancel -> l
    java.net.HttpURLConnection connection -> m
    void setmFileUploadProgressHandler(android.os.Handler) -> a
    void httpSendFileInThread(java.lang.String,java.lang.String,org.doubango.ngn.model.NgnHistorySMSEvent,com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> a
    void cancel() -> a
    java.lang.String httpSendFile(java.lang.String,java.lang.String) -> a
    void httpSendFeedbackBodyNotJason(java.lang.String,java.lang.String,android.os.Handler) -> a
    java.lang.String getlocalpath(java.lang.String) -> a
    java.net.HttpURLConnection access$0(com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient) -> a
    void access$1$3d1494a7(com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient) -> b
    boolean access$2(com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient) -> c
com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient$1 -> com.sunkaisens.skdroid.Utils.g:
    com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient$1$1 -> com.sunkaisens.skdroid.Utils.h:
    com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient$1 this$1 -> a
    void run() -> run
com.sunkaisens.skdroid.Utils.FileHttpUpLoadClient$3 -> com.sunkaisens.skdroid.Utils.i:
    java.lang.String val$uriTmp -> a
    java.lang.String val$infoTmp -> b
    android.os.Handler val$handlerT -> c
    void run() -> run
com.sunkaisens.skdroid.Utils.FileTools -> com.sunkaisens.skdroid.Utils.j:
    byte[] readFileData(android.content.Context,java.lang.String) -> a
com.sunkaisens.skdroid.Utils.FitCenterFrameLayout -> com.sunkaisens.skdroid.Utils.FitCenterFrameLayout:
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.sunkaisens.skdroid.Utils.MyLog -> com.sunkaisens.skdroid.Utils.k:
    java.lang.Boolean MYLOG_SWITCH -> a
    java.lang.Boolean MYLOG_WRITE_TO_FILE -> b
    char MYLOG_TYPE -> c
    java.lang.String MYLOG_PATH_SDCARD_DIR -> d
    int SDCARD_LOG_FILE_SAVE_DAYS -> e
    java.lang.String MYLOG_FILE_NAME -> f
    java.text.SimpleDateFormat myLogSdf -> g
    java.text.SimpleDateFormat logfile -> h
    void d(java.lang.String,java.lang.String) -> a
    void i(java.lang.String,java.lang.String) -> b
    void log(java.lang.String,java.lang.String,char) -> a
com.sunkaisens.skdroid.Utils.MyProp -> com.sunkaisens.skdroid.Utils.l:
    java.lang.String MYPROP_PATH_SDCARD_DIR -> a
    java.lang.String MYPROP_FILE_NAME -> b
    java.util.Properties loadConfig() -> a
com.sunkaisens.skdroid.Utils.ParserSubscribeState -> com.sunkaisens.skdroid.Utils.m:
    java.lang.String DELETE_MEMBER_ITSELF -> a
    java.lang.String DELETE_WHOLE_GROUP -> b
    java.lang.String MEMBER_ONLINE_STATE -> c
    java.lang.String SUBSCRIBE_GROUP -> d
    java.lang.String GROUP_STATE_CHANGE -> e
    boolean InviteUsertoJoinOtherGroup -> f
    java.lang.String myselfNumber -> g
    com.sunkaisens.skdroid.Utils.ParserSubscribeState instance -> h
    java.lang.String REALM -> i
    java.lang.String IDENTIFY -> j
    java.lang.String getIdentify() -> a
    java.lang.String getRealm() -> b
    com.sunkaisens.skdroid.Utils.ParserSubscribeState getInstance() -> c
    void recursiveDelGroup(java.lang.StringBuffer,java.lang.String) -> a
    void parserGroupMemberState(java.lang.String,java.lang.String) -> a
    void delBusinessGroup(java.lang.String) -> a
    void delBusinessMember(java.lang.String,java.lang.String) -> b
    boolean delNormalGroupMember$16da05f3(java.lang.String) -> b
com.sunkaisens.skdroid.Utils.ParserSubscribeState$1 -> com.sunkaisens.skdroid.Utils.n:
    void run() -> run
com.sunkaisens.skdroid.Utils.ParserSubscribeState$2 -> com.sunkaisens.skdroid.Utils.o:
    void run() -> run
com.sunkaisens.skdroid.Utils.SystemVarTools -> com.sunkaisens.skdroid.Utils.p:
    boolean DEBUG_MODE -> a
    java.lang.String mIdentity -> z
    java.lang.String mNetworkRealm -> A
    boolean SUBSCRIBEOK -> b
    int nativeServiceNum -> c
    java.lang.String mIdentityChk -> d
    boolean useCdmaNetwork -> e
    boolean useFeedback -> f
    boolean useGisMap -> g
    java.lang.String sdcardPath -> h
    java.lang.String downloadPath -> i
    java.lang.String crashPath -> j
    java.util.HashMap map -> B
    java.lang.Integer[] mThumbIds -> C
    java.util.List contactListRecent -> D
    java.util.List contactListAll -> E
    java.util.List contactListOrg -> F
    java.util.List contactListBusinessAll -> G
    java.util.List contactListBusinessOrg -> H
    java.util.List contactListAllBus -> I
    java.util.List contactListOrgBus -> J
    java.util.List contactListAllOnLine -> K
    java.util.List contactListCommGroupOrg -> L
    java.util.List contactListCommGroupAll -> M
    int contactListBusinessAllNumber -> N
    java.lang.StringBuffer childOrg -> O
    boolean bContactOK -> P
    boolean bLogin -> k
    boolean mStartGroupCalllRepoort -> l
    boolean ScreenChat_Is_Top -> m
    android.content.SharedPreferences mSetCurrentGroup -> Q
    android.content.SharedPreferences$Editor mSetCurrentGroupEditor -> R
    boolean isLocalHangUp -> n
    boolean isLocalUnReg -> o
    boolean isLoginRefreshFail -> p
    boolean isSpeakerOn -> q
    org.doubango.ngn.utils.NgnTimer mTimerVideoMonitorReport -> r
    boolean mTakeVideoMonitorFlag -> s
    org.doubango.ngn.utils.NgnTimer mTimerVideoPTTReport -> t
    boolean mTakeVideoPTTFlag -> u
    org.doubango.ngn.utils.NgnTimer mTimerAudioPTTReport -> v
    boolean mTakeAudioPTTFlag -> w
    int avCallNotNumber -> x
    boolean isSubscribeSended -> y
    java.lang.String getLocalParty() -> a
    java.lang.Integer getThumbID(int) -> a
    java.lang.Integer getImageIDFromNumber(java.lang.String) -> a
    java.util.List getContactAll() -> b
    java.util.List getContactOrg() -> c
    java.util.List getContactListBusinessAll() -> d
    java.util.List getContactListBusinessOrg() -> e
    java.util.List getContactListCommGroupOrg() -> f
    java.util.List getContactRecent() -> g
    java.util.List getContactAllOnLine() -> h
    java.lang.String getIPFromUri(java.lang.String) -> b
    boolean contactFromString(java.util.List,java.lang.String) -> a
    boolean isContactOK() -> i
    void setContactOK(boolean) -> a
    void clear() -> j
    void initTestContactList() -> k
    boolean initContactListFromFile(android.content.Context) -> a
    int getContactListBusinessAllNumber() -> l
    void incContactListBusinessAllNumber() -> w
    void decContactListBusinessAllNumber() -> m
    void setContactBussiness(java.util.List) -> a
    void setContactCommGroupOrg(java.util.List) -> b
    java.lang.String getmIdentity() -> n
    void setContactAll(java.util.List) -> c
    java.util.List getOrgChildContact(com.sunkaisens.skdroid.model.ModelContact,int) -> a
    com.sunkaisens.skdroid.model.ModelContact createContactFromRemoteParty(java.lang.String) -> c
    com.sunkaisens.skdroid.model.ModelContact getContactFromIndex(java.lang.String) -> d
    com.sunkaisens.skdroid.model.ModelContact createContactFromNumberorName(java.lang.String) -> e
    com.sunkaisens.skdroid.model.ModelContact getContactFromPhoneNumber(java.lang.String) -> f
    java.lang.String getDisplayNameFromPhoneNumber(java.lang.String) -> g
    com.sunkaisens.skdroid.model.ModelContact createContactFromPhoneNumber(java.lang.String) -> h
    void updateContactRecent() -> o
    void reSetContactList() -> p
    void resetCurrentList(java.util.List) -> e
    void showToast(java.lang.String) -> i
    void showNotifyDialog(java.lang.String,android.app.Activity) -> a
    byte[] getOrgContactAllBus(int) -> b
    java.util.List mergeBothList(java.util.List,java.util.List) -> a
    java.lang.String getExtStr(int) -> c
    void setCurrentGroup(java.lang.String) -> j
    java.lang.String getGroupMobileNoFromIndex(java.lang.String) -> k
    boolean addContactAll(com.sunkaisens.skdroid.model.ModelContact) -> a
    boolean addContactOrg(com.sunkaisens.skdroid.model.ModelContact) -> b
    boolean addContactBusinessAll(com.sunkaisens.skdroid.model.ModelContact) -> c
    void addContactBusinessOrg(com.sunkaisens.skdroid.model.ModelContact) -> d
    void addContactCommGroupOrg(com.sunkaisens.skdroid.model.ModelContact) -> e
    boolean subscrebeContacts(java.util.List) -> d
    boolean subscribePublicAndServiceGroup() -> q
    boolean addContactCommGroupAll(com.sunkaisens.skdroid.model.ModelContact) -> f
    void sleep$1349ef() -> r
    java.lang.String mCallPeriodFormat(long) -> a
    boolean setDefaultSetting_socket() -> s
    java.util.List getContactAllOnLineNoSelf$3ff9fd98() -> t
    void setDefaultSetting() -> u
    java.lang.String toDBC(java.lang.String) -> l
    void setSettingsDefault() -> v
com.sunkaisens.skdroid.Utils.SystemVarTools$1 -> com.sunkaisens.skdroid.Utils.q:
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.Utils.Tools_data -> com.sunkaisens.skdroid.Utils.r:
    void writeData(java.util.HashMap) -> a
    java.util.HashMap readData() -> a
    java.util.HashMap readIDHashMap() -> b
    void writeIDHashMap(java.util.HashMap) -> b
com.sunkaisens.skdroid.Utils.XmlDoc -> com.sunkaisens.skdroid.Utils.s:
    java.util.List getPushList(java.lang.String) -> a
com.sunkaisens.skdroid.adapter.AbstractFileCache -> com.sunkaisens.skdroid.b.a:
    java.lang.String dirString -> a
    java.lang.String getSavePath(java.lang.String) -> a
    java.lang.String getCacheDir() -> a
    void clear() -> b
com.sunkaisens.skdroid.adapter.CallAdapter -> com.sunkaisens.skdroid.b.b:
    com.sunkaisens.skdroid.Services.IScreenService ss -> a
    java.util.List list -> b
    com.sunkaisens.skdroid.Screens.ScreenTabCall mBaseScreen -> c
    java.util.List mEvents -> d
    android.os.Handler mHandler -> e
    java.lang.String searchNum -> f
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> g
    int[] $SWITCH_TABLE$org$doubango$ngn$model$NgnHistoryEvent$StatusType -> h
    void setSearchKey(java.lang.String) -> a
    void updateEvents2List() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void finalize() -> finalize
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    void update(java.util.Observable,java.lang.Object) -> update
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> b
    int[] $SWITCH_TABLE$org$doubango$ngn$model$NgnHistoryEvent$StatusType() -> c
    java.util.List access$2(com.sunkaisens.skdroid.adapter.CallAdapter) -> a
com.sunkaisens.skdroid.adapter.CallAdapter$1 -> com.sunkaisens.skdroid.b.c:
    com.sunkaisens.skdroid.adapter.CallAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.adapter.CallAdapter$2 -> com.sunkaisens.skdroid.b.d:
    com.sunkaisens.skdroid.adapter.CallAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.adapter.CallAdapter$3 -> com.sunkaisens.skdroid.b.e:
    com.sunkaisens.skdroid.adapter.CallAdapter this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.adapter.CommonLog -> com.sunkaisens.skdroid.b.f:
    java.lang.String tag -> c
    int logLevel -> a
    boolean isDebug -> b
    void setTag(java.lang.String) -> a
    java.lang.String getFunctionName() -> a
    void e(java.lang.Object) -> a
    void d(java.lang.Object) -> b
com.sunkaisens.skdroid.adapter.CommonUtil -> com.sunkaisens.skdroid.b.g:
    com.sunkaisens.skdroid.adapter.CommonLog log -> a
    boolean hasSDCard() -> a
    java.lang.String getRootFilePath() -> b
com.sunkaisens.skdroid.adapter.ContactAdapter -> com.sunkaisens.skdroid.b.h:
    java.lang.String TAG -> a
    int num -> b
    android.content.Context mContext -> c
    java.util.List contactList -> d
    void setList(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.sunkaisens.skdroid.adapter.FileCache -> com.sunkaisens.skdroid.b.i:
    java.lang.String getSavePath(java.lang.String) -> a
    java.lang.String getCacheDir() -> a
com.sunkaisens.skdroid.adapter.FileHelper -> com.sunkaisens.skdroid.b.j:
    com.sunkaisens.skdroid.adapter.CommonLog log -> a
    boolean createDirectory(java.lang.String) -> a
    boolean deleteDirectory(java.lang.String) -> b
com.sunkaisens.skdroid.adapter.GroupUsersAdapter -> com.sunkaisens.skdroid.b.k:
    java.util.List users -> a
    android.content.Context mContext -> b
    void setUsers(java.util.List) -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void update(java.util.Observable,java.lang.Object) -> update
com.sunkaisens.skdroid.adapter.ImageLoader -> com.sunkaisens.skdroid.b.l:
    com.sunkaisens.skdroid.adapter.MemoryCache memoryCache -> a
    com.sunkaisens.skdroid.adapter.AbstractFileCache fileCache -> b
    java.util.Map imageViews -> c
    java.util.concurrent.ExecutorService executorService -> d
    void DisplayImage$707d5b05(java.lang.String,android.widget.ImageView) -> a
    android.graphics.Bitmap getBitmap(java.lang.String) -> a
    android.graphics.Bitmap decodeFile(java.io.File) -> a
    boolean imageViewReused(com.sunkaisens.skdroid.adapter.ImageLoader$PhotoToLoad) -> a
    void clearCache() -> a
    android.graphics.Bitmap access$0(com.sunkaisens.skdroid.adapter.ImageLoader,java.lang.String) -> a
    com.sunkaisens.skdroid.adapter.MemoryCache access$1(com.sunkaisens.skdroid.adapter.ImageLoader) -> a
com.sunkaisens.skdroid.adapter.ImageLoader$BitmapDisplayer -> com.sunkaisens.skdroid.b.m:
    android.graphics.Bitmap bitmap -> a
    com.sunkaisens.skdroid.adapter.ImageLoader$PhotoToLoad photoToLoad -> b
    com.sunkaisens.skdroid.adapter.ImageLoader this$0 -> c
    void run() -> run
com.sunkaisens.skdroid.adapter.ImageLoader$PhotoToLoad -> com.sunkaisens.skdroid.b.n:
    java.lang.String url -> a
    android.widget.ImageView imageView -> b
    com.sunkaisens.skdroid.adapter.ImageLoader this$0 -> c
com.sunkaisens.skdroid.adapter.ImageLoader$PhotosLoader -> com.sunkaisens.skdroid.b.o:
    com.sunkaisens.skdroid.adapter.ImageLoader$PhotoToLoad photoToLoad -> a
    com.sunkaisens.skdroid.adapter.ImageLoader this$0 -> b
    void run() -> run
com.sunkaisens.skdroid.adapter.LogFactory -> com.sunkaisens.skdroid.b.p:
    com.sunkaisens.skdroid.adapter.CommonLog log -> a
    com.sunkaisens.skdroid.adapter.CommonLog createLog() -> a
com.sunkaisens.skdroid.adapter.MemoryCache -> com.sunkaisens.skdroid.b.q:
    java.util.Map cache -> a
    long size -> b
    long limit -> c
    android.graphics.Bitmap get(java.lang.String) -> a
    void put(java.lang.String,android.graphics.Bitmap) -> a
    void clear() -> a
    long getSizeInBytes(android.graphics.Bitmap) -> a
com.sunkaisens.skdroid.adapter.MoreAdapter -> com.sunkaisens.skdroid.b.r:
    android.content.Context mContext -> a
    java.util.List list -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.sunkaisens.skdroid.adapter.ScreenChatAdapter -> com.sunkaisens.skdroid.b.s:
    java.lang.String TAG -> b
    java.util.List mEvents -> c
    android.view.LayoutInflater mInflater -> d
    android.os.Handler mHandler -> e
    com.sunkaisens.skdroid.Screens.ScreenChat mBaseScreen -> f
    android.media.MediaPlayer mplayer -> a
    int playingposition -> g
    int istransfer -> h
    android.graphics.drawable.AnimationDrawable animation -> i
    android.graphics.drawable.AnimationDrawable animation2 -> j
    com.sunkaisens.skdroid.adapter.ImageLoader mImageLoader -> k
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> l
    com.sunkaisens.skdroid.adapter.ImageLoader getImageLoader() -> a
    void finalize() -> finalize
    void refresh() -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void update(java.util.Observable,java.lang.Object) -> update
    java.util.List sortEvents(java.util.List) -> a
    boolean fileExists(java.lang.String) -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> d
    java.lang.String access$1() -> c
    com.sunkaisens.skdroid.Screens.ScreenChat access$2(com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> a
    void access$3(int) -> a
    void access$4(int) -> b
    android.graphics.drawable.AnimationDrawable access$5(com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> b
    void access$6$4d340705(com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> c
    android.graphics.drawable.AnimationDrawable access$7(com.sunkaisens.skdroid.adapter.ScreenChatAdapter) -> d
    void access$8(com.sunkaisens.skdroid.adapter.ScreenChatAdapter,android.graphics.drawable.AnimationDrawable) -> a
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$1 -> com.sunkaisens.skdroid.b.t:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$2 -> com.sunkaisens.skdroid.b.u:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter this$0 -> a
    android.widget.Button val$fileBtn -> b
    android.widget.ImageView val$screen_chat_picture_preView -> c
    android.widget.ProgressBar val$progressBar -> d
    void onClick(android.view.View) -> onClick
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$2$1 -> com.sunkaisens.skdroid.b.v:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter$2 this$1 -> a
    android.widget.ProgressBar val$progressBar -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$2$2 -> com.sunkaisens.skdroid.b.w:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter$2 this$1 -> a
    android.widget.ProgressBar val$progressBar -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3 -> com.sunkaisens.skdroid.b.x:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter this$0 -> a
    boolean val$bIncoming -> b
    android.widget.Button val$fileBtn -> c
    int val$playingpos -> d
    android.widget.ImageView val$screen_chat_picture_preView -> e
    org.doubango.ngn.model.NgnHistorySMSEvent val$hisSMSEvent -> f
    void onClick(android.view.View) -> onClick
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter access$0(com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3) -> a
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3$1 -> com.sunkaisens.skdroid.b.y:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3 this$1 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3$2 -> com.sunkaisens.skdroid.b.z:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter$3 this$1 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$4 -> com.sunkaisens.skdroid.b.aa:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter this$0 -> a
    android.widget.ProgressBar val$progressBar -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$5 -> com.sunkaisens.skdroid.b.ab:
    com.sunkaisens.skdroid.adapter.ScreenChatAdapter this$0 -> a
    android.widget.ProgressBar val$progressBar -> b
    void handleMessage(android.os.Message) -> handleMessage
com.sunkaisens.skdroid.adapter.ScreenChatAdapter$ViewHolder -> com.sunkaisens.skdroid.b.ac:
    android.widget.TextView screen_chat_item_textView_date -> a
    android.widget.ImageView screen_chat_item_iconleft -> b
    android.widget.TextView screen_chat_item_textView -> c
    android.widget.ProgressBar screen_chat_item_file_progress -> d
    android.widget.Button screen_chat_item_file_btn -> e
    android.widget.ImageView screen_chat_picture_preview -> f
    android.widget.TextView screen_chat_item_textView_status -> g
    android.widget.ImageView screen_chat_item_iconright -> h
    android.widget.TextView screen_chat_item_textView_sender -> i
    android.widget.RelativeLayout msg_body -> j
com.sunkaisens.skdroid.adapter.ScreenChatMapAdapter -> com.sunkaisens.skdroid.b.ad:
    java.lang.String TAG -> a
    java.util.List mEvents -> b
    android.view.LayoutInflater mInflater -> c
    android.os.Handler mHandler -> d
    android.content.Context mContext -> e
    org.doubango.ngn.services.INgnHistoryService mHistorytService -> f
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> g
    void finalize() -> finalize
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean isEnabled(int) -> isEnabled
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void update(java.util.Observable,java.lang.Object) -> update
    java.util.List sortEvents(java.util.List) -> a
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> a
com.sunkaisens.skdroid.adapter.ScreenChatMapAdapter$1 -> com.sunkaisens.skdroid.b.ae:
    com.sunkaisens.skdroid.adapter.ScreenChatMapAdapter this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.component.ClearEditText -> com.sunkaisens.skdroid.component.ClearEditText:
    android.graphics.drawable.Drawable mClearDrawable -> a
    android.graphics.drawable.Drawable mFindDrawable -> b
    boolean hasFoucs -> c
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onFocusChange(android.view.View,boolean) -> onFocusChange
    void setSearchIconVisible(boolean) -> b
    void setClearIconVisible(boolean) -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.sunkaisens.skdroid.component.NodeResource -> com.sunkaisens.skdroid.component.a:
    java.lang.String index -> a
    java.lang.String superIndex -> b
    java.lang.String name -> c
    java.lang.String uri -> d
    java.lang.String displayName -> e
    java.lang.String number -> f
    boolean isGroup -> g
    int iconId -> h
    java.lang.String userType -> i
    java.lang.String bussinessType -> j
    boolean hasCheckBox -> k
    java.lang.String getIndex() -> a
    java.lang.String getSuperIndex() -> b
    java.lang.String getName() -> c
    java.lang.String getUri() -> d
    java.lang.String getDisplayName() -> e
    java.lang.String getNumber() -> f
    boolean getIsGroup() -> g
    void setDisplayName(java.lang.String) -> a
    java.lang.String getBussinessType() -> h
    java.lang.String getUserType() -> i
com.sunkaisens.skdroid.cpim.CPIMMessage -> com.sunkaisens.skdroid.c.a:
    java.lang.String ns -> a
    java.lang.String msgType -> b
    java.lang.String msgReport -> c
    java.lang.String localMsgID -> d
    java.lang.String contentType -> e
    java.lang.String content -> f
    java.lang.String submitTime -> g
    java.lang.String reportID -> h
    java.lang.String reportType -> i
    void setNs(java.lang.String) -> a
    java.lang.String getMsgType() -> a
    void setMsgType(java.lang.String) -> b
    void setMsgReport(java.lang.String) -> c
    java.lang.String getLocalMsgID() -> b
    void setLocalMsgID(java.lang.String) -> d
    void setContentType(java.lang.String) -> e
    java.lang.Object getContent() -> c
    void setContent(java.lang.String) -> f
    java.lang.String getSubmitTime() -> d
    void setSubmitTime(java.lang.String) -> g
    java.lang.String getReportID() -> e
    void setReportID(java.lang.String) -> h
    java.lang.String getReportType() -> f
    void setReportType(java.lang.String) -> i
com.sunkaisens.skdroid.cpim.CPIMParser -> com.sunkaisens.skdroid.c.b:
    java.lang.String TAG -> a
    com.sunkaisens.skdroid.cpim.CPIMMessage parse(java.lang.String) -> a
com.sunkaisens.skdroid.crash.CrashHandler -> com.sunkaisens.skdroid.d.a:
    java.lang.Thread$UncaughtExceptionHandler mDefaultHandler -> a
    com.sunkaisens.skdroid.crash.CrashHandler INSTANCE -> b
    android.content.Context mContext -> c
    java.util.Map infos -> d
    java.text.DateFormat formatter -> e
    boolean mNetworkSign -> f
    com.sunkaisens.skdroid.crash.CrashHandler getInstance() -> a
    void init(android.content.Context) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    java.lang.String saveCrashInfo2File(java.lang.Throwable) -> a
    boolean isNetworkAvailable(android.content.Context) -> b
    boolean isNetworkAvailable() -> b
    boolean isCdmaNetwork() -> c
    boolean isNetworkAvailable2() -> d
    android.content.Context access$0(com.sunkaisens.skdroid.crash.CrashHandler) -> a
    void access$1$1385ff() -> e
com.sunkaisens.skdroid.crash.CrashHandler$1 -> com.sunkaisens.skdroid.d.b:
    com.sunkaisens.skdroid.crash.CrashHandler this$0 -> a
    void run() -> run
com.sunkaisens.skdroid.crash.CrashHandler$2 -> com.sunkaisens.skdroid.d.c:
    java.lang.Process val$process -> a
    void run() -> run
com.sunkaisens.skdroid.encryptcall.CcUssdRspMsg -> com.sunkaisens.skdroid.e.a:
    java.nio.ByteBuffer encodeEncryptRequest(byte) -> a
    java.nio.ByteBuffer encodeEncryptSuccess(byte) -> b
com.sunkaisens.skdroid.encryptcall.EncryptProcess -> com.sunkaisens.skdroid.e.b:
    java.lang.String TAG -> a
    java.lang.String encryptState -> b
    boolean isCaller -> c
    java.nio.ByteBuffer process(byte[]) -> a
    java.lang.String getEncryptState() -> a
    boolean isCaller() -> b
com.sunkaisens.skdroid.groupcall.GroupPTTCall -> com.sunkaisens.skdroid.f.a:
    java.lang.String TAG -> a
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState mState -> b
    boolean mStateChanged -> c
    boolean mFirstOnline -> d
    boolean mIsSubscribe -> e
    java.lang.String mCurrentSubscribeName -> f
    java.lang.String getCurrentSubscribeName() -> a
    void setCurrentSubscribeName(java.lang.String) -> a
    void handlePTTInfoMsg(com.sunkaisens.skdroid.groupcall.PTTInfoMsg) -> a
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState getState() -> b
    void setState(com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState) -> a
    boolean isStateChanged() -> c
    boolean isFirstOnline() -> d
    boolean isSubscribe() -> e
    void setIsSubscribe(boolean) -> a
com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState -> com.sunkaisens.skdroid.f.b:
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState NONE -> a
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState REQUESTING -> b
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState GRANTED -> c
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState REGECTED -> d
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState RELEASED -> e
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState RELEASE_SUCCESS -> f
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState VIDEOSUB_TURNON -> g
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState VIDEOSUB_TURNOFF -> h
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState CALSUB -> i
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState ALAVE -> j
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState ONLINE -> k
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState SUBSCRIBE_SUCCESS -> l
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState SUBSCRIBE_FAILED -> m
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState CANCEL_SUCCESS -> n
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState CANCEL_FAILED -> o
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState CONTROL -> p
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState GET_AUDIO -> q
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState[] ENUM$VALUES -> r
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState[] values() -> values
    com.sunkaisens.skdroid.groupcall.GroupPTTCall$PTTState valueOf(java.lang.String) -> valueOf
com.sunkaisens.skdroid.groupcall.PTTInfoMsg -> com.sunkaisens.skdroid.f.c:
    java.lang.String mPTTType -> a
    java.lang.String mPTTPhoneNumber -> b
    java.lang.String mPTTIncludeNumber -> c
    java.lang.String mPTTVideoIP -> d
    java.lang.String mPTTVideoPort -> e
    java.lang.String mPTTAction -> f
    java.lang.String mPTTResult -> g
    int mPTTType2 -> h
    int mPTTAction2 -> i
    int mPTTResult2 -> j
    java.lang.String toString() -> toString
    int getmPTTType2() -> a
    int getmPTTAction2() -> b
    int getmPTTResult2() -> c
    java.lang.String getPTTType() -> d
    java.lang.String getPTTPhoneNumber() -> e
    void setPTTPhoneNumber(java.lang.String) -> a
    java.lang.String getPTTIncludeNumber() -> f
    java.lang.String getPTTAction() -> g
    void setPTTAction(java.lang.String) -> b
    java.lang.String getPTTResult() -> h
    void setPTTResult(java.lang.String) -> c
com.sunkaisens.skdroid.model.FeedbackBody -> com.sunkaisens.skdroid.g.a:
    java.lang.String content -> a
    java.lang.String phone_num -> b
    java.lang.String user -> c
    java.lang.String toJasonString() -> a
com.sunkaisens.skdroid.model.ModelCall -> com.sunkaisens.skdroid.g.b:
    java.lang.String name -> a
    java.lang.String mobileNo -> b
    org.doubango.ngn.media.NgnMediaType mediatype -> c
    long starttime -> d
    long endtime -> e
    org.doubango.ngn.model.NgnHistoryEvent$StatusType status -> f
    int sessionType -> g
com.sunkaisens.skdroid.model.ModelContact -> com.sunkaisens.skdroid.g.c:
    java.lang.String name -> a
    java.lang.String mobileNo -> b
    int imageid -> c
    java.lang.String state -> d
    int sex -> e
    boolean isgroup -> f
    java.lang.String title -> g
    java.lang.String brief -> h
    java.lang.String org -> i
    java.lang.String index -> j
    java.lang.String uri -> k
    java.lang.String parent -> l
    boolean isOnline -> m
    java.lang.String businessType -> n
    java.lang.String userType -> o
    java.lang.String toString() -> toString
    void addBusinessGroupMember(java.lang.String) -> a
    void addNormalGroupMember(java.lang.String,java.lang.String) -> a
    void replaceNormalGroupMember(java.lang.String) -> b
    void replaceBusinessGroupMember(java.lang.String) -> c
com.sunkaisens.skdroid.model.ModelPush -> com.sunkaisens.skdroid.g.d:
    java.lang.String serviceType -> a
    java.lang.String msgType -> b
    java.lang.String id -> c
    java.lang.String title -> d
    java.lang.String digest -> e
    java.lang.String content -> f
    java.lang.String imageUrl -> g
    java.lang.String linkUri -> h
    java.lang.String turn -> i
com.sunkaisens.skdroid.update.ChkVer -> com.sunkaisens.skdroid.h.a:
    java.lang.String UPDATE_URL -> a
    java.lang.String getVerName(android.content.Context) -> a
com.sunkaisens.skdroid.update.SKDroidUpdate -> com.sunkaisens.skdroid.h.b:
    java.lang.String TAG -> c
    int newVerCode -> a
    android.app.ProgressDialog bar -> b
    void doNewVersionUpdate(java.lang.String) -> a
    void downFile(java.lang.String) -> b
    void update() -> a
    void notNewVersionShow() -> b
    org.json.JSONObject getPost(java.lang.String) -> c
com.sunkaisens.skdroid.update.SKDroidUpdate$1 -> com.sunkaisens.skdroid.h.c:
    com.sunkaisens.skdroid.update.SKDroidUpdate this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.update.SKDroidUpdate$2 -> com.sunkaisens.skdroid.h.d:
    com.sunkaisens.skdroid.update.SKDroidUpdate this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.update.SKDroidUpdate$3 -> com.sunkaisens.skdroid.h.e:
    java.lang.String val$url -> a
    void run() -> run
com.sunkaisens.skdroid.update.SKDroidUpdate$4 -> com.sunkaisens.skdroid.h.f:
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.update.SKDroidUpdate$5 -> com.sunkaisens.skdroid.h.g:
    com.sunkaisens.skdroid.update.SKDroidUpdate this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.sunkaisens.skdroid.util.GlobalSession -> com.sunkaisens.skdroid.i.a:
    org.doubango.ngn.sip.NgnAVSession avSession -> a
    boolean bSocketService -> b
    boolean isSocketServicePath -> c
com.sunkaisens.skdroid.util.GlobalVar -> com.sunkaisens.skdroid.i.b:
    boolean bADHocMode -> a
    java.lang.String displayname -> b
    java.lang.String account -> c
    boolean bBackOrSwitch -> d
    boolean isVideoDisp -> e
    boolean isLandscap -> f
    boolean mSendVideo -> g
    boolean mLogout -> h
    java.lang.String mLocalNum -> i
    java.lang.String videoMonitorPrefix -> j
    boolean mCameraIsUsed -> k
    int mMyPid -> l
    java.lang.String pcscfIp -> m
com.sunkaisens.skdroid.util.HexDump -> com.sunkaisens.skdroid.i.c:
    java.lang.String EOL -> a
    char[] _hexcodes -> b
    int[] _shifts -> c
    java.lang.StringBuffer dump(java.lang.StringBuffer,long) -> a
    java.lang.StringBuffer dump(java.lang.StringBuffer,byte) -> a
    java.lang.String dump$623c9545(byte[]) -> a
org.doubango.ngn.NgnApplication -> org.doubango.ngn.NgnApplication:
    java.lang.String TAG -> TAG
    org.doubango.ngn.NgnApplication sInstance -> sInstance
    android.content.pm.PackageManager sPackageManager -> sPackageManager
    java.lang.String sPackageName -> sPackageName
    java.lang.String sDeviceURN -> sDeviceURN
    java.lang.String sDeviceIMEI -> sDeviceIMEI
    int sSdkVersion -> sSdkVersion
    int sVersionCode -> sVersionCode
    android.media.AudioManager sAudioManager -> sAudioManager
    android.hardware.SensorManager sSensorManager -> sSensorManager
    android.app.KeyguardManager sKeyguardManager -> sKeyguardManager
    android.net.ConnectivityManager sConnectivityManager -> sConnectivityManager
    android.os.PowerManager sPowerManager -> sPowerManager
    android.os.PowerManager$WakeLock sPowerManagerLock -> sPowerManagerLock
    int sGlEsVersion -> sGlEsVersion
    java.lang.String sBuildModel -> sBuildModel
    java.lang.String[] sSLEs2FriendlyBuildModels -> sSLEs2FriendlyBuildModels
    java.lang.String[] sSLEs2UnFriendlyBuildModels -> sSLEs2UnFriendlyBuildModels
    java.lang.String[] sSetModeFriendlyBuildModels -> sSetModeFriendlyBuildModels
    org.doubango.ngn.NgnApplication getInstance() -> getInstance
    android.content.Context getContext() -> getContext
    void onCreate() -> onCreate
    int getSDKVersion() -> getSDKVersion
    boolean useSetModeToHackSpeaker() -> useSetModeToHackSpeaker
    boolean isARMv7WithoutNeon() -> isARMv7WithoutNeon
    boolean isCpuARMv7() -> isCpuARMv7
    boolean isCpuNeon() -> isCpuNeon
    boolean isSamsungGalaxyMini() -> isSamsungGalaxyMini
    boolean isSamsung() -> isSamsung
    boolean isHTC() -> isHTC
    boolean isZTE() -> isZTE
    boolean isLG() -> isLG
    boolean isToshiba() -> isToshiba
    boolean isHuawei() -> isHuawei
    boolean isAudioRecreateRequired() -> isAudioRecreateRequired
    boolean isSetModeAllowed() -> isSetModeAllowed
    boolean isBuggyProximitySensor() -> isBuggyProximitySensor
    boolean isAGCSupported() -> isAGCSupported
    boolean isBh() -> isBh
    boolean isBh03() -> isBh03
    boolean isBh04() -> isBh04
    boolean isLc1810() -> isLc1810
    boolean isHxSabresd() -> isHxSabresd
    int getVersionCode() -> getVersionCode
    java.lang.String getVersionName() -> getVersionName
    java.lang.String getDeviceURN() -> getDeviceURN
    java.lang.String getDeviceIMEI() -> getDeviceIMEI
    android.media.AudioManager getAudioManager() -> getAudioManager
    android.hardware.SensorManager getSensorManager() -> getSensorManager
    android.app.KeyguardManager getKeyguardManager() -> getKeyguardManager
    android.net.ConnectivityManager getConnectivityManager() -> getConnectivityManager
    android.os.PowerManager getPowerManager() -> getPowerManager
    android.view.Display getDefaultDisplay() -> getDefaultDisplay
    java.lang.String getABI() -> getABI
    int getGlEsVersion() -> getGlEsVersion
    boolean isGlEs2Supported() -> isGlEs2Supported
    boolean isSLEs2Supported() -> isSLEs2Supported
    boolean isSLEs2KnownToWork() -> isSLEs2KnownToWork
    boolean acquirePowerLock() -> acquirePowerLock
    boolean releasePowerLock() -> releasePowerLock
org.doubango.ngn.NgnEngine -> org.doubango.ngn.NgnEngine:
    java.lang.String TAG -> TAG
    org.doubango.ngn.NgnEngine sInstance -> sInstance
    boolean sInitialized -> sInitialized
    java.lang.String DATA_FOLDER -> DATA_FOLDER
    java.lang.String LIBS_FOLDER -> LIBS_FOLDER
    boolean mStarted -> mStarted
    android.app.Activity mMainActivity -> mMainActivity
    android.app.NotificationManager mNotifManager -> mNotifManager
    android.os.Vibrator mVibrator -> mVibrator
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    org.doubango.ngn.services.INgnStorageService mStorageService -> mStorageService
    org.doubango.ngn.services.INgnNetworkService mNetworkService -> mNetworkService
    org.doubango.ngn.services.INgnHttpClientService mHttpClientService -> mHttpClientService
    org.doubango.ngn.services.INgnContactService mContactService -> mContactService
    org.doubango.ngn.services.INgnHistoryService mHistoryService -> mHistoryService
    org.doubango.ngn.services.INgnSipService mSipService -> mSipService
    org.doubango.ngn.services.INgnSoundService mSoundService -> mSoundService
    android.media.AudioManager mAudioManager -> mAudioManager
    void initialize2() -> initialize2
    void initialize() -> initialize
    org.doubango.ngn.NgnEngine getInstance() -> getInstance
    android.media.AudioManager getAudioManager() -> getAudioManager
    boolean start() -> start
    boolean stop() -> stop
    boolean isStarted() -> isStarted
    void setMainActivity(android.app.Activity) -> setMainActivity
    android.app.Activity getMainActivity() -> getMainActivity
    org.doubango.ngn.services.INgnConfigurationService getConfigurationService() -> getConfigurationService
    org.doubango.ngn.services.INgnStorageService getStorageService() -> getStorageService
    org.doubango.ngn.services.INgnNetworkService getNetworkService() -> getNetworkService
    org.doubango.ngn.services.INgnHttpClientService getHttpClientService() -> getHttpClientService
    org.doubango.ngn.services.INgnContactService getContactService() -> getContactService
    org.doubango.ngn.services.INgnHistoryService getHistoryService() -> getHistoryService
    org.doubango.ngn.services.INgnSipService getSipService() -> getSipService
    org.doubango.ngn.services.INgnSoundService getSoundService() -> getSoundService
    java.lang.Class getNativeServiceClass() -> getNativeServiceClass
org.doubango.ngn.NgnNativeService -> org.doubango.ngn.NgnNativeService:
    java.lang.String TAG -> TAG
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean onUnbind(android.content.Intent) -> onUnbind
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    void onDestroy() -> onDestroy
org.doubango.ngn.R -> org.doubango.ngn.R:
org.doubango.ngn.R$drawable -> org.doubango.ngn.R$drawable:
    int icon -> icon
org.doubango.ngn.R$string -> org.doubango.ngn.R$string:
    int app_name -> app_name
    int doubango_revision -> doubango_revision
org.doubango.ngn.events.NgnEventArgs -> org.doubango.ngn.events.NgnEventArgs:
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    void readFromParcel(android.os.Parcel) -> readFromParcel
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnInfoEventArgs -> org.doubango.ngn.events.NgnInfoEventArgs:
    java.lang.String TAG -> TAG
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnInfoEventTypes mEventType -> mEventType
    java.lang.String mPhrase -> mPhrase
    java.lang.String ACTION_INFO_EVENT -> ACTION_INFO_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    java.lang.String EXTRA_SESSION -> EXTRA_SESSION
    java.lang.String EXTRA_SIPCODE -> EXTRA_SIPCODE
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getmSessionId() -> getmSessionId
    void setmSessionId(long) -> setmSessionId
    org.doubango.ngn.events.NgnInfoEventTypes getmEventType() -> getmEventType
    void setmEventType(org.doubango.ngn.events.NgnInfoEventTypes) -> setmEventType
    java.lang.String getmPhrase() -> getmPhrase
    void setmPhrase(java.lang.String) -> setmPhrase
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnInfoEventArgs$1 -> org.doubango.ngn.events.NgnInfoEventArgs$1:
    org.doubango.ngn.events.NgnInfoEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnInfoEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnInfoEventTypes -> org.doubango.ngn.events.NgnInfoEventTypes:
    org.doubango.ngn.events.NgnInfoEventTypes SEND -> SEND
    org.doubango.ngn.events.NgnInfoEventTypes RECEIVE -> RECEIVE
    org.doubango.ngn.events.NgnInfoEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnInfoEventTypes[] values() -> values
    org.doubango.ngn.events.NgnInfoEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnInviteEventArgs -> org.doubango.ngn.events.NgnInviteEventArgs:
    java.lang.String TAG -> TAG
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnInviteEventTypes mEventType -> mEventType
    org.doubango.ngn.media.NgnMediaType mMediaType -> mMediaType
    java.lang.String mPhrase -> mPhrase
    byte[] mInfoContent -> mInfoContent
    boolean m180HasSdp -> m180HasSdp
    long mCSeq -> mCSeq
    java.lang.String ACTION_INVITE_EVENT -> ACTION_INVITE_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    java.lang.String EXTRA_SESSION -> EXTRA_SESSION
    java.lang.String EXTRA_SIPCODE -> EXTRA_SIPCODE
    java.lang.String EXTRA_REFERTO_URI -> EXTRA_REFERTO_URI
    java.lang.String EXTRA_CSEQ -> EXTRA_CSEQ
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnInviteEventTypes getEventType() -> getEventType
    org.doubango.ngn.media.NgnMediaType getMediaType() -> getMediaType
    java.lang.String getPhrase() -> getPhrase
    byte[] getmInfoContent() -> getmInfoContent
    void setmInfoContent(byte[]) -> setmInfoContent
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    long getmCSeq() -> getmCSeq
    void setmCSeq(long) -> setmCSeq
org.doubango.ngn.events.NgnInviteEventArgs$1 -> org.doubango.ngn.events.NgnInviteEventArgs$1:
    org.doubango.ngn.events.NgnInviteEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnInviteEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnInviteEventTypes -> org.doubango.ngn.events.NgnInviteEventTypes:
    org.doubango.ngn.events.NgnInviteEventTypes INCOMING -> INCOMING
    org.doubango.ngn.events.NgnInviteEventTypes INPROGRESS -> INPROGRESS
    org.doubango.ngn.events.NgnInviteEventTypes RINGING -> RINGING
    org.doubango.ngn.events.NgnInviteEventTypes EARLY_MEDIA -> EARLY_MEDIA
    org.doubango.ngn.events.NgnInviteEventTypes CONNECTED -> CONNECTED
    org.doubango.ngn.events.NgnInviteEventTypes TERMWAIT -> TERMWAIT
    org.doubango.ngn.events.NgnInviteEventTypes TERMINATED -> TERMINATED
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_HOLD_OK -> LOCAL_HOLD_OK
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_HOLD_NOK -> LOCAL_HOLD_NOK
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_RESUME_OK -> LOCAL_RESUME_OK
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_RESUME_NOK -> LOCAL_RESUME_NOK
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_HOLD -> REMOTE_HOLD
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_RESUME -> REMOTE_RESUME
    org.doubango.ngn.events.NgnInviteEventTypes MEDIA_UPDATING -> MEDIA_UPDATING
    org.doubango.ngn.events.NgnInviteEventTypes MEDIA_UPDATED -> MEDIA_UPDATED
    org.doubango.ngn.events.NgnInviteEventTypes SIP_RESPONSE -> SIP_RESPONSE
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_DEVICE_INFO_CHANGED -> REMOTE_DEVICE_INFO_CHANGED
    org.doubango.ngn.events.NgnInviteEventTypes GROUP_PTT_INFO -> GROUP_PTT_INFO
    org.doubango.ngn.events.NgnInviteEventTypes PTT_INFO_REQUEST -> PTT_INFO_REQUEST
    org.doubango.ngn.events.NgnInviteEventTypes ENCRYPT_INFO -> ENCRYPT_INFO
    org.doubango.ngn.events.NgnInviteEventTypes GROUP_VIDEO_MONITORING -> GROUP_VIDEO_MONITORING
    org.doubango.ngn.events.NgnInviteEventTypes VIEDO_TRANSMINT -> VIEDO_TRANSMINT
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_REFUSE -> REMOTE_REFUSE
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_TRANSFER_TRYING -> LOCAL_TRANSFER_TRYING
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_TRANSFER_ACCEPTED -> LOCAL_TRANSFER_ACCEPTED
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_TRANSFER_COMPLETED -> LOCAL_TRANSFER_COMPLETED
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_TRANSFER_FAILED -> LOCAL_TRANSFER_FAILED
    org.doubango.ngn.events.NgnInviteEventTypes LOCAL_TRANSFER_NOTIFY -> LOCAL_TRANSFER_NOTIFY
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_TRANSFER_REQUESTED -> REMOTE_TRANSFER_REQUESTED
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_TRANSFER_NOTIFY -> REMOTE_TRANSFER_NOTIFY
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_TRANSFER_INPROGESS -> REMOTE_TRANSFER_INPROGESS
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_TRANSFER_FAILED -> REMOTE_TRANSFER_FAILED
    org.doubango.ngn.events.NgnInviteEventTypes REMOTE_TRANSFER_COMPLETED -> REMOTE_TRANSFER_COMPLETED
    org.doubango.ngn.events.NgnInviteEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnInviteEventTypes[] values() -> values
    org.doubango.ngn.events.NgnInviteEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnMediaPluginEventArgs -> org.doubango.ngn.events.NgnMediaPluginEventArgs:
    java.lang.String TAG -> TAG
    java.math.BigInteger mPluginId -> mPluginId
    org.doubango.ngn.media.NgnMediaType mMediaType -> mMediaType
    org.doubango.ngn.events.NgnMediaPluginEventTypes mEventType -> mEventType
    java.lang.String ACTION_MEDIA_PLUGIN_EVENT -> ACTION_MEDIA_PLUGIN_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.math.BigInteger getPluginId() -> getPluginId
    org.doubango.ngn.media.NgnMediaType getMediaType() -> getMediaType
    org.doubango.ngn.events.NgnMediaPluginEventTypes getEventType() -> getEventType
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void broadcastEvent(org.doubango.ngn.events.NgnMediaPluginEventArgs) -> broadcastEvent
org.doubango.ngn.events.NgnMediaPluginEventArgs$1 -> org.doubango.ngn.events.NgnMediaPluginEventArgs$1:
    org.doubango.ngn.events.NgnMediaPluginEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnMediaPluginEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnMediaPluginEventTypes -> org.doubango.ngn.events.NgnMediaPluginEventTypes:
    org.doubango.ngn.events.NgnMediaPluginEventTypes PREPARED_OK -> PREPARED_OK
    org.doubango.ngn.events.NgnMediaPluginEventTypes PREPARED_NOK -> PREPARED_NOK
    org.doubango.ngn.events.NgnMediaPluginEventTypes STARTED_OK -> STARTED_OK
    org.doubango.ngn.events.NgnMediaPluginEventTypes STARTED_NOK -> STARTED_NOK
    org.doubango.ngn.events.NgnMediaPluginEventTypes STOPPED_OK -> STOPPED_OK
    org.doubango.ngn.events.NgnMediaPluginEventTypes STOPPED_NOK -> STOPPED_NOK
    org.doubango.ngn.events.NgnMediaPluginEventTypes PAUSED_OK -> PAUSED_OK
    org.doubango.ngn.events.NgnMediaPluginEventTypes PAUSED_NOK -> PAUSED_NOK
    org.doubango.ngn.events.NgnMediaPluginEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnMediaPluginEventTypes[] values() -> values
    org.doubango.ngn.events.NgnMediaPluginEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnMessagingEventArgs -> org.doubango.ngn.events.NgnMessagingEventArgs:
    java.lang.String TAG -> TAG
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnMessagingEventTypes mEventType -> mEventType
    java.lang.String mPhrase -> mPhrase
    byte[] mPayload -> mPayload
    java.lang.String mContentType -> mContentType
    java.lang.String mBranchID -> mBranchID
    java.lang.String mTo -> mTo
    java.lang.String ACTION_MESSAGING_EVENT -> ACTION_MESSAGING_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    java.lang.String EXTRA_SESSION -> EXTRA_SESSION
    java.lang.String EXTRA_CODE -> EXTRA_CODE
    java.lang.String EXTRA_REMOTE_PARTY -> EXTRA_REMOTE_PARTY
    java.lang.String EXTRA_DATE -> EXTRA_DATE
    java.lang.String EXTRA_T140_DATA_TYPE -> EXTRA_T140_DATA_TYPE
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getmTo() -> getmTo
    void setmTo(java.lang.String) -> setmTo
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnMessagingEventTypes getEventType() -> getEventType
    java.lang.String getPhrase() -> getPhrase
    byte[] getPayload() -> getPayload
    java.lang.String getContentType() -> getContentType
    java.lang.String getmBranchID() -> getmBranchID
    void setmBranchID(java.lang.String) -> setmBranchID
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnMessagingEventArgs$1 -> org.doubango.ngn.events.NgnMessagingEventArgs$1:
    org.doubango.ngn.events.NgnMessagingEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnMessagingEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnMessagingEventTypes -> org.doubango.ngn.events.NgnMessagingEventTypes:
    org.doubango.ngn.events.NgnMessagingEventTypes INCOMING -> INCOMING
    org.doubango.ngn.events.NgnMessagingEventTypes OUTGOING -> OUTGOING
    org.doubango.ngn.events.NgnMessagingEventTypes SUCCESS -> SUCCESS
    org.doubango.ngn.events.NgnMessagingEventTypes FAILURE -> FAILURE
    org.doubango.ngn.events.NgnMessagingEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnMessagingEventTypes[] values() -> values
    org.doubango.ngn.events.NgnMessagingEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnMsrpEventArgs -> org.doubango.ngn.events.NgnMsrpEventArgs:
    java.lang.String TAG -> TAG
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnMsrpEventTypes mEventType -> mEventType
    java.lang.String ACTION_MSRP_EVENT -> ACTION_MSRP_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    java.lang.String EXTRA_DATA -> EXTRA_DATA
    java.lang.String EXTRA_CONTENT_TYPE -> EXTRA_CONTENT_TYPE
    java.lang.String EXTRA_WRAPPED_CONTENT_TYPE -> EXTRA_WRAPPED_CONTENT_TYPE
    java.lang.String EXTRA_BYTE_RANGE_START -> EXTRA_BYTE_RANGE_START
    java.lang.String EXTRA_BYTE_RANGE_END -> EXTRA_BYTE_RANGE_END
    java.lang.String EXTRA_BYTE_RANGE_TOTAL -> EXTRA_BYTE_RANGE_TOTAL
    java.lang.String EXTRA_RESPONSE_CODE -> EXTRA_RESPONSE_CODE
    java.lang.String EXTRA_REQUEST_TYPE -> EXTRA_REQUEST_TYPE
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnMsrpEventTypes getEventType() -> getEventType
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnMsrpEventArgs$1 -> org.doubango.ngn.events.NgnMsrpEventArgs$1:
    org.doubango.ngn.events.NgnMsrpEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnMsrpEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnMsrpEventTypes -> org.doubango.ngn.events.NgnMsrpEventTypes:
    org.doubango.ngn.events.NgnMsrpEventTypes CONNECTED -> CONNECTED
    org.doubango.ngn.events.NgnMsrpEventTypes SUCCESS_2XX -> SUCCESS_2XX
    org.doubango.ngn.events.NgnMsrpEventTypes SUCCESS_REPORT -> SUCCESS_REPORT
    org.doubango.ngn.events.NgnMsrpEventTypes DATA -> DATA
    org.doubango.ngn.events.NgnMsrpEventTypes ERROR -> ERROR
    org.doubango.ngn.events.NgnMsrpEventTypes DISCONNECTED -> DISCONNECTED
    org.doubango.ngn.events.NgnMsrpEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnMsrpEventTypes[] values() -> values
    org.doubango.ngn.events.NgnMsrpEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnPublicationEventArgs -> org.doubango.ngn.events.NgnPublicationEventArgs:
    java.lang.String TAG -> TAG
    java.lang.String ACTION_PUBLICATION_EVENT -> ACTION_PUBLICATION_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnPublicationEventTypes mType -> mType
    short mSipCode -> mSipCode
    java.lang.String mPhrase -> mPhrase
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnPublicationEventTypes getEventType() -> getEventType
    short getSipCode() -> getSipCode
    java.lang.String getPhrase() -> getPhrase
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnPublicationEventArgs$1 -> org.doubango.ngn.events.NgnPublicationEventArgs$1:
    org.doubango.ngn.events.NgnPublicationEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnPublicationEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnPublicationEventTypes -> org.doubango.ngn.events.NgnPublicationEventTypes:
    org.doubango.ngn.events.NgnPublicationEventTypes PUBLICATION_OK -> PUBLICATION_OK
    org.doubango.ngn.events.NgnPublicationEventTypes PUBLICATION_NOK -> PUBLICATION_NOK
    org.doubango.ngn.events.NgnPublicationEventTypes PUBLICATION_INPROGRESS -> PUBLICATION_INPROGRESS
    org.doubango.ngn.events.NgnPublicationEventTypes UNPUBLICATION_OK -> UNPUBLICATION_OK
    org.doubango.ngn.events.NgnPublicationEventTypes UNPUBLICATION_NOK -> UNPUBLICATION_NOK
    org.doubango.ngn.events.NgnPublicationEventTypes UNPUBLICATION_INPROGRESS -> UNPUBLICATION_INPROGRESS
    org.doubango.ngn.events.NgnPublicationEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnPublicationEventTypes[] values() -> values
    org.doubango.ngn.events.NgnPublicationEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnRegistrationEventArgs -> org.doubango.ngn.events.NgnRegistrationEventArgs:
    java.lang.String TAG -> TAG
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnRegistrationEventTypes mType -> mType
    short mSipCode -> mSipCode
    java.lang.String mPhrase -> mPhrase
    java.lang.String ACTION_REGISTRATION_EVENT -> ACTION_REGISTRATION_EVENT
    java.lang.String ACTION_REFRESHREGISTRATION_EVENT -> ACTION_REFRESHREGISTRATION_EVENT
    java.lang.String REFRESHREGISTRATION -> REFRESHREGISTRATION
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnRegistrationEventTypes getEventType() -> getEventType
    short getSipCode() -> getSipCode
    java.lang.String getPhrase() -> getPhrase
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnRegistrationEventArgs$1 -> org.doubango.ngn.events.NgnRegistrationEventArgs$1:
    org.doubango.ngn.events.NgnRegistrationEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnRegistrationEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnRegistrationEventTypes -> org.doubango.ngn.events.NgnRegistrationEventTypes:
    org.doubango.ngn.events.NgnRegistrationEventTypes REGISTRATION_OK -> REGISTRATION_OK
    org.doubango.ngn.events.NgnRegistrationEventTypes REGISTRATION_NOK -> REGISTRATION_NOK
    org.doubango.ngn.events.NgnRegistrationEventTypes REGISTRATION_INPROGRESS -> REGISTRATION_INPROGRESS
    org.doubango.ngn.events.NgnRegistrationEventTypes UNREGISTRATION_OK -> UNREGISTRATION_OK
    org.doubango.ngn.events.NgnRegistrationEventTypes UNREGISTRATION_NOK -> UNREGISTRATION_NOK
    org.doubango.ngn.events.NgnRegistrationEventTypes UNREGISTRATION_INPROGRESS -> UNREGISTRATION_INPROGRESS
    org.doubango.ngn.events.NgnRegistrationEventTypes REFRESHREGISTRATION_NOK -> REFRESHREGISTRATION_NOK
    org.doubango.ngn.events.NgnRegistrationEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnRegistrationEventTypes[] values() -> values
    org.doubango.ngn.events.NgnRegistrationEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnStackEventArgs -> org.doubango.ngn.events.NgnStackEventArgs:
    java.lang.String TAG -> TAG
    org.doubango.ngn.events.NgnStackEventTypes mType -> mType
    java.lang.String mPhrase -> mPhrase
    java.lang.String ACTION_STACK_EVENT -> ACTION_STACK_EVENT
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    org.doubango.ngn.events.NgnStackEventTypes getEventType() -> getEventType
    java.lang.String getPhrase() -> getPhrase
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnStackEventTypes -> org.doubango.ngn.events.NgnStackEventTypes:
    org.doubango.ngn.events.NgnStackEventTypes START_OK -> START_OK
    org.doubango.ngn.events.NgnStackEventTypes START_NOK -> START_NOK
    org.doubango.ngn.events.NgnStackEventTypes STOP_OK -> STOP_OK
    org.doubango.ngn.events.NgnStackEventTypes STOP_NOK -> STOP_NOK
    org.doubango.ngn.events.NgnStackEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnStackEventTypes[] values() -> values
    org.doubango.ngn.events.NgnStackEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.events.NgnStringEventArgs -> org.doubango.ngn.events.NgnStringEventArgs:
    java.lang.String mValue -> mValue
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
org.doubango.ngn.events.NgnStringEventArgs$1 -> org.doubango.ngn.events.NgnStringEventArgs$1:
    org.doubango.ngn.events.NgnStringEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnStringEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnSubscriptionEventArgs -> org.doubango.ngn.events.NgnSubscriptionEventArgs:
    java.lang.String TAG -> TAG
    java.lang.String ACTION_SUBSCRIBTION_EVENT -> ACTION_SUBSCRIBTION_EVENT
    long mSessionId -> mSessionId
    org.doubango.ngn.events.NgnSubscriptionEventTypes mType -> mType
    short mSipCode -> mSipCode
    java.lang.String mPhrase -> mPhrase
    byte[] mContent -> mContent
    java.lang.String mContentType -> mContentType
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType mEventPackage -> mEventPackage
    java.lang.String mFrom -> mFrom
    java.lang.String mState -> mState
    java.lang.String EXTRA_EMBEDDED -> EXTRA_EMBEDDED
    java.lang.String EXTRA_CONTENTYPE_TYPE -> EXTRA_CONTENTYPE_TYPE
    java.lang.String EXTRA_CONTENTYPE_START -> EXTRA_CONTENTYPE_START
    java.lang.String EXTRA_CONTENTYPE_BOUNDARY -> EXTRA_CONTENTYPE_BOUNDARY
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long getSessionId() -> getSessionId
    org.doubango.ngn.events.NgnSubscriptionEventTypes getEventType() -> getEventType
    java.lang.String getPhrase() -> getPhrase
    byte[] getContent() -> getContent
    java.lang.String getContentType() -> getContentType
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType getEventPackage() -> getEventPackage
    java.lang.String getmFrom() -> getmFrom
    java.lang.String getmState() -> getmState
    void readFromParcel(android.os.Parcel) -> readFromParcel
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void setState(java.lang.String,java.lang.String) -> setState
org.doubango.ngn.events.NgnSubscriptionEventArgs$1 -> org.doubango.ngn.events.NgnSubscriptionEventArgs$1:
    org.doubango.ngn.events.NgnSubscriptionEventArgs createFromParcel(android.os.Parcel) -> createFromParcel
    org.doubango.ngn.events.NgnSubscriptionEventArgs[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.doubango.ngn.events.NgnSubscriptionEventTypes -> org.doubango.ngn.events.NgnSubscriptionEventTypes:
    org.doubango.ngn.events.NgnSubscriptionEventTypes SUBSCRIPTION_OK -> SUBSCRIPTION_OK
    org.doubango.ngn.events.NgnSubscriptionEventTypes SUBSCRIPTION_NOK -> SUBSCRIPTION_NOK
    org.doubango.ngn.events.NgnSubscriptionEventTypes SUBSCRIPTION_INPROGRESS -> SUBSCRIPTION_INPROGRESS
    org.doubango.ngn.events.NgnSubscriptionEventTypes UNSUBSCRIPTION_OK -> UNSUBSCRIPTION_OK
    org.doubango.ngn.events.NgnSubscriptionEventTypes UNSUBSCRIPTION_NOK -> UNSUBSCRIPTION_NOK
    org.doubango.ngn.events.NgnSubscriptionEventTypes UNSUBSCRIPTION_INPROGRESS -> UNSUBSCRIPTION_INPROGRESS
    org.doubango.ngn.events.NgnSubscriptionEventTypes INCOMING_NOTIFY -> INCOMING_NOTIFY
    org.doubango.ngn.events.NgnSubscriptionEventTypes[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.events.NgnSubscriptionEventTypes[] values() -> values
    org.doubango.ngn.events.NgnSubscriptionEventTypes valueOf(java.lang.String) -> valueOf
org.doubango.ngn.media.NgnCameraProducer -> org.doubango.ngn.media.NgnCameraProducer:
    java.lang.String TAG -> TAG
    android.hardware.Camera instance -> instance
    boolean useFrontFacingCamera -> useFrontFacingCamera
    int fps -> fps
    int width -> width
    int height -> height
    android.graphics.SurfaceTexture holder -> holder
    android.hardware.Camera$PreviewCallback callback -> callback
    int MIN_SDKVERSION_addCallbackBuffer -> MIN_SDKVERSION_addCallbackBuffer
    int MIN_SDKVERSION_setPreviewCallbackWithBuffer -> MIN_SDKVERSION_setPreviewCallbackWithBuffer
    int MIN_SDKVERSION_setDisplayOrientation -> MIN_SDKVERSION_setDisplayOrientation
    java.lang.reflect.Method addCallbackBufferMethod -> addCallbackBufferMethod
    java.lang.reflect.Method setDisplayOrientationMethod -> setDisplayOrientationMethod
    java.lang.reflect.Method setPreviewCallbackWithBufferMethod -> setPreviewCallbackWithBufferMethod
    android.hardware.Camera getCamera() -> getCamera
    android.hardware.Camera openCamera(int,int,int,android.graphics.SurfaceTexture,android.hardware.Camera$PreviewCallback) -> openCamera
    void releaseCamera(android.hardware.Camera) -> releaseCamera
    void releaseCamera() -> releaseCamera
    void setDisplayOrientation(int) -> setDisplayOrientation
    void setDisplayOrientation(android.hardware.Camera,int) -> setDisplayOrientation
    void addCallbackBuffer(android.hardware.Camera,byte[]) -> addCallbackBuffer
    void addCallbackBuffer(byte[]) -> addCallbackBuffer
    boolean isAddCallbackBufferSupported() -> isAddCallbackBufferSupported
    boolean isFrontFacingCameraEnabled() -> isFrontFacingCameraEnabled
    void useRearCamera() -> useRearCamera
    void useFrontFacingCamera() -> useFrontFacingCamera
    android.hardware.Camera toggleCamera() -> toggleCamera
    void initializeCallbacks(android.hardware.Camera$PreviewCallback) -> initializeCallbacks
    void initializeCallbacks(android.hardware.Camera$PreviewCallback,android.hardware.Camera) -> initializeCallbacks
    void deInitializeCallbacks() -> deInitializeCallbacks
    void deInitializeCallbacks(android.hardware.Camera) -> deInitializeCallbacks
    int getNumberOfCameras() -> getNumberOfCameras
    android.hardware.Camera openFrontFacingCamera() -> openFrontFacingCamera
    void broadcastInviteEvent(org.doubango.ngn.events.NgnInviteEventArgs) -> broadcastInviteEvent
    java.lang.String access$0() -> access$0
org.doubango.ngn.media.NgnCameraProducer$FrontFacingCameraMapper -> org.doubango.ngn.media.NgnCameraProducer$FrontFacingCameraMapper:
    int preferredIndex -> preferredIndex
    org.doubango.ngn.media.NgnCameraProducer$FrontFacingCameraMapper[] Map -> Map
    java.lang.String className -> className
    java.lang.String methodName -> methodName
    android.hardware.Camera getPreferredCamera() -> getPreferredCamera
org.doubango.ngn.media.NgnCameraProducer$FrontFacingCameraSwitcher -> org.doubango.ngn.media.NgnCameraProducer$FrontFacingCameraSwitcher:
    java.lang.reflect.Method DualCameraSwitchMethod -> DualCameraSwitchMethod
    java.lang.reflect.Method getSwitcher() -> getSwitcher
org.doubango.ngn.media.NgnCameraProducer_surface -> org.doubango.ngn.media.NgnCameraProducer_surface:
    java.lang.String TAG -> TAG
    android.hardware.Camera instance -> instance
    boolean useFrontFacingCamera -> useFrontFacingCamera
    int fps -> fps
    int width -> width
    int height -> height
    android.view.SurfaceHolder holder -> holder
    android.hardware.Camera$PreviewCallback callback -> callback
    int MIN_SDKVERSION_addCallbackBuffer -> MIN_SDKVERSION_addCallbackBuffer
    int MIN_SDKVERSION_setPreviewCallbackWithBuffer -> MIN_SDKVERSION_setPreviewCallbackWithBuffer
    int MIN_SDKVERSION_setDisplayOrientation -> MIN_SDKVERSION_setDisplayOrientation
    java.lang.reflect.Method addCallbackBufferMethod -> addCallbackBufferMethod
    java.lang.reflect.Method setDisplayOrientationMethod -> setDisplayOrientationMethod
    java.lang.reflect.Method setPreviewCallbackWithBufferMethod -> setPreviewCallbackWithBufferMethod
    android.hardware.Camera getCamera() -> getCamera
    android.hardware.Camera openCamera(int,int,int,android.view.SurfaceHolder,android.hardware.Camera$PreviewCallback) -> openCamera
    void releaseCamera(android.hardware.Camera) -> releaseCamera
    void releaseCamera() -> releaseCamera
    void setDisplayOrientation(int) -> setDisplayOrientation
    void setDisplayOrientation(android.hardware.Camera,int) -> setDisplayOrientation
    void addCallbackBuffer(android.hardware.Camera,byte[]) -> addCallbackBuffer
    void addCallbackBuffer(byte[]) -> addCallbackBuffer
    boolean isAddCallbackBufferSupported() -> isAddCallbackBufferSupported
    boolean isFrontFacingCameraEnabled() -> isFrontFacingCameraEnabled
    void useRearCamera() -> useRearCamera
    void useFrontFacingCamera() -> useFrontFacingCamera
    android.hardware.Camera toggleCamera() -> toggleCamera
    void initializeCallbacks(android.hardware.Camera$PreviewCallback) -> initializeCallbacks
    void initializeCallbacks(android.hardware.Camera$PreviewCallback,android.hardware.Camera) -> initializeCallbacks
    void deInitializeCallbacks() -> deInitializeCallbacks
    void deInitializeCallbacks(android.hardware.Camera) -> deInitializeCallbacks
    int getNumberOfCameras() -> getNumberOfCameras
    android.hardware.Camera openFrontFacingCamera() -> openFrontFacingCamera
    java.lang.String access$0() -> access$0
org.doubango.ngn.media.NgnCameraProducer_surface$FrontFacingCameraMapper -> org.doubango.ngn.media.NgnCameraProducer_surface$FrontFacingCameraMapper:
    int preferredIndex -> preferredIndex
    org.doubango.ngn.media.NgnCameraProducer_surface$FrontFacingCameraMapper[] Map -> Map
    java.lang.String className -> className
    java.lang.String methodName -> methodName
    android.hardware.Camera getPreferredCamera() -> getPreferredCamera
org.doubango.ngn.media.NgnCameraProducer_surface$FrontFacingCameraSwitcher -> org.doubango.ngn.media.NgnCameraProducer_surface$FrontFacingCameraSwitcher:
    java.lang.reflect.Method DualCameraSwitchMethod -> DualCameraSwitchMethod
    java.lang.reflect.Method getSwitcher() -> getSwitcher
org.doubango.ngn.media.NgnMediaType -> org.doubango.ngn.media.NgnMediaType:
    org.doubango.ngn.media.NgnMediaType None -> None
    org.doubango.ngn.media.NgnMediaType Audio -> Audio
    org.doubango.ngn.media.NgnMediaType Video -> Video
    org.doubango.ngn.media.NgnMediaType AudioVideo -> AudioVideo
    org.doubango.ngn.media.NgnMediaType SMS -> SMS
    org.doubango.ngn.media.NgnMediaType Chat -> Chat
    org.doubango.ngn.media.NgnMediaType FileTransfer -> FileTransfer
    org.doubango.ngn.media.NgnMediaType Msrp -> Msrp
    org.doubango.ngn.media.NgnMediaType T140 -> T140
    org.doubango.ngn.media.NgnMediaType AudioT140 -> AudioT140
    org.doubango.ngn.media.NgnMediaType AudioVideoT140 -> AudioVideoT140
    org.doubango.ngn.media.NgnMediaType VideoT140 -> VideoT140
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t
    org.doubango.ngn.media.NgnMediaType[] ENUM$VALUES -> ENUM$VALUES
    boolean isVideoType(org.doubango.ngn.media.NgnMediaType) -> isVideoType
    boolean isAudioType(org.doubango.ngn.media.NgnMediaType) -> isAudioType
    boolean isAudioVideoType(org.doubango.ngn.media.NgnMediaType) -> isAudioVideoType
    boolean isT140Type(org.doubango.ngn.media.NgnMediaType) -> isT140Type
    boolean isAudioVideoT140Type(org.doubango.ngn.media.NgnMediaType) -> isAudioVideoT140Type
    boolean isFileTransfer(org.doubango.ngn.media.NgnMediaType) -> isFileTransfer
    boolean isChat(org.doubango.ngn.media.NgnMediaType) -> isChat
    boolean isMsrpType(org.doubango.ngn.media.NgnMediaType) -> isMsrpType
    org.doubango.ngn.media.NgnMediaType ConvertFromNative(org.doubango.tinyWRAP.twrap_media_type_t) -> ConvertFromNative
    org.doubango.tinyWRAP.twrap_media_type_t ConvertToNative(org.doubango.ngn.media.NgnMediaType) -> ConvertToNative
    org.doubango.ngn.media.NgnMediaType[] values() -> values
    org.doubango.ngn.media.NgnMediaType valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t
org.doubango.ngn.media.NgnProxyAudioConsumer -> org.doubango.ngn.media.NgnProxyAudioConsumer:
    java.lang.String TAG -> TAG
    int AUDIO_STREAM_TYPE -> AUDIO_STREAM_TYPE
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    org.doubango.ngn.media.NgnProxyAudioConsumer$MyProxyAudioConsumerCallback mCallback -> mCallback
    org.doubango.tinyWRAP.ProxyAudioConsumer mConsumer -> mConsumer
    boolean mRoutingChanged -> mRoutingChanged
    java.lang.Thread mConsumerThread -> mConsumerThread
    int mBufferSize -> mBufferSize
    android.media.AudioTrack mAudioTrack -> mAudioTrack
    int mPtime -> mPtime
    int mInputRate -> mInputRate
    int mChannels -> mChannels
    int mOutputRate -> mOutputRate
    java.nio.ByteBuffer mOutputBuffer -> mOutputBuffer
    boolean mAec -> mAec
    boolean mIsInit -> mIsInit
    boolean conPause -> conPause
    java.lang.Object mLocked -> mLocked
    java.lang.Runnable mRunnablePlayer -> mRunnablePlayer
    void setOnResetJB() -> setOnResetJB
    void setOnPause(boolean) -> setOnPause
    void setSpeakerphoneOn(boolean) -> setSpeakerphoneOn
    void toggleSpeakerphone() -> toggleSpeakerphone
    boolean onVolumeChanged(boolean) -> onVolumeChanged
    boolean changeVolume(boolean,boolean) -> changeVolume
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    int prepare(int,int,int) -> prepare
    void unprepare() -> unprepare
    java.lang.String access$0() -> access$0
    java.nio.ByteBuffer access$1(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$1
    boolean access$2(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$2
    org.doubango.tinyWRAP.ProxyAudioConsumer access$3(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$3
    boolean access$4(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$4
    android.media.AudioTrack access$5(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$5
    boolean access$6(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$6
    void access$7(org.doubango.ngn.media.NgnProxyAudioConsumer,boolean) -> access$7
    void access$8(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$8
    int access$9(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$9
    int access$10(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$10
    int access$11(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$11
    int access$12(org.doubango.ngn.media.NgnProxyAudioConsumer,int,int,int) -> access$12
    boolean access$13(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$13
    int access$14(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$14
    int access$15(org.doubango.ngn.media.NgnProxyAudioConsumer,int,int,int) -> access$15
    int access$16(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$16
    int access$17(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$17
    int access$18(org.doubango.ngn.media.NgnProxyAudioConsumer) -> access$18
org.doubango.ngn.media.NgnProxyAudioConsumer$1 -> org.doubango.ngn.media.NgnProxyAudioConsumer$1:
    org.doubango.ngn.media.NgnProxyAudioConsumer this$0 -> this$0
    void run() -> run
org.doubango.ngn.media.NgnProxyAudioConsumer$MyProxyAudioConsumerCallback -> org.doubango.ngn.media.NgnProxyAudioConsumer$MyProxyAudioConsumerCallback:
    org.doubango.ngn.media.NgnProxyAudioConsumer myConsumer -> myConsumer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyAudioProducer -> org.doubango.ngn.media.NgnProxyAudioProducer:
    java.lang.String TAG -> TAG
    float AUDIO_BUFFER_FACTOR -> AUDIO_BUFFER_FACTOR
    int AUDIO_MIN_VALID_BUFFER_SIZE -> AUDIO_MIN_VALID_BUFFER_SIZE
    int AUDIO_DEFAULT_BUFFER_SIZE -> AUDIO_DEFAULT_BUFFER_SIZE
    org.doubango.ngn.media.NgnProxyAudioProducer$MyProxyAudioProducerCallback mCallback -> mCallback
    org.doubango.tinyWRAP.ProxyAudioProducer mProducer -> mProducer
    boolean mRoutingChanged -> mRoutingChanged
    boolean mOnMute -> mOnMute
    boolean mHasBuiltInAEC -> mHasBuiltInAEC
    java.lang.Thread mProducerThread -> mProducerThread
    android.media.AudioRecord mAudioRecord -> mAudioRecord
    java.nio.ByteBuffer mAudioFrame -> mAudioFrame
    int mPtime -> mPtime
    int mRate -> mRate
    int mChannels -> mChannels
    boolean mSendAudioTimerSign -> mSendAudioTimerSign
    org.doubango.ngn.utils.NgnTimer mSendAudioTimer -> mSendAudioTimer
    java.util.TimerTask mSendAudioTimeTask -> mSendAudioTimeTask
    java.lang.Runnable mRunnableRecorder -> mRunnableRecorder
    void setOnPause(boolean) -> setOnPause
    void setOnMute(boolean) -> setOnMute
    boolean isOnMute() -> isOnMute
    void setSpeakerphoneOn(boolean) -> setSpeakerphoneOn
    void toggleSpeakerphone() -> toggleSpeakerphone
    boolean isSpeakerOn() -> isSpeakerOn
    boolean onVolumeChanged(boolean) -> onVolumeChanged
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int fillPushBuffer() -> fillPushBuffer
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    int prepare(int,int,int) -> prepare
    void unprepare() -> unprepare
    boolean isSuportCommunation() -> isSuportCommunation
    org.doubango.tinyWRAP.ProxyAudioProducer access$0(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$0
    boolean access$1(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$1
    java.lang.String access$2() -> access$2
    android.media.AudioRecord access$3(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$3
    java.nio.ByteBuffer access$4(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$4
    boolean access$5(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$5
    boolean access$6(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$6
    void access$7(org.doubango.ngn.media.NgnProxyAudioProducer,boolean) -> access$7
    org.doubango.ngn.utils.NgnTimer access$8(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$8
    java.util.TimerTask access$9(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$9
    boolean access$10(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$10
    void access$11(org.doubango.ngn.media.NgnProxyAudioProducer,boolean) -> access$11
    void access$12(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$12
    int access$13(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$13
    int access$14(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$14
    int access$15(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$15
    int access$16(org.doubango.ngn.media.NgnProxyAudioProducer,int,int,int) -> access$16
    boolean access$17(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$17
    boolean access$18(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$18
    int access$19(org.doubango.ngn.media.NgnProxyAudioProducer,int,int,int) -> access$19
    int access$20(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$20
    int access$21(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$21
    int access$22(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$22
    int access$23(org.doubango.ngn.media.NgnProxyAudioProducer) -> access$23
org.doubango.ngn.media.NgnProxyAudioProducer$1 -> org.doubango.ngn.media.NgnProxyAudioProducer$1:
    org.doubango.ngn.media.NgnProxyAudioProducer this$0 -> this$0
    void run() -> run
org.doubango.ngn.media.NgnProxyAudioProducer$2 -> org.doubango.ngn.media.NgnProxyAudioProducer$2:
    org.doubango.ngn.media.NgnProxyAudioProducer this$0 -> this$0
    void run() -> run
org.doubango.ngn.media.NgnProxyAudioProducer$MyProxyAudioProducerCallback -> org.doubango.ngn.media.NgnProxyAudioProducer$MyProxyAudioProducerCallback:
    org.doubango.ngn.media.NgnProxyAudioProducer myProducer -> myProducer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int fillPushBuffer() -> fillPushBuffer
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyPlugin -> org.doubango.ngn.media.NgnProxyPlugin:
    boolean mValid -> mValid
    boolean mStarted -> mStarted
    boolean mPaused -> mPaused
    boolean mPrepared -> mPrepared
    java.math.BigInteger mId -> mId
    org.doubango.tinyWRAP.ProxyPlugin mPlugin -> mPlugin
    long mSipSessionId -> mSipSessionId
    long getSipSessionId() -> getSipSessionId
    void setSipSessionId(long) -> setSipSessionId
    boolean isValid() -> isValid
    boolean isStarted() -> isStarted
    boolean isPaused() -> isPaused
    boolean isPrepared() -> isPrepared
    void invalidate() -> invalidate
    int compareTo(org.doubango.ngn.media.NgnProxyPlugin) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.doubango.ngn.media.NgnProxyPluginMgr -> org.doubango.ngn.media.NgnProxyPluginMgr:
    java.lang.String TAG -> TAG
    org.doubango.ngn.media.NgnProxyPluginMgr$MyProxyPluginMgrCallback sMyProxyPluginMgrCallback -> sMyProxyPluginMgrCallback
    org.doubango.tinyWRAP.ProxyPluginMgr sPluginMgr -> sPluginMgr
    java.util.Hashtable sPlugins -> sPlugins
    void Initialize() -> Initialize
    void setDefaultMaxVideoSize() -> setDefaultMaxVideoSize
    void setDefaultMinVideoSize() -> setDefaultMinVideoSize
    void setCurrentVideoSize() -> setCurrentVideoSize
    org.doubango.tinyWRAP.ProxyPlugin findNativePlugin(java.math.BigInteger) -> findNativePlugin
    org.doubango.ngn.media.NgnProxyPlugin findPlugin(java.math.BigInteger) -> findPlugin
    java.lang.String access$0() -> access$0
    org.doubango.tinyWRAP.ProxyPluginMgr access$1() -> access$1
    java.util.Hashtable access$2() -> access$2
org.doubango.ngn.media.NgnProxyPluginMgr$MyProxyPluginMgrCallback -> org.doubango.ngn.media.NgnProxyPluginMgr$MyProxyPluginMgrCallback:
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_proxy_plugin_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_proxy_plugin_type_t
    int OnPluginCreated(java.math.BigInteger,org.doubango.tinyWRAP.twrap_proxy_plugin_type_t) -> OnPluginCreated
    int OnPluginDestroyed(java.math.BigInteger,org.doubango.tinyWRAP.twrap_proxy_plugin_type_t) -> OnPluginDestroyed
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_proxy_plugin_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_proxy_plugin_type_t
org.doubango.ngn.media.NgnProxyVideoConsumer -> org.doubango.ngn.media.NgnProxyVideoConsumer:
    boolean mFullScreenRequired -> mFullScreenRequired
    org.doubango.ngn.media.NgnProxyVideoConsumer createInstance(java.math.BigInteger,org.doubango.tinyWRAP.ProxyVideoConsumer) -> createInstance
    void setContext(android.content.Context) -> setContext
    android.view.View startPreview(android.content.Context) -> startPreview
    android.view.View startPreview() -> startPreview
org.doubango.ngn.media.NgnProxyVideoConsumerGL -> org.doubango.ngn.media.NgnProxyVideoConsumerGL:
    java.lang.String TAG -> TAG
    int DEFAULT_VIDEO_WIDTH -> DEFAULT_VIDEO_WIDTH
    int DEFAULT_VIDEO_HEIGHT -> DEFAULT_VIDEO_HEIGHT
    int DEFAULT_VIDEO_FPS -> DEFAULT_VIDEO_FPS
    android.os.Handler mTvHandler -> mTvHandler
    org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLCallback mCallback -> mCallback
    org.doubango.tinyWRAP.ProxyVideoConsumer mConsumer -> mConsumer
    java.nio.ByteBuffer mVideoFrame -> mVideoFrame
    android.content.Context mContext -> mContext
    org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLPreview mPreview -> mPreview
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mFps -> mFps
    java.net.DatagramSocket socket -> socket
    void invalidate() -> invalidate
    void setContext(android.content.Context) -> setContext
    android.view.View startPreview(android.content.Context) -> startPreview
    android.view.View startPreview() -> startPreview
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int bufferCopiedCallback(long,long) -> bufferCopiedCallback
    void setTvHandler(android.os.Handler) -> setTvHandler
    int consumeCallback(org.doubango.tinyWRAP.ProxyVideoFrame) -> consumeCallback
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    int access$0(org.doubango.ngn.media.NgnProxyVideoConsumerGL,int,int,int) -> access$0
    int access$1(org.doubango.ngn.media.NgnProxyVideoConsumerGL) -> access$1
    int access$2(org.doubango.ngn.media.NgnProxyVideoConsumerGL,org.doubango.tinyWRAP.ProxyVideoFrame) -> access$2
    int access$3(org.doubango.ngn.media.NgnProxyVideoConsumerGL,long,long) -> access$3
    int access$4(org.doubango.ngn.media.NgnProxyVideoConsumerGL) -> access$4
    int access$5(org.doubango.ngn.media.NgnProxyVideoConsumerGL) -> access$5
    java.lang.String access$6() -> access$6
org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLCallback -> org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLCallback:
    org.doubango.ngn.media.NgnProxyVideoConsumerGL mConsumer -> mConsumer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int consume(org.doubango.tinyWRAP.ProxyVideoFrame) -> consume
    int bufferCopied(long,long) -> bufferCopied
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLPreview -> org.doubango.ngn.media.NgnProxyVideoConsumerGL$NgnProxyVideoConsumerGLPreview:
    int mBufferWidthY -> mBufferWidthY
    int mBufferHeightY -> mBufferHeightY
    int mBufferWidthUV -> mBufferWidthUV
    int mBufferHeightUV -> mBufferHeightUV
    java.nio.ByteBuffer mBuffer -> mBuffer
    int mBufferPositionY -> mBufferPositionY
    int mBufferPositionU -> mBufferPositionU
    int mBufferPositionV -> mBufferPositionV
    int FLOAT_SIZE_BYTES -> FLOAT_SIZE_BYTES
    int SHORT_SIZE_BYTES -> SHORT_SIZE_BYTES
    int TRIANGLE_VERTICES_DATA_STRIDE_BYTES -> TRIANGLE_VERTICES_DATA_STRIDE_BYTES
    int TRIANGLE_VERTICES_DATA_POS_OFFSET -> TRIANGLE_VERTICES_DATA_POS_OFFSET
    int TRIANGLE_VERTICES_DATA_UV_OFFSET -> TRIANGLE_VERTICES_DATA_UV_OFFSET
    float[] TRIANFLE_VERTICES_DATA -> TRIANFLE_VERTICES_DATA
    short[] INDICES_DATA -> INDICES_DATA
    java.nio.FloatBuffer mTriangleVertices -> mTriangleVertices
    java.nio.ShortBuffer mIndices -> mIndices
    java.lang.String VERTEX_SHADER_SOURCE -> VERTEX_SHADER_SOURCE
    java.lang.String FRAGMENT_SHADER_SOURCE -> FRAGMENT_SHADER_SOURCE
    int mProgram -> mProgram
    int maPositionHandle -> maPositionHandle
    int maTextureHandle -> maTextureHandle
    int muSamplerYHandle -> muSamplerYHandle
    int muSamplerUHandle -> muSamplerUHandle
    int muSamplerVHandle -> muSamplerVHandle
    int[] mTextureY -> mTextureY
    int[] mTextureU -> mTextureU
    int[] mTextureV -> mTextureV
    boolean mSurfaceCreated -> mSurfaceCreated
    boolean mSurfaceDestroyed -> mSurfaceDestroyed
    android.content.Context mContext -> mContext
    int mViewWidth -> mViewWidth
    int mViewHeight -> mViewHeight
    int mViewX -> mViewX
    int mViewY -> mViewY
    boolean mFullScreenRequired -> mFullScreenRequired
    void setBuffer(java.nio.ByteBuffer,int,int) -> setBuffer
    boolean isReady() -> isReady
    boolean isDestroyed() -> isDestroyed
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    int loadShader(int,java.lang.String) -> loadShader
    int createProgram(java.lang.String,java.lang.String) -> createProgram
    void setViewport(int,int) -> setViewport
    void checkGlError(java.lang.String) -> checkGlError
org.doubango.ngn.media.NgnProxyVideoConsumerSV -> org.doubango.ngn.media.NgnProxyVideoConsumerSV:
    java.lang.String TAG -> TAG
    int DEFAULT_VIDEO_WIDTH -> DEFAULT_VIDEO_WIDTH
    int DEFAULT_VIDEO_HEIGHT -> DEFAULT_VIDEO_HEIGHT
    int DEFAULT_VIDEO_FPS -> DEFAULT_VIDEO_FPS
    org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerCallback mCallback -> mCallback
    org.doubango.tinyWRAP.ProxyVideoConsumer mConsumer -> mConsumer
    android.content.Context mContext -> mContext
    org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview mPreview -> mPreview
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mFps -> mFps
    java.nio.ByteBuffer mVideoFrame -> mVideoFrame
    android.graphics.Bitmap mRGB565Bitmap -> mRGB565Bitmap
    android.graphics.Bitmap mRGBCroppedBitmap -> mRGBCroppedBitmap
    android.os.Looper mLooper -> mLooper
    android.os.Handler mHandler -> mHandler
    void invalidate() -> invalidate
    void setContext(android.content.Context) -> setContext
    android.view.View startPreview(android.content.Context) -> startPreview
    android.view.View startPreview() -> startPreview
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int bufferCopiedCallback(long,long) -> bufferCopiedCallback
    int consumeCallback(org.doubango.tinyWRAP.ProxyVideoFrame) -> consumeCallback
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    void drawFrame() -> drawFrame
    int access$0(org.doubango.ngn.media.NgnProxyVideoConsumerSV,int,int,int) -> access$0
    int access$1(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$1
    int access$2(org.doubango.ngn.media.NgnProxyVideoConsumerSV,org.doubango.tinyWRAP.ProxyVideoFrame) -> access$2
    int access$3(org.doubango.ngn.media.NgnProxyVideoConsumerSV,long,long) -> access$3
    int access$4(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$4
    int access$5(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$5
    void access$6(org.doubango.ngn.media.NgnProxyVideoConsumerSV,android.os.Looper) -> access$6
    android.content.Context access$7(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$7
    int access$8(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$8
    int access$9(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$9
    int access$10(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$10
    void access$11(org.doubango.ngn.media.NgnProxyVideoConsumerSV,org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview) -> access$11
    org.doubango.tinyWRAP.ProxyVideoConsumer access$12(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$12
    java.nio.ByteBuffer access$13(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$13
    java.lang.String access$14() -> access$14
    android.graphics.Bitmap access$15(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$15
    android.graphics.Bitmap access$16(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$16
    void access$17(org.doubango.ngn.media.NgnProxyVideoConsumerSV,android.graphics.Bitmap) -> access$17
    void access$18(org.doubango.ngn.media.NgnProxyVideoConsumerSV,android.graphics.Bitmap) -> access$18
    void access$19(org.doubango.ngn.media.NgnProxyVideoConsumerSV,java.nio.ByteBuffer) -> access$19
    void access$20(org.doubango.ngn.media.NgnProxyVideoConsumerSV,int) -> access$20
    void access$21(org.doubango.ngn.media.NgnProxyVideoConsumerSV,int) -> access$21
    void access$22(org.doubango.ngn.media.NgnProxyVideoConsumerSV) -> access$22
    void access$23(org.doubango.ngn.media.NgnProxyVideoConsumerSV,android.os.Handler) -> access$23
org.doubango.ngn.media.NgnProxyVideoConsumerSV$1 -> org.doubango.ngn.media.NgnProxyVideoConsumerSV$1:
    org.doubango.ngn.media.NgnProxyVideoConsumerSV this$0 -> this$0
    void run() -> run
    org.doubango.ngn.media.NgnProxyVideoConsumerSV access$0(org.doubango.ngn.media.NgnProxyVideoConsumerSV$1) -> access$0
org.doubango.ngn.media.NgnProxyVideoConsumerSV$1$1 -> org.doubango.ngn.media.NgnProxyVideoConsumerSV$1$1:
    org.doubango.ngn.media.NgnProxyVideoConsumerSV$1 this$1 -> this$1
    void handleMessage(android.os.Message) -> handleMessage
org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerCallback -> org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerCallback:
    org.doubango.ngn.media.NgnProxyVideoConsumerSV myConsumer -> myConsumer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int consume(org.doubango.tinyWRAP.ProxyVideoFrame) -> consume
    int bufferCopied(long,long) -> bufferCopied
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview -> org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview:
    android.view.SurfaceHolder mHolder -> mHolder
    android.graphics.Rect mSurfFrame -> mSurfFrame
    android.graphics.Rect mSurfDisplay -> mSurfDisplay
    float mRatio -> mRatio
    boolean mSurfaceChanged -> mSurfaceChanged
    void setSurfaceChanged(boolean) -> setSurfaceChanged
    boolean isSurfaceChanged() -> isSurfaceChanged
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    android.view.SurfaceHolder access$0(org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview) -> access$0
    android.graphics.Rect access$1(org.doubango.ngn.media.NgnProxyVideoConsumerSV$MyProxyVideoConsumerPreview) -> access$1
org.doubango.ngn.media.NgnProxyVideoProducer -> org.doubango.ngn.media.NgnProxyVideoProducer:
    java.lang.String TAG -> TAG
    int DEFAULT_VIDEO_WIDTH -> DEFAULT_VIDEO_WIDTH
    int DEFAULT_VIDEO_HEIGHT -> DEFAULT_VIDEO_HEIGHT
    int DEFAULT_VIDEO_FPS -> DEFAULT_VIDEO_FPS
    int CALLABACK_BUFFERS_COUNT -> CALLABACK_BUFFERS_COUNT
    boolean sAddCallbackBufferSupported -> sAddCallbackBufferSupported
    org.doubango.tinyWRAP.ProxyVideoProducer mProducer -> mProducer
    org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerCallback mCallback -> mCallback
    android.content.Context mContext -> mContext
    org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview mPreview -> mPreview
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mFps -> mFps
    int mFrameWidth -> mFrameWidth
    int mFrameHeight -> mFrameHeight
    boolean mIsVideoCallbackStop -> mIsVideoCallbackStop
    java.nio.ByteBuffer mVideoFrame -> mVideoFrame
    byte[] mVideoCallbackData -> mVideoCallbackData
    android.os.Handler mTvHandler -> mTvHandler
    boolean mVideoSendPause -> mVideoSendPause
    android.hardware.Camera$PreviewCallback previewCallback -> previewCallback
    void finalize() -> finalize
    void invalidate() -> invalidate
    void setContext(android.content.Context) -> setContext
    android.view.View startPreview(android.content.Context) -> startPreview
    android.view.View startPreview() -> startPreview
    void servicemode_StopPreView() -> servicemode_StopPreView
    void pushBlankPacket() -> pushBlankPacket
    void toggleCamera() -> toggleCamera
    int getTerminalRotation() -> getTerminalRotation
    int getNativeCameraHardRotation(boolean) -> getNativeCameraHardRotation
    int compensCamRotation(boolean) -> compensCamRotation
    boolean isFrontFacingCameraEnabled() -> isFrontFacingCameraEnabled
    void setRotation(int) -> setRotation
    void setOnPause(boolean) -> setOnPause
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    android.hardware.Camera$Size getCameraBestPreviewSize(android.hardware.Camera) -> getCameraBestPreviewSize
    void startCameraPreview(android.hardware.Camera) -> startCameraPreview
    void stopCameraPreview(android.hardware.Camera) -> stopCameraPreview
    void setTvHandler(android.os.Handler) -> setTvHandler
    int getCameraFacing() -> getCameraFacing
    boolean ismVideoSendPause() -> ismVideoSendPause
    void setmVideoSendPause(boolean) -> setmVideoSendPause
    android.os.Handler access$0() -> access$0
    java.lang.String access$1() -> access$1
    int access$2(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$2
    int access$3(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$3
    boolean access$4(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$4
    java.nio.ByteBuffer access$5(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$5
    boolean access$6() -> access$6
    byte[] access$7(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$7
    int access$8(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$8
    org.doubango.tinyWRAP.ProxyVideoProducer access$9(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$9
    android.content.Context access$10(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$10
    int access$11(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$11
    int access$12(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$12
    android.hardware.Camera$PreviewCallback access$13(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$13
    void access$14(org.doubango.ngn.media.NgnProxyVideoProducer,android.hardware.Camera) -> access$14
    int access$15(org.doubango.ngn.media.NgnProxyVideoProducer,int,int,int) -> access$15
    int access$16(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$16
    int access$17(org.doubango.ngn.media.NgnProxyVideoProducer) -> access$17
org.doubango.ngn.media.NgnProxyVideoProducer$1 -> org.doubango.ngn.media.NgnProxyVideoProducer$1:
    long max_count -> max_count
    org.doubango.ngn.media.NgnProxyVideoProducer this$0 -> this$0
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerCallback -> org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerCallback:
    org.doubango.ngn.media.NgnProxyVideoProducer myProducer -> myProducer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview -> org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview:
    android.graphics.SurfaceTexture mSurfaceTexture -> mSurfaceTexture
    org.doubango.ngn.media.NgnProxyVideoProducer myProducer -> myProducer
    android.hardware.Camera mCamera -> mCamera
    int MAGIC_TEXTURE_ID -> MAGIC_TEXTURE_ID
    boolean sign -> sign
    java.lang.Object mCameraLock -> mCameraLock
    long num -> num
    boolean stopSign -> stopSign
    java.lang.Thread sendFramePreview -> sendFramePreview
    org.doubango.ngn.media.NgnProxyVideoProducer this$0 -> this$0
    android.hardware.Camera getCamera() -> getCamera
    void servicemode_Start() -> servicemode_Start
    void servicemode_Stop() -> servicemode_Stop
    void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureAvailable
    boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture) -> onSurfaceTextureDestroyed
    void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int) -> onSurfaceTextureSizeChanged
    void onSurfaceTextureUpdated(android.graphics.SurfaceTexture) -> onSurfaceTextureUpdated
    void normal_Stop() -> normal_Stop
    void access$0(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview,boolean) -> access$0
    boolean access$1(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview) -> access$1
    long access$2(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview) -> access$2
    void access$3(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview,long) -> access$3
    org.doubango.ngn.media.NgnProxyVideoProducer access$4(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview) -> access$4
    android.hardware.Camera access$5(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview) -> access$5
    org.doubango.ngn.media.NgnProxyVideoProducer access$6(org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview) -> access$6
org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview$1 -> org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview$1:
    org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview this$1 -> this$1
    void run() -> run
org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview$2 -> org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview$2:
    org.doubango.ngn.media.NgnProxyVideoProducer$MyProxyVideoProducerPreview this$1 -> this$1
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
org.doubango.ngn.media.NgnProxyVideoProducer_surface -> org.doubango.ngn.media.NgnProxyVideoProducer_surface:
    java.lang.String TAG -> TAG
    int DEFAULT_VIDEO_WIDTH -> DEFAULT_VIDEO_WIDTH
    int DEFAULT_VIDEO_HEIGHT -> DEFAULT_VIDEO_HEIGHT
    int DEFAULT_VIDEO_FPS -> DEFAULT_VIDEO_FPS
    int CALLABACK_BUFFERS_COUNT -> CALLABACK_BUFFERS_COUNT
    boolean sAddCallbackBufferSupported -> sAddCallbackBufferSupported
    org.doubango.tinyWRAP.ProxyVideoProducer mProducer -> mProducer
    org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerCallback mCallback -> mCallback
    android.content.Context mContext -> mContext
    org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerPreview mPreview -> mPreview
    int mWidth -> mWidth
    int mHeight -> mHeight
    int mFps -> mFps
    int mFrameWidth -> mFrameWidth
    int mFrameHeight -> mFrameHeight
    java.nio.ByteBuffer mVideoFrame -> mVideoFrame
    byte[] mVideoCallbackData -> mVideoCallbackData
    android.hardware.Camera$PreviewCallback previewCallback -> previewCallback
    void finalize() -> finalize
    void invalidate() -> invalidate
    void setContext(android.content.Context) -> setContext
    android.view.View startPreview(android.content.Context) -> startPreview
    android.view.View startPreview() -> startPreview
    void pushBlankPacket() -> pushBlankPacket
    void toggleCamera() -> toggleCamera
    int getTerminalRotation() -> getTerminalRotation
    int getNativeCameraHardRotation(boolean) -> getNativeCameraHardRotation
    int compensCamRotation(boolean) -> compensCamRotation
    boolean isFrontFacingCameraEnabled() -> isFrontFacingCameraEnabled
    void setRotation(int) -> setRotation
    void setOnPause(boolean) -> setOnPause
    int prepareCallback(int,int,int) -> prepareCallback
    int startCallback() -> startCallback
    int pauseCallback() -> pauseCallback
    int stopCallback() -> stopCallback
    android.hardware.Camera$Size getCameraBestPreviewSize(android.hardware.Camera) -> getCameraBestPreviewSize
    void startCameraPreview(android.hardware.Camera) -> startCameraPreview
    void stopCameraPreview(android.hardware.Camera) -> stopCameraPreview
    boolean access$0(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$0
    java.nio.ByteBuffer access$1(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$1
    org.doubango.tinyWRAP.ProxyVideoProducer access$2(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$2
    boolean access$3() -> access$3
    byte[] access$4(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$4
    android.content.Context access$5(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$5
    java.lang.String access$6() -> access$6
    int access$7(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$7
    int access$8(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$8
    int access$9(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$9
    android.hardware.Camera$PreviewCallback access$10(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$10
    void access$11(org.doubango.ngn.media.NgnProxyVideoProducer_surface,android.hardware.Camera) -> access$11
    int access$12(org.doubango.ngn.media.NgnProxyVideoProducer_surface,int,int,int) -> access$12
    int access$13(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$13
    int access$14(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$14
    int access$15(org.doubango.ngn.media.NgnProxyVideoProducer_surface) -> access$15
org.doubango.ngn.media.NgnProxyVideoProducer_surface$1 -> org.doubango.ngn.media.NgnProxyVideoProducer_surface$1:
    org.doubango.ngn.media.NgnProxyVideoProducer_surface this$0 -> this$0
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerCallback -> org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerCallback:
    org.doubango.ngn.media.NgnProxyVideoProducer_surface myProducer -> myProducer
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerPreview -> org.doubango.ngn.media.NgnProxyVideoProducer_surface$MyProxyVideoProducerPreview:
    android.view.SurfaceHolder mHolder -> mHolder
    org.doubango.ngn.media.NgnProxyVideoProducer_surface myProducer -> myProducer
    android.hardware.Camera mCamera -> mCamera
    org.doubango.ngn.media.NgnProxyVideoProducer_surface this$0 -> this$0
    android.hardware.Camera getCamera() -> getCamera
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
org.doubango.ngn.model.NgnAccessPoint -> org.doubango.ngn.model.NgnAccessPoint:
    java.lang.String AP_WPA2 -> AP_WPA2
    java.lang.String AP_WPA -> AP_WPA
    java.lang.String AP_WEP -> AP_WEP
    java.lang.String AP_OPEN -> AP_OPEN
    java.lang.String AP_WPA_EAP -> AP_WPA_EAP
    java.lang.String AP_IEEE8021X -> AP_IEEE8021X
    java.lang.String[] AP_SECURITY_MODES -> AP_SECURITY_MODES
    int AP_WEP_PASSWORD_AUTO -> AP_WEP_PASSWORD_AUTO
    int AP_WEP_PASSWORD_ASCII -> AP_WEP_PASSWORD_ASCII
    int AP_WEP_PASSWORD_HEX -> AP_WEP_PASSWORD_HEX
    int mNetworkId -> mNetworkId
    java.lang.String mSSID -> mSSID
    java.lang.String mDescription -> mDescription
    boolean mConnected -> mConnected
    boolean mHasPassword -> mHasPassword
    boolean mOpen -> mOpen
    int mLevel -> mLevel
    android.net.wifi.WifiConfiguration mConf -> mConf
    android.net.wifi.ScanResult mSR -> mSR
    android.net.wifi.WifiConfiguration getConf() -> getConf
    android.net.wifi.ScanResult getSR() -> getSR
    void setNetworkId(int) -> setNetworkId
    int getNetworkId() -> getNetworkId
    java.lang.String getSSID() -> getSSID
    java.lang.String getDescription() -> getDescription
    int getLevel() -> getLevel
    void setLevel(int) -> setLevel
    boolean isConfigured() -> isConfigured
    void setConnected(boolean) -> setConnected
    boolean isConnected() -> isConnected
    boolean hasPassword() -> hasPassword
    boolean isOpen() -> isOpen
    java.lang.String getScanResultSecurity(android.net.wifi.ScanResult) -> getScanResultSecurity
org.doubango.ngn.model.NgnContact -> org.doubango.ngn.model.NgnContact:
    int mId -> mId
    java.lang.String mDisplayName -> mDisplayName
    java.util.List mPhoneNumbers -> mPhoneNumbers
    java.util.List mEmails -> mEmails
    int mPhotoId -> mPhotoId
    android.graphics.Bitmap mPhoto -> mPhoto
    int getId() -> getId
    java.util.List getPhoneNumbers() -> getPhoneNumbers
    java.util.List getEmails() -> getEmails
    java.lang.String getPrimaryNumber() -> getPrimaryNumber
    void addPhoneNumber(org.doubango.ngn.model.NgnPhoneNumber$PhoneType,java.lang.String,java.lang.String) -> addPhoneNumber
    void addEmail(org.doubango.ngn.model.NgnEmail$EmailType,java.lang.String,java.lang.String) -> addEmail
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getDisplayName() -> getDisplayName
    void setPhotoId(int) -> setPhotoId
    android.graphics.Bitmap getPhoto() -> getPhoto
org.doubango.ngn.model.NgnContact$ContactFilterByAnyPhoneNumber -> org.doubango.ngn.model.NgnContact$ContactFilterByAnyPhoneNumber:
    java.lang.String mPhoneNumber -> mPhoneNumber
    boolean apply(org.doubango.ngn.model.NgnContact) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnDeviceInfo -> org.doubango.ngn.model.NgnDeviceInfo:
    java.lang.String mLang -> mLang
    java.lang.String mCountry -> mCountry
    java.util.Date mDate -> mDate
    org.doubango.ngn.model.NgnDeviceInfo$Orientation mOrientation -> mOrientation
    java.lang.String getLang() -> getLang
    void setLang(java.lang.String) -> setLang
    java.lang.String getCountry() -> getCountry
    void setCountry(java.lang.String) -> setCountry
    java.util.Date getDate() -> getDate
    void setDate(java.util.Date) -> setDate
    org.doubango.ngn.model.NgnDeviceInfo$Orientation getOrientation() -> getOrientation
    void setOrientation(org.doubango.ngn.model.NgnDeviceInfo$Orientation) -> setOrientation
org.doubango.ngn.model.NgnDeviceInfo$Orientation -> org.doubango.ngn.model.NgnDeviceInfo$Orientation:
    org.doubango.ngn.model.NgnDeviceInfo$Orientation PORTRAIT -> PORTRAIT
    org.doubango.ngn.model.NgnDeviceInfo$Orientation LANDSCAPE -> LANDSCAPE
    org.doubango.ngn.model.NgnDeviceInfo$Orientation[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.model.NgnDeviceInfo$Orientation[] values() -> values
    org.doubango.ngn.model.NgnDeviceInfo$Orientation valueOf(java.lang.String) -> valueOf
org.doubango.ngn.model.NgnEmail -> org.doubango.ngn.model.NgnEmail:
    java.lang.String mValue -> mValue
    org.doubango.ngn.model.NgnEmail$EmailType mType -> mType
    java.lang.String mDescription -> mDescription
    java.lang.String getValue() -> getValue
    org.doubango.ngn.model.NgnEmail$EmailType getPhoneType() -> getPhoneType
    java.lang.String getDescription() -> getDescription
org.doubango.ngn.model.NgnEmail$EmailType -> org.doubango.ngn.model.NgnEmail$EmailType:
    org.doubango.ngn.model.NgnEmail$EmailType None -> None
    org.doubango.ngn.model.NgnEmail$EmailType[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.model.NgnEmail$EmailType[] values() -> values
    org.doubango.ngn.model.NgnEmail$EmailType valueOf(java.lang.String) -> valueOf
org.doubango.ngn.model.NgnHistoryAVCallEvent -> org.doubango.ngn.model.NgnHistoryAVCallEvent:
org.doubango.ngn.model.NgnHistoryAVCallEvent$HistoryEventAVFilter -> org.doubango.ngn.model.NgnHistoryAVCallEvent$HistoryEventAVFilter:
    boolean apply(org.doubango.ngn.model.NgnHistoryEvent) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnHistoryEvent -> org.doubango.ngn.model.NgnHistoryEvent:
    org.doubango.ngn.media.NgnMediaType mMediaType -> mMediaType
    long mStartTime -> mStartTime
    long mEndTime -> mEndTime
    java.lang.String mRemoteParty -> mRemoteParty
    boolean mSeen -> mSeen
    org.doubango.ngn.model.NgnHistoryEvent$StatusType mStatus -> mStatus
    int mSessionType -> mSessionType
    java.lang.String mLocalParty -> mLocalParty
    java.lang.String mDisplayName -> mDisplayName
    java.lang.String getmLocalParty() -> getmLocalParty
    void setmLocalParty(java.lang.String) -> setmLocalParty
    void setStartTime(long) -> setStartTime
    long getStartTime() -> getStartTime
    long getEndTime() -> getEndTime
    void setEndTime(long) -> setEndTime
    org.doubango.ngn.media.NgnMediaType getMediaType() -> getMediaType
    java.lang.String getRemoteParty() -> getRemoteParty
    void setRemoteParty(java.lang.String) -> setRemoteParty
    boolean isSeen() -> isSeen
    void setSeen(boolean) -> setSeen
    org.doubango.ngn.model.NgnHistoryEvent$StatusType getStatus() -> getStatus
    void setStatus(org.doubango.ngn.model.NgnHistoryEvent$StatusType) -> setStatus
    int getSessionType() -> getSessionType
    void setSessionType(int) -> setSessionType
    void setDisplayName(java.lang.String) -> setDisplayName
    java.lang.String getDisplayName() -> getDisplayName
    int compareTo(org.doubango.ngn.model.NgnHistoryEvent) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.doubango.ngn.model.NgnHistoryEvent$StatusType -> org.doubango.ngn.model.NgnHistoryEvent$StatusType:
    org.doubango.ngn.model.NgnHistoryEvent$StatusType Outgoing -> Outgoing
    org.doubango.ngn.model.NgnHistoryEvent$StatusType Incoming -> Incoming
    org.doubango.ngn.model.NgnHistoryEvent$StatusType Missed -> Missed
    org.doubango.ngn.model.NgnHistoryEvent$StatusType Failed -> Failed
    org.doubango.ngn.model.NgnHistoryEvent$StatusType[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.model.NgnHistoryEvent$StatusType[] values() -> values
    org.doubango.ngn.model.NgnHistoryEvent$StatusType valueOf(java.lang.String) -> valueOf
org.doubango.ngn.model.NgnHistoryList -> org.doubango.ngn.model.NgnHistoryList:
    org.doubango.ngn.utils.NgnObservableList mEvents -> mEvents
    java.util.List mSerializableEvents -> mSerializableEvents
    org.doubango.ngn.utils.NgnObservableList getList() -> getList
    void addEvent(org.doubango.ngn.model.NgnHistoryEvent) -> addEvent
    void removeEvent(org.doubango.ngn.model.NgnHistoryEvent) -> removeEvent
    void removeEvents(java.util.Collection) -> removeEvents
    void removeEvents(org.doubango.ngn.utils.NgnPredicate) -> removeEvents
    void removeEvent(int) -> removeEvent
    void clear() -> clear
org.doubango.ngn.model.NgnHistoryMsrpEvent -> org.doubango.ngn.model.NgnHistoryMsrpEvent:
org.doubango.ngn.model.NgnHistoryMsrpEvent$NgnHistoryChatEvent -> org.doubango.ngn.model.NgnHistoryMsrpEvent$NgnHistoryChatEvent:
org.doubango.ngn.model.NgnHistoryMsrpEvent$NgnHistoryFileTransferEvent -> org.doubango.ngn.model.NgnHistoryMsrpEvent$NgnHistoryFileTransferEvent:
org.doubango.ngn.model.NgnHistorySMSEvent -> org.doubango.ngn.model.NgnHistorySMSEvent:
    java.lang.String mContent -> mContent
    java.lang.String mGMMember -> mGMMember
    java.lang.String mLocalMsgID -> mLocalMsgID
    void setContent(java.lang.String) -> setContent
    java.lang.String getContent() -> getContent
    java.lang.String getGMMember() -> getGMMember
    void setLocalMsgID(java.lang.String) -> setLocalMsgID
    java.lang.String getLocalMsgID() -> getLocalMsgID
org.doubango.ngn.model.NgnHistorySMSEvent$HistoryEventSMSFilter -> org.doubango.ngn.model.NgnHistorySMSEvent$HistoryEventSMSFilter:
    boolean apply(org.doubango.ngn.model.NgnHistoryEvent) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnHistorySMSEvent$HistoryEventSMSIntelligentFilter -> org.doubango.ngn.model.NgnHistorySMSEvent$HistoryEventSMSIntelligentFilter:
    java.util.List mRemoteParties -> mRemoteParties
    void reset() -> reset
    boolean apply(org.doubango.ngn.model.NgnHistoryEvent) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnPhoneNumber -> org.doubango.ngn.model.NgnPhoneNumber:
    java.lang.String mNumber -> mNumber
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType mType -> mType
    java.lang.String mDescription -> mDescription
    java.lang.String getNumber() -> getNumber
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType getPhoneType() -> getPhoneType
    java.lang.String getDescription() -> getDescription
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType fromAndroid2LocalType(int) -> fromAndroid2LocalType
org.doubango.ngn.model.NgnPhoneNumber$PhoneNumberFilterByAnyValid -> org.doubango.ngn.model.NgnPhoneNumber$PhoneNumberFilterByAnyValid:
    boolean apply(org.doubango.ngn.model.NgnPhoneNumber) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnPhoneNumber$PhoneNumberFilterByType -> org.doubango.ngn.model.NgnPhoneNumber$PhoneNumberFilterByType:
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType mType -> mType
    boolean apply(org.doubango.ngn.model.NgnPhoneNumber) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.model.NgnPhoneNumber$PhoneType -> org.doubango.ngn.model.NgnPhoneNumber$PhoneType:
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType CUSTOM -> CUSTOM
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType HOME -> HOME
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType MOBILE -> MOBILE
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType WORK -> WORK
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType FAX_WORK -> FAX_WORK
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType FAX_HOME -> FAX_HOME
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType PAGER -> PAGER
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType OTHER -> OTHER
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType CALLBACK -> CALLBACK
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType CAR -> CAR
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType COMPANY_MAIN -> COMPANY_MAIN
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType ISDN -> ISDN
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType MAIN -> MAIN
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType OTHER_FAX -> OTHER_FAX
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType RADIO -> RADIO
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType TELEX -> TELEX
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType TTY_TDD -> TTY_TDD
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType WORK_MOBILE -> WORK_MOBILE
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType WORK_PAGER -> WORK_PAGER
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType ASSISTANT -> ASSISTANT
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType MMS -> MMS
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType[] values() -> values
    org.doubango.ngn.model.NgnPhoneNumber$PhoneType valueOf(java.lang.String) -> valueOf
org.doubango.ngn.services.INgnBaseService -> org.doubango.ngn.services.INgnBaseService:
    boolean start() -> start
    boolean stop() -> stop
org.doubango.ngn.services.INgnConfigurationService -> org.doubango.ngn.services.INgnConfigurationService:
    boolean putString(java.lang.String,java.lang.String,boolean) -> putString
    boolean putString(java.lang.String,java.lang.String) -> putString
    boolean putInt(java.lang.String,int,boolean) -> putInt
    boolean putInt(java.lang.String,int) -> putInt
    boolean putFloat(java.lang.String,float,boolean) -> putFloat
    boolean putFloat(java.lang.String,float) -> putFloat
    boolean putBoolean(java.lang.String,boolean,boolean) -> putBoolean
    boolean putBoolean(java.lang.String,boolean) -> putBoolean
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    int getInt(java.lang.String,int) -> getInt
    float getFloat(java.lang.String,float) -> getFloat
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    boolean commit() -> commit
org.doubango.ngn.services.INgnContactService -> org.doubango.ngn.services.INgnContactService:
    void setOnBeginLoadCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnBeginLoadCallback
    void setOnNewPhoneNumberCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnNewPhoneNumberCallback
    void setOnEndLoadCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnEndLoadCallback
    boolean load() -> load
    boolean isLoading() -> isLoading
    boolean isReady() -> isReady
    org.doubango.ngn.model.NgnContact newContact(int,java.lang.String) -> newContact
    org.doubango.ngn.model.NgnContact getContactByUri(java.lang.String) -> getContactByUri
    org.doubango.ngn.model.NgnContact getContactByPhoneNumber(java.lang.String) -> getContactByPhoneNumber
    org.doubango.ngn.utils.NgnObservableList getObservableContacts() -> getObservableContacts
org.doubango.ngn.services.INgnHistoryService -> org.doubango.ngn.services.INgnHistoryService:
    boolean load() -> load
    boolean isLoading() -> isLoading
    void addEvent(org.doubango.ngn.model.NgnHistoryEvent) -> addEvent
    void updateEvent(org.doubango.ngn.model.NgnHistoryEvent) -> updateEvent
    void deleteEvent(org.doubango.ngn.model.NgnHistoryEvent) -> deleteEvent
    void deleteEvent(int) -> deleteEvent
    void deleteEvents(org.doubango.ngn.utils.NgnPredicate) -> deleteEvents
    void clear() -> clear
    org.doubango.ngn.utils.NgnObservableList getObservableEvents() -> getObservableEvents
    java.util.List getEvents() -> getEvents
    void setHistoryFile(java.lang.String) -> setHistoryFile
    void reflush() -> reflush
org.doubango.ngn.services.INgnHttpClientService -> org.doubango.ngn.services.INgnHttpClientService:
    java.lang.String get(java.lang.String) -> get
    java.lang.String post(java.lang.String,java.lang.String,java.lang.String) -> post
    java.io.InputStream getBinary(java.lang.String) -> getBinary
org.doubango.ngn.services.INgnNetworkService -> org.doubango.ngn.services.INgnNetworkService:
    java.lang.String getDnsServer(org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE) -> getDnsServer
    java.lang.String getLocalIP(boolean) -> getLocalIP
    boolean isScanning() -> isScanning
    boolean setNetworkEnabledAndRegister() -> setNetworkEnabledAndRegister
    boolean setNetworkEnabled(java.lang.String,boolean,boolean) -> setNetworkEnabled
    boolean setNetworkEnabled(int,boolean,boolean) -> setNetworkEnabled
    boolean forceConnectToNetwork() -> forceConnectToNetwork
    org.doubango.ngn.utils.NgnObservableList getAccessPoints() -> getAccessPoints
    int configure(org.doubango.ngn.model.NgnAccessPoint,java.lang.String,boolean) -> configure
    boolean scan() -> scan
    boolean acquire() -> acquire
    boolean release() -> release
    boolean isNetworkEnable() -> isNetworkEnable
    void setNetworkEnable(boolean) -> setNetworkEnable
org.doubango.ngn.services.INgnSipService -> org.doubango.ngn.services.INgnSipService:
    java.lang.String getDefaultIdentity() -> getDefaultIdentity
    void setDefaultIdentity(java.lang.String) -> setDefaultIdentity
    org.doubango.ngn.sip.NgnSipStack getSipStack() -> getSipStack
    boolean isRegistered() -> isRegistered
    org.doubango.ngn.sip.NgnSipSession$ConnectionState getRegistrationState() -> getRegistrationState
    boolean isXcapEnabled() -> isXcapEnabled
    boolean isPublicationEnabled() -> isPublicationEnabled
    boolean isSubscriptionEnabled() -> isSubscriptionEnabled
    boolean isSubscriptionToRLSEnabled() -> isSubscriptionToRLSEnabled
    int getCodecs() -> getCodecs
    void setCodecs(int) -> setCodecs
    byte[] getSubRLSContent() -> getSubRLSContent
    byte[] getSubRegContent() -> getSubRegContent
    byte[] getSubMwiContent() -> getSubMwiContent
    byte[] getSubWinfoContent() -> getSubWinfoContent
    boolean stopStack() -> stopStack
    boolean register(android.content.Context) -> register
    boolean unRegister() -> unRegister
    boolean PresencePublish() -> PresencePublish
    boolean PresencePublish(org.doubango.ngn.sip.NgnPresenceStatus) -> PresencePublish
    boolean ADHOC_Start(android.content.Context) -> ADHOC_Start
    boolean ADHOC_Stop() -> ADHOC_Stop
    boolean ADHOC_SetPcscfHost(java.lang.String) -> ADHOC_SetPcscfHost
org.doubango.ngn.services.INgnSoundService -> org.doubango.ngn.services.INgnSoundService:
    void startDTMF(int) -> startDTMF
    void stopDTMF() -> stopDTMF
    void startRingTone() -> startRingTone
    void stopRingTone() -> stopRingTone
    void startRingBackTone() -> startRingBackTone
    void stopRingBackTone() -> stopRingBackTone
    void startNewEvent() -> startNewEvent
    void stopNewEvent() -> stopNewEvent
    void startConnectionChanged(boolean) -> startConnectionChanged
    void stopConnectionChanged(boolean) -> stopConnectionChanged
org.doubango.ngn.services.INgnStorageService -> org.doubango.ngn.services.INgnStorageService:
    java.lang.String getCurrentDir() -> getCurrentDir
    java.lang.String getContentShareDir() -> getContentShareDir
org.doubango.ngn.services.impl.NgnBaseService -> org.doubango.ngn.services.impl.NgnBaseService:
org.doubango.ngn.services.impl.NgnConfigurationService -> org.doubango.ngn.services.impl.NgnConfigurationService:
    java.lang.String TAG -> TAG
    android.content.SharedPreferences mSettings -> mSettings
    android.content.SharedPreferences$Editor mSettingsEditor -> mSettingsEditor
    boolean start() -> start
    boolean stop() -> stop
    boolean putString(java.lang.String,java.lang.String,boolean) -> putString
    boolean putString(java.lang.String,java.lang.String) -> putString
    boolean putInt(java.lang.String,int,boolean) -> putInt
    boolean putInt(java.lang.String,int) -> putInt
    boolean putFloat(java.lang.String,float,boolean) -> putFloat
    boolean putFloat(java.lang.String,float) -> putFloat
    boolean putBoolean(java.lang.String,boolean,boolean) -> putBoolean
    boolean putBoolean(java.lang.String,boolean) -> putBoolean
    java.lang.String getString(java.lang.String,java.lang.String) -> getString
    int getInt(java.lang.String,int) -> getInt
    float getFloat(java.lang.String,float) -> getFloat
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
    boolean commit() -> commit
org.doubango.ngn.services.impl.NgnContactService -> org.doubango.ngn.services.impl.NgnContactService:
    java.lang.String TAG -> TAG
    java.lang.String PARAM_ARG_CONTACT -> PARAM_ARG_CONTACT
    org.doubango.ngn.utils.NgnObservableList mContacts -> mContacts
    boolean mLoading -> mLoading
    boolean mReady -> mReady
    android.os.Looper mLocalContactObserverLooper -> mLocalContactObserverLooper
    android.database.ContentObserver mLocalContactObserver -> mLocalContactObserver
    org.doubango.ngn.utils.NgnCallbackFunc mOnBeginLoadCallback -> mOnBeginLoadCallback
    org.doubango.ngn.utils.NgnCallbackFunc mOnNewPhoneNumberCallback -> mOnNewPhoneNumberCallback
    org.doubango.ngn.utils.NgnCallbackFunc mOnEndLoadCallback -> mOnEndLoadCallback
    boolean start() -> start
    boolean stop() -> stop
    void setOnBeginLoadCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnBeginLoadCallback
    void setOnNewPhoneNumberCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnNewPhoneNumberCallback
    void setOnEndLoadCallback(org.doubango.ngn.utils.NgnCallbackFunc) -> setOnEndLoadCallback
    boolean load() -> load
    boolean load2() -> load2
    boolean isLoading() -> isLoading
    boolean isReady() -> isReady
    org.doubango.ngn.utils.NgnObservableList getObservableContacts() -> getObservableContacts
    org.doubango.ngn.model.NgnContact newContact(int,java.lang.String) -> newContact
    org.doubango.ngn.model.NgnContact getContactByUri(java.lang.String) -> getContactByUri
    org.doubango.ngn.model.NgnContact getContactByPhoneNumber(java.lang.String) -> getContactByPhoneNumber
    java.lang.String access$0() -> access$0
org.doubango.ngn.services.impl.NgnContactService$1 -> org.doubango.ngn.services.impl.NgnContactService$1:
    org.doubango.ngn.services.impl.NgnContactService this$0 -> this$0
    void run() -> run
    org.doubango.ngn.services.impl.NgnContactService access$0(org.doubango.ngn.services.impl.NgnContactService$1) -> access$0
org.doubango.ngn.services.impl.NgnContactService$1$1 -> org.doubango.ngn.services.impl.NgnContactService$1$1:
    org.doubango.ngn.services.impl.NgnContactService$1 this$1 -> this$1
    android.os.Handler val$handler -> val$handler
    void run() -> run
    org.doubango.ngn.services.impl.NgnContactService$1 access$0(org.doubango.ngn.services.impl.NgnContactService$1$1) -> access$0
org.doubango.ngn.services.impl.NgnContactService$1$1$1 -> org.doubango.ngn.services.impl.NgnContactService$1$1$1:
    org.doubango.ngn.services.impl.NgnContactService$1$1 this$2 -> this$2
    void onChange(boolean) -> onChange
org.doubango.ngn.services.impl.NgnContactService$ContactFilterById -> org.doubango.ngn.services.impl.NgnContactService$ContactFilterById:
    int mId -> mId
    boolean apply(org.doubango.ngn.model.NgnContact) -> apply
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.services.impl.NgnHistoryService -> org.doubango.ngn.services.impl.NgnHistoryService:
    java.lang.String TAG -> TAG
    java.lang.String HISTORY_FILE -> HISTORY_FILE
    java.io.File mHistoryFile -> mHistoryFile
    org.doubango.ngn.model.NgnHistoryList mEventsList -> mEventsList
    org.simpleframework.xml.Serializer mSerializer -> mSerializer
    boolean mLoadingHistory -> mLoadingHistory
    boolean start() -> start
    boolean stop() -> stop
    boolean load() -> load
    boolean isLoading() -> isLoading
    void addEvent(org.doubango.ngn.model.NgnHistoryEvent) -> addEvent
    void updateEvent(org.doubango.ngn.model.NgnHistoryEvent) -> updateEvent
    void deleteEvent(org.doubango.ngn.model.NgnHistoryEvent) -> deleteEvent
    void deleteEvent(int) -> deleteEvent
    void deleteEvents(org.doubango.ngn.utils.NgnPredicate) -> deleteEvents
    void clear() -> clear
    java.util.List getEvents() -> getEvents
    org.doubango.ngn.utils.NgnObservableList getObservableEvents() -> getObservableEvents
    boolean compute() -> compute
    void setHistoryFile(java.lang.String) -> setHistoryFile
    void reflush() -> reflush
    boolean access$0(org.doubango.ngn.services.impl.NgnHistoryService) -> access$0
org.doubango.ngn.services.impl.NgnHistoryService$1 -> org.doubango.ngn.services.impl.NgnHistoryService$1:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHistoryService$2 -> org.doubango.ngn.services.impl.NgnHistoryService$2:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHistoryService$3 -> org.doubango.ngn.services.impl.NgnHistoryService$3:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHistoryService$4 -> org.doubango.ngn.services.impl.NgnHistoryService$4:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHistoryService$5 -> org.doubango.ngn.services.impl.NgnHistoryService$5:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHistoryService$6 -> org.doubango.ngn.services.impl.NgnHistoryService$6:
    org.doubango.ngn.services.impl.NgnHistoryService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnHttpClientService -> org.doubango.ngn.services.impl.NgnHttpClientService:
    java.lang.String TAG -> TAG
    int sTimeoutConnection -> sTimeoutConnection
    int sTimeoutSocket -> sTimeoutSocket
    org.apache.http.client.HttpClient mClient -> mClient
    boolean start() -> start
    boolean stop() -> stop
    java.lang.String get(java.lang.String) -> get
    java.lang.String post(java.lang.String,java.lang.String,java.lang.String) -> post
    java.io.InputStream getBinary(java.lang.String) -> getBinary
    java.lang.String getResponseAsString(org.apache.http.HttpResponse) -> getResponseAsString
org.doubango.ngn.services.impl.NgnNetworkService -> org.doubango.ngn.services.impl.NgnNetworkService:
    java.lang.String TAG -> TAG
    java.lang.String OPENVPN_INTERFACE_NAME -> OPENVPN_INTERFACE_NAME
    java.lang.String WLAN_INTERFACE_NAME -> WLAN_INTERFACE_NAME
    java.lang.String USB_INTERFACE_NAME -> USB_INTERFACE_NAME
    android.net.wifi.WifiManager mWifiManager -> mWifiManager
    android.net.wifi.WifiManager$WifiLock mWifiLock -> mWifiLock
    java.lang.String mConnetedSSID -> mConnetedSSID
    boolean mAcquired -> mAcquired
    boolean mStarted -> mStarted
    boolean mScanning -> mScanning
    org.doubango.ngn.utils.NgnObservableList mAccessPoints -> mAccessPoints
    android.content.BroadcastReceiver mNetworkWatcher -> mNetworkWatcher
    int WifiManager_WIFI_MODE -> WifiManager_WIFI_MODE
    int ConnectivityManager_TYPE_WIMAX -> ConnectivityManager_TYPE_WIMAX
    java.lang.reflect.Method NetworkInterface_isUp -> NetworkInterface_isUp
    boolean isNetworkEnable -> isNetworkEnable
    int[] sWifiSignalValues -> sWifiSignalValues
    int[] $SWITCH_TABLE$org$doubango$ngn$services$impl$NgnNetworkService$DNS_TYPE -> $SWITCH_TABLE$org$doubango$ngn$services$impl$NgnNetworkService$DNS_TYPE
    boolean start() -> start
    boolean stop() -> stop
    java.lang.String getDnsServer(org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE) -> getDnsServer
    java.lang.String getLocalIP(boolean) -> getLocalIP
    java.lang.String getLocalIP_lc(java.util.HashMap) -> getLocalIP_lc
    java.lang.String getLocalIP_hx(java.util.HashMap) -> getLocalIP_hx
    java.lang.String getLocalIP_hx_adhoc(java.util.HashMap) -> getLocalIP_hx_adhoc
    boolean isScanning() -> isScanning
    boolean setNetworkEnabledAndRegister() -> setNetworkEnabledAndRegister
    boolean setNetworkEnabled(java.lang.String,boolean,boolean) -> setNetworkEnabled
    boolean setNetworkEnabled(int,boolean,boolean) -> setNetworkEnabled
    boolean forceConnectToNetwork() -> forceConnectToNetwork
    org.doubango.ngn.utils.NgnObservableList getAccessPoints() -> getAccessPoints
    int configure(org.doubango.ngn.model.NgnAccessPoint,java.lang.String,boolean) -> configure
    boolean scan() -> scan
    boolean acquire() -> acquire
    boolean release() -> release
    int getNetworkIdBySSID(java.lang.String) -> getNetworkIdBySSID
    android.net.wifi.WifiConfiguration getWifiConfBySSID(java.lang.String) -> getWifiConfBySSID
    org.doubango.ngn.model.NgnAccessPoint getAccessPointBySSID(java.lang.String) -> getAccessPointBySSID
    void loadConfiguredNetworks() -> loadConfiguredNetworks
    void handleNetworkEvent(android.content.Context,android.content.Intent) -> handleNetworkEvent
    void updateConnectionState() -> updateConnectionState
    void triggerSipRegistration() -> triggerSipRegistration
    boolean isNetworkEnable() -> isNetworkEnable
    void setNetworkEnable(boolean) -> setNetworkEnable
    int[] $SWITCH_TABLE$org$doubango$ngn$services$impl$NgnNetworkService$DNS_TYPE() -> $SWITCH_TABLE$org$doubango$ngn$services$impl$NgnNetworkService$DNS_TYPE
    void access$1(org.doubango.ngn.services.impl.NgnNetworkService,android.content.Context,android.content.Intent) -> access$1
org.doubango.ngn.services.impl.NgnNetworkService$1 -> org.doubango.ngn.services.impl.NgnNetworkService$1:
    org.doubango.ngn.services.impl.NgnNetworkService this$0 -> this$0
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE -> org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE:
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE DNS_1 -> DNS_1
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE DNS_2 -> DNS_2
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE DNS_3 -> DNS_3
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE DNS_4 -> DNS_4
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE[] values() -> values
    org.doubango.ngn.services.impl.NgnNetworkService$DNS_TYPE valueOf(java.lang.String) -> valueOf
org.doubango.ngn.services.impl.NgnSipService -> org.doubango.ngn.services.impl.NgnSipService:
    java.lang.String TAG -> TAG
    org.doubango.ngn.sip.NgnRegistrationSession mRegSession -> mRegSession
    org.doubango.ngn.sip.NgnSipStack mSipStack -> mSipStack
    org.doubango.tinyWRAP.DDebugCallback mDebugCallback -> mDebugCallback
    org.doubango.ngn.services.impl.NgnSipService$MySipCallback mSipCallback -> mSipCallback
    org.doubango.ngn.sip.NgnSipPrefrences mPreferences -> mPreferences
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    org.doubango.ngn.services.INgnNetworkService mNetworkService -> mNetworkService
    android.os.ConditionVariable mCondHackAoR -> mCondHackAoR
    int codes -> codes
    boolean start() -> start
    boolean stop() -> stop
    java.lang.String getDefaultIdentity() -> getDefaultIdentity
    void setDefaultIdentity(java.lang.String) -> setDefaultIdentity
    org.doubango.ngn.sip.NgnSipStack getSipStack() -> getSipStack
    boolean isRegistered() -> isRegistered
    org.doubango.ngn.sip.NgnSipSession$ConnectionState getRegistrationState() -> getRegistrationState
    boolean isXcapEnabled() -> isXcapEnabled
    boolean isPublicationEnabled() -> isPublicationEnabled
    boolean isSubscriptionEnabled() -> isSubscriptionEnabled
    boolean isSubscriptionToRLSEnabled() -> isSubscriptionToRLSEnabled
    int getCodecs() -> getCodecs
    void setCodecs(int) -> setCodecs
    byte[] getSubRLSContent() -> getSubRLSContent
    byte[] getSubRegContent() -> getSubRegContent
    byte[] getSubMwiContent() -> getSubMwiContent
    byte[] getSubWinfoContent() -> getSubWinfoContent
    boolean stopStack() -> stopStack
    boolean ADHOC_Stop() -> ADHOC_Stop
    boolean ADHOC_SetPcscfHost(java.lang.String) -> ADHOC_SetPcscfHost
    boolean ADHOC_Start(android.content.Context) -> ADHOC_Start
    boolean register(android.content.Context) -> register
    boolean unRegister() -> unRegister
    boolean PresencePublish() -> PresencePublish
    boolean PresencePublish(org.doubango.ngn.sip.NgnPresenceStatus) -> PresencePublish
    void broadcastRegistrationEvent(org.doubango.ngn.events.NgnRegistrationEventArgs) -> broadcastRegistrationEvent
    void broadcastInviteEvent(org.doubango.ngn.events.NgnInviteEventArgs,short) -> broadcastInviteEvent
    void broadcastTransferRequestEvent(org.doubango.ngn.events.NgnInviteEventArgs,java.lang.String) -> broadcastTransferRequestEvent
    void broadcastInviteEvent(org.doubango.ngn.events.NgnInviteEventArgs) -> broadcastInviteEvent
    void broadcastMessagingEvent(org.doubango.ngn.events.NgnMessagingEventArgs,java.lang.String,java.lang.String) -> broadcastMessagingEvent
    void broadcastPublicationEvent(org.doubango.ngn.events.NgnPublicationEventArgs) -> broadcastPublicationEvent
    void broadcastSubscriptionEvent(org.doubango.ngn.events.NgnSubscriptionEventArgs) -> broadcastSubscriptionEvent
    java.lang.String access$0() -> access$0
    org.doubango.ngn.sip.NgnRegistrationSession access$1(org.doubango.ngn.services.impl.NgnSipService) -> access$1
    void access$2(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnRegistrationEventArgs) -> access$2
    void access$3(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnInviteEventArgs,short) -> access$3
    void access$4(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnPublicationEventArgs) -> access$4
    void access$5(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnSubscriptionEventArgs) -> access$5
    org.doubango.ngn.sip.NgnSipStack access$6(org.doubango.ngn.services.impl.NgnSipService) -> access$6
    void access$7(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnInviteEventArgs) -> access$7
    void access$8(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnInviteEventArgs,java.lang.String) -> access$8
    void access$9(org.doubango.ngn.services.impl.NgnSipService,org.doubango.ngn.events.NgnMessagingEventArgs,java.lang.String,java.lang.String) -> access$9
    org.doubango.ngn.services.INgnConfigurationService access$10() -> access$10
org.doubango.ngn.services.impl.NgnSipService$1 -> org.doubango.ngn.services.impl.NgnSipService$1:
    org.doubango.ngn.services.impl.NgnSipService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnSipService$2 -> org.doubango.ngn.services.impl.NgnSipService$2:
    org.doubango.ngn.services.impl.NgnSipService this$0 -> this$0
    void run() -> run
org.doubango.ngn.services.impl.NgnSipService$MySipCallback -> org.doubango.ngn.services.impl.NgnSipService$MySipCallback:
    org.doubango.ngn.services.impl.NgnSipService mSipService -> mSipService
    java.util.HashMap mLongInfoMap -> mLongInfoMap
    int mIndex -> mIndex
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_invite_event_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_invite_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_message_event_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_message_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_subscribe_event_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_subscribe_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_options_event_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_options_event_type_t
    int OnDialogEvent(org.doubango.tinyWRAP.DialogEvent) -> OnDialogEvent
    int OnInviteEvent(org.doubango.tinyWRAP.InviteEvent) -> OnInviteEvent
    int OnMessagingEvent(org.doubango.tinyWRAP.MessagingEvent) -> OnMessagingEvent
    int OnStackEvent(org.doubango.tinyWRAP.StackEvent) -> OnStackEvent
    int OnSubscriptionEvent(org.doubango.tinyWRAP.SubscriptionEvent) -> OnSubscriptionEvent
    int OnOptionsEvent(org.doubango.tinyWRAP.OptionsEvent) -> OnOptionsEvent
    int OnRegistrationEvent(org.doubango.tinyWRAP.RegistrationEvent) -> OnRegistrationEvent
    org.doubango.ngn.services.impl.NgnSipService access$0(org.doubango.ngn.services.impl.NgnSipService$MySipCallback) -> access$0
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$twrap_media_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_invite_event_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_invite_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_message_event_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_message_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_subscribe_event_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_subscribe_event_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_options_event_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tsip_options_event_type_t
org.doubango.ngn.services.impl.NgnSipService$MySipCallback$1 -> org.doubango.ngn.services.impl.NgnSipService$MySipCallback$1:
    org.doubango.ngn.services.impl.NgnSipService$MySipCallback this$1 -> this$1
    void run() -> run
org.doubango.ngn.services.impl.NgnSoundService -> org.doubango.ngn.services.impl.NgnSoundService:
    java.lang.String TAG -> TAG
    int TONE_RELATIVE_VOLUME -> TONE_RELATIVE_VOLUME
    android.media.ToneGenerator mRingbackPlayer -> mRingbackPlayer
    android.media.ToneGenerator mDTMFPlayer -> mDTMFPlayer
    android.media.Ringtone mRingtonePlayer -> mRingtonePlayer
    boolean start() -> start
    boolean stop() -> stop
    void startDTMF(int) -> startDTMF
    void stopDTMF() -> stopDTMF
    void startRingTone() -> startRingTone
    void stopRingTone() -> stopRingTone
    void startRingBackTone() -> startRingBackTone
    void stopRingBackTone() -> stopRingBackTone
    void startNewEvent() -> startNewEvent
    void stopNewEvent() -> stopNewEvent
    void startConnectionChanged(boolean) -> startConnectionChanged
    void stopConnectionChanged(boolean) -> stopConnectionChanged
org.doubango.ngn.services.impl.NgnStorageService -> org.doubango.ngn.services.impl.NgnStorageService:
    java.lang.String TAG -> TAG
    java.lang.String mCurrentDir -> mCurrentDir
    java.lang.String mContentShareDir -> mContentShareDir
    boolean start() -> start
    boolean stop() -> stop
    java.lang.String getCurrentDir() -> getCurrentDir
    java.lang.String getContentShareDir() -> getContentShareDir
org.doubango.ngn.sip.NgnAVSession -> org.doubango.ngn.sip.NgnAVSession:
    java.lang.String TAG -> TAG
    org.doubango.ngn.sip.NgnAVSession$NgnT140Callback mT140Callback -> mT140Callback
    org.doubango.tinyWRAP.CallSession mSession -> mSession
    boolean mConsumersAndProducersInitialzed -> mConsumersAndProducersInitialzed
    org.doubango.ngn.media.NgnProxyVideoConsumer mVideoConsumer -> mVideoConsumer
    org.doubango.ngn.media.NgnProxyAudioConsumer mAudioConsumer -> mAudioConsumer
    org.doubango.ngn.media.NgnProxyVideoProducer mVideoProducer -> mVideoProducer
    org.doubango.ngn.media.NgnProxyVideoProducer_surface mVideoProducer_surface -> mVideoProducer_surface
    org.doubango.ngn.media.NgnProxyAudioProducer mAudioProducer -> mAudioProducer
    android.content.Context mContext -> mContext
    org.doubango.ngn.model.NgnHistoryAVCallEvent mHistoryEvent -> mHistoryEvent
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    boolean mSendingVideo -> mSendingVideo
    boolean mMuteOn -> mMuteOn
    boolean mSpeakerOn -> mSpeakerOn
    boolean mSendFrameThread -> mSendFrameThread
    int sessionType -> sessionType
    org.doubango.ngn.utils.NgnObservableHashMap sSessions -> sSessions
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState
    org.doubango.ngn.sip.NgnAVSession takeIncomingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.tinyWRAP.CallSession,org.doubango.tinyWRAP.twrap_media_type_t,org.doubango.tinyWRAP.SipMessage) -> takeIncomingSession
    boolean handleMediaUpdate(long,org.doubango.tinyWRAP.twrap_media_type_t) -> handleMediaUpdate
    org.doubango.ngn.sip.NgnAVSession createOutgoingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.ngn.media.NgnMediaType) -> createOutgoingSession
    void releaseSession(org.doubango.ngn.sip.NgnAVSession) -> releaseSession
    org.doubango.ngn.utils.NgnObservableHashMap getSessions() -> getSessions
    org.doubango.ngn.sip.NgnAVSession getSession(long) -> getSession
    org.doubango.ngn.sip.NgnAVSession getSession(org.doubango.ngn.utils.NgnPredicate) -> getSession
    int getSize() -> getSize
    int getSize(org.doubango.ngn.utils.NgnPredicate) -> getSize
    boolean hasSession(long) -> hasSession
    boolean hasActiveSession() -> hasActiveSession
    org.doubango.ngn.media.NgnProxyVideoProducer getmVideoProducer() -> getmVideoProducer
    org.doubango.ngn.sip.NgnAVSession getFirstActiveCallAndNot(long) -> getFirstActiveCallAndNot
    boolean makeAudioCall(java.lang.String,org.doubango.ngn.sip.NgnSipStack,int) -> makeAudioCall
    boolean makeAudioVideoCall(java.lang.String,org.doubango.ngn.sip.NgnSipStack,int) -> makeAudioVideoCall
    boolean makeCall(java.lang.String,int) -> makeCall
    boolean makeVideoSharingCall(java.lang.String) -> makeVideoSharingCall
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    org.doubango.ngn.model.NgnHistoryEvent getHistoryEvent() -> getHistoryEvent
    boolean initializeConsumersAndProducers() -> initializeConsumersAndProducers
    void deInitializeMediaSession() -> deInitializeMediaSession
    void updateEchoTail() -> updateEchoTail
    android.content.Context getContext() -> getContext
    void setContext(android.content.Context) -> setContext
    android.view.View startVideoConsumerPreview() -> startVideoConsumerPreview
    android.view.View startVideoProducerPreview() -> startVideoProducerPreview
    boolean isSendingVideo() -> isSendingVideo
    void setSendingVideo(boolean) -> setSendingVideo
    void setmSendVIdeo(boolean) -> setmSendVIdeo
    void pushBlankPacket() -> pushBlankPacket
    void toggleCamera() -> toggleCamera
    boolean isFrontFacingCameraEnabled() -> isFrontFacingCameraEnabled
    int compensCamRotation(boolean) -> compensCamRotation
    int camRotation(boolean) -> camRotation
    void setRotation(int) -> setRotation
    boolean setProducerFlipped(boolean) -> setProducerFlipped
    boolean setConsumerFlipped(boolean) -> setConsumerFlipped
    boolean isSecure() -> isSecure
    boolean setAECEnabled(boolean) -> setAECEnabled
    void setSpeakerphoneOn(boolean) -> setSpeakerphoneOn
    void toggleSpeakerphone() -> toggleSpeakerphone
    boolean isSpeakerOn() -> isSpeakerOn
    boolean isMicrophoneMute() -> isMicrophoneMute
    void setMicrophoneMute(boolean) -> setMicrophoneMute
    boolean onVolumeChanged(boolean) -> onVolumeChanged
    void setMode(org.doubango.ngn.sip.NgnInviteSession$InviteState) -> setMode
    void setState(org.doubango.ngn.sip.NgnInviteSession$InviteState) -> setState
    long getStartTime() -> getStartTime
    boolean acceptCall() -> acceptCall
    boolean hangUpCall() -> hangUpCall
    boolean holdCall() -> holdCall
    boolean resumeCall() -> resumeCall
    boolean transferCall(java.lang.String) -> transferCall
    boolean acceptCallTransfer() -> acceptCallTransfer
    boolean rejectCallTransfer() -> rejectCallTransfer
    boolean isLocalHeld() -> isLocalHeld
    void setLocalHold(boolean) -> setLocalHold
    boolean isRemoteHeld() -> isRemoteHeld
    void setRemoteHold(boolean) -> setRemoteHold
    boolean isOnMute() -> isOnMute
    void setOnResetJB() -> setOnResetJB
    void setOnMute(boolean) -> setOnMute
    void setOnPause(boolean) -> setOnPause
    void setConsumerOnPause(boolean) -> setConsumerOnPause
    boolean sendDTMF(int) -> sendDTMF
    boolean sendT140Data(org.doubango.tinyWRAP.tmedia_t140_data_type_t,java.lang.String) -> sendT140Data
    boolean sendT140Data(java.lang.String) -> sendT140Data
    boolean sendT140Data(org.doubango.tinyWRAP.tmedia_t140_data_type_t) -> sendT140Data
    boolean isGroupAudioCall() -> isGroupAudioCall
    boolean isGroupVideoCall() -> isGroupVideoCall
    void setSessionType(java.lang.String) -> setSessionType
    int getSessionType() -> getSessionType
    void setSessionType(int) -> setSessionType
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState
org.doubango.ngn.sip.NgnAVSession$NgnT140Callback -> org.doubango.ngn.sip.NgnAVSession$NgnT140Callback:
    org.doubango.ngn.sip.NgnAVSession mAVSession -> mAVSession
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmedia_t140_data_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmedia_t140_data_type_t
    int ondata(org.doubango.tinyWRAP.T140CallbackData) -> ondata
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmedia_t140_data_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmedia_t140_data_type_t
org.doubango.ngn.sip.NgnInfoSession -> org.doubango.ngn.sip.NgnInfoSession:
    org.doubango.tinyWRAP.InfoSession mSession -> mSession
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
org.doubango.ngn.sip.NgnInviteSession -> org.doubango.ngn.sip.NgnInviteSession:
    org.doubango.ngn.media.NgnMediaType mMediaType -> mMediaType
    org.doubango.tinyWRAP.MediaSessionMgr mMediaSessionMgr -> mMediaSessionMgr
    org.doubango.ngn.sip.NgnInviteSession$InviteState mState -> mState
    boolean mRemoteHold -> mRemoteHold
    boolean mLocalHold -> mLocalHold
    boolean mEventAdded -> mEventAdded
    boolean mEventIncoming -> mEventIncoming
    org.doubango.ngn.model.NgnDeviceInfo mRemoteDeviceInfo -> mRemoteDeviceInfo
    org.doubango.ngn.media.NgnMediaType mOldMediaType -> mOldMediaType
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState
    org.doubango.ngn.media.NgnMediaType getmOldMediaType() -> getmOldMediaType
    void setmOldMediaType(org.doubango.ngn.media.NgnMediaType) -> setmOldMediaType
    org.doubango.ngn.model.NgnHistoryEvent getHistoryEvent() -> getHistoryEvent
    org.doubango.ngn.media.NgnMediaType getMediaType() -> getMediaType
    org.doubango.ngn.sip.NgnInviteSession$InviteState getState() -> getState
    void setState(org.doubango.ngn.sip.NgnInviteSession$InviteState) -> setState
    boolean isActive() -> isActive
    boolean isLocalHeld() -> isLocalHeld
    void setLocalHold(boolean) -> setLocalHold
    boolean isRemoteHeld() -> isRemoteHeld
    void setRemoteHold(boolean) -> setRemoteHold
    org.doubango.ngn.model.NgnDeviceInfo getRemoteDeviceInfo() -> getRemoteDeviceInfo
    boolean sendInfo(java.nio.ByteBuffer,java.lang.String) -> sendInfo
    boolean sendInfo(java.lang.String,java.lang.String) -> sendInfo
    org.doubango.tinyWRAP.MediaSessionMgr getMediaSessionMgr() -> getMediaSessionMgr
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState() -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnInviteSession$InviteState
org.doubango.ngn.sip.NgnInviteSession$InviteState -> org.doubango.ngn.sip.NgnInviteSession$InviteState:
    org.doubango.ngn.sip.NgnInviteSession$InviteState NONE -> NONE
    org.doubango.ngn.sip.NgnInviteSession$InviteState INCOMING -> INCOMING
    org.doubango.ngn.sip.NgnInviteSession$InviteState INPROGRESS -> INPROGRESS
    org.doubango.ngn.sip.NgnInviteSession$InviteState REMOTE_RINGING -> REMOTE_RINGING
    org.doubango.ngn.sip.NgnInviteSession$InviteState EARLY_MEDIA -> EARLY_MEDIA
    org.doubango.ngn.sip.NgnInviteSession$InviteState INCALL -> INCALL
    org.doubango.ngn.sip.NgnInviteSession$InviteState TERMINATING -> TERMINATING
    org.doubango.ngn.sip.NgnInviteSession$InviteState TERMINATED -> TERMINATED
    org.doubango.ngn.sip.NgnInviteSession$InviteState[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.sip.NgnInviteSession$InviteState[] values() -> values
    org.doubango.ngn.sip.NgnInviteSession$InviteState valueOf(java.lang.String) -> valueOf
org.doubango.ngn.sip.NgnMessagingSession -> org.doubango.ngn.sip.NgnMessagingSession:
    java.lang.String TAG -> TAG
    org.doubango.tinyWRAP.MessagingSession mSession -> mSession
    int SMS_MR -> SMS_MR
    org.doubango.ngn.utils.NgnObservableHashMap sSessions -> sSessions
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    org.doubango.ngn.sip.NgnMessagingSession takeIncomingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.tinyWRAP.MessagingSession,org.doubango.tinyWRAP.SipMessage) -> takeIncomingSession
    org.doubango.ngn.sip.NgnMessagingSession createOutgoingSession(org.doubango.ngn.sip.NgnSipStack,java.lang.String) -> createOutgoingSession
    void releaseSession(org.doubango.ngn.sip.NgnMessagingSession) -> releaseSession
    void releaseSession(long) -> releaseSession
    org.doubango.ngn.sip.NgnMessagingSession getSession(long) -> getSession
    int getSize() -> getSize
    boolean hasSession(long) -> hasSession
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    boolean SendBinaryMessage(java.lang.String,java.lang.String) -> SendBinaryMessage
    boolean sendTextMessage(java.lang.String,java.lang.String) -> sendTextMessage
    boolean sendTextMessage(java.lang.String) -> sendTextMessage
    boolean sendGPSMessage(java.lang.String) -> sendGPSMessage
    boolean sendGPSMessage_data(java.lang.String) -> sendGPSMessage_data
    boolean sendExTextMessage(java.lang.String,java.lang.String) -> sendExTextMessage
    boolean sendExTextMessage(java.lang.String) -> sendExTextMessage
    boolean sendExWithListTextMessage(java.lang.String,java.lang.String) -> sendExWithListTextMessage
    boolean sendExWithListTextMessage(java.lang.String) -> sendExWithListTextMessage
    boolean accept() -> accept
    boolean reject() -> reject
org.doubango.ngn.sip.NgnMsrpSession -> org.doubango.ngn.sip.NgnMsrpSession:
    java.lang.String TAG -> TAG
    java.lang.String CHAT_ACCEPT_TYPES -> CHAT_ACCEPT_TYPES
    java.lang.String CHAT_ACCEPT_WRAPPED_TYPES -> CHAT_ACCEPT_WRAPPED_TYPES
    java.lang.String FILE_ACCEPT_TYPES -> FILE_ACCEPT_TYPES
    java.lang.String FILE_ACCEPT_WRAPPED_TYPES -> FILE_ACCEPT_WRAPPED_TYPES
    int CHUNK_DURATION -> CHUNK_DURATION
    android.content.Context mContext -> mContext
    org.doubango.tinyWRAP.MsrpSession mSession -> mSession
    org.doubango.ngn.sip.NgnMsrpSession$NgnMsrpCallback mCallback -> mCallback
    long[] mStart -> mStart
    long[] mEnd -> mEnd
    long[] mTotal -> mTotal
    java.lang.String mFilePath -> mFilePath
    java.lang.String mFileName -> mFileName
    java.lang.String mFileType -> mFileType
    boolean mFailureReport -> mFailureReport
    boolean mSuccessReport -> mSuccessReport
    boolean mOmaFinalDeliveryReport -> mOmaFinalDeliveryReport
    java.io.OutputStream mOutFileStream -> mOutFileStream
    java.util.List mPendingMessages -> mPendingMessages
    org.doubango.ngn.model.NgnHistoryMsrpEvent mHistoryEvent -> mHistoryEvent
    java.lang.String msg_type -> msg_type
    org.doubango.ngn.utils.NgnObservableHashMap sSessions -> sSessions
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
    java.lang.String getMsgType() -> getMsgType
    void setMsgType(java.lang.String) -> setMsgType
    org.doubango.ngn.utils.NgnObservableHashMap getSessions() -> getSessions
    org.doubango.ngn.sip.NgnMsrpSession takeIncomingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.tinyWRAP.MsrpSession,org.doubango.tinyWRAP.SipMessage) -> takeIncomingSession
    org.doubango.ngn.sip.NgnMsrpSession createIncomingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.tinyWRAP.MsrpSession,org.doubango.ngn.media.NgnMediaType,java.lang.String) -> createIncomingSession
    org.doubango.ngn.sip.NgnMsrpSession createOutgoingSession(org.doubango.ngn.sip.NgnSipStack,org.doubango.ngn.media.NgnMediaType,java.lang.String) -> createOutgoingSession
    void releaseSession(org.doubango.ngn.sip.NgnMsrpSession) -> releaseSession
    void releaseSession(long) -> releaseSession
    org.doubango.ngn.sip.NgnMsrpSession getSession(long) -> getSession
    org.doubango.ngn.sip.NgnMsrpSession getSession(org.doubango.ngn.utils.NgnPredicate) -> getSession
    int getSize() -> getSize
    int getSize(org.doubango.ngn.utils.NgnPredicate) -> getSize
    boolean hasActiveSession(org.doubango.ngn.utils.NgnPredicate) -> hasActiveSession
    boolean hasSession(long) -> hasSession
    void finalize() -> finalize
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    org.doubango.ngn.model.NgnHistoryEvent getHistoryEvent() -> getHistoryEvent
    void setContext(android.content.Context) -> setContext
    android.content.Context getContext(android.content.Context) -> getContext
    long getStart() -> getStart
    long getEnd() -> getEnd
    long getTotal() -> getTotal
    java.lang.String getFileName() -> getFileName
    java.lang.String getFilePath() -> getFilePath
    boolean isFailureReport() -> isFailureReport
    void setFailureReport(boolean) -> setFailureReport
    boolean isSuccessReport() -> isSuccessReport
    void setSuccessReport(boolean) -> setSuccessReport
    boolean isOmaFinalDeliveryReport() -> isOmaFinalDeliveryReport
    void setOmaFinalDeliveryReport(boolean) -> setOmaFinalDeliveryReport
    boolean accept() -> accept
    boolean hangUp() -> hangUp
    boolean sendFile(java.lang.String) -> sendFile
    boolean SendMessage(java.lang.String) -> SendMessage
    boolean sendMessage(java.lang.String,java.lang.String,java.lang.String) -> sendMessage
    boolean isFileExists(java.lang.String) -> isFileExists
    java.lang.String getFileType(java.lang.String) -> getFileType
    java.io.OutputStream access$0(org.doubango.ngn.sip.NgnMsrpSession) -> access$0
    java.lang.String access$1() -> access$1
    android.content.Context access$2(org.doubango.ngn.sip.NgnMsrpSession) -> access$2
    long[] access$3(org.doubango.ngn.sip.NgnMsrpSession) -> access$3
    long[] access$4(org.doubango.ngn.sip.NgnMsrpSession) -> access$4
    long[] access$5(org.doubango.ngn.sip.NgnMsrpSession) -> access$5
    void access$6(org.doubango.ngn.sip.NgnMsrpSession,java.io.OutputStream) -> access$6
    java.util.List access$7(org.doubango.ngn.sip.NgnMsrpSession) -> access$7
    void access$8(org.doubango.ngn.sip.NgnMsrpSession,java.lang.Object) -> access$8
    int[] $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType() -> $SWITCH_TABLE$org$doubango$ngn$media$NgnMediaType
org.doubango.ngn.sip.NgnMsrpSession$NgnMsrpCallback -> org.doubango.ngn.sip.NgnMsrpSession$NgnMsrpCallback:
    org.doubango.ngn.sip.NgnMsrpSession mSession -> mSession
    android.content.Context mAppContext -> mAppContext
    java.nio.ByteBuffer mTempBuffer -> mTempBuffer
    java.io.ByteArrayOutputStream mChatStream -> mChatStream
    java.lang.String mContentType -> mContentType
    java.lang.String mWContentType -> mWContentType
    long mSessionId -> mSessionId
    byte[] mData -> mData
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_request_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_request_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_event_type_t -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_event_type_t
    long getSessionId() -> getSessionId
    boolean appendData(byte[],int) -> appendData
    void processResponse(org.doubango.tinyWRAP.MsrpMessage) -> processResponse
    void processRequest(org.doubango.tinyWRAP.MsrpMessage) -> processRequest
    void broadcastEvent(org.doubango.ngn.events.NgnMsrpEventTypes) -> broadcastEvent
    int OnEvent(org.doubango.tinyWRAP.MsrpEvent) -> OnEvent
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_request_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_request_type_t
    int[] $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_event_type_t() -> $SWITCH_TABLE$org$doubango$tinyWRAP$tmsrp_event_type_t
org.doubango.ngn.sip.NgnMsrpSession$PendingMessage -> org.doubango.ngn.sip.NgnMsrpSession$PendingMessage:
    java.lang.String mMessage -> mMessage
    java.lang.String mContentType -> mContentType
    java.lang.String mWContentType -> mWContentType
    java.lang.String getMessage() -> getMessage
    java.lang.String getContentType() -> getContentType
    java.lang.String getWContentType() -> getWContentType
org.doubango.ngn.sip.NgnPresenceStatus -> org.doubango.ngn.sip.NgnPresenceStatus:
    org.doubango.ngn.sip.NgnPresenceStatus None -> None
    org.doubango.ngn.sip.NgnPresenceStatus Offline -> Offline
    org.doubango.ngn.sip.NgnPresenceStatus Busy -> Busy
    org.doubango.ngn.sip.NgnPresenceStatus Away -> Away
    org.doubango.ngn.sip.NgnPresenceStatus Online -> Online
    org.doubango.ngn.sip.NgnPresenceStatus BeRightBack -> BeRightBack
    org.doubango.ngn.sip.NgnPresenceStatus OnThePhone -> OnThePhone
    org.doubango.ngn.sip.NgnPresenceStatus OutToLunch -> OutToLunch
    org.doubango.ngn.sip.NgnPresenceStatus HyperAvailable -> HyperAvailable
    org.doubango.ngn.sip.NgnPresenceStatus[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.sip.NgnPresenceStatus[] values() -> values
    org.doubango.ngn.sip.NgnPresenceStatus valueOf(java.lang.String) -> valueOf
org.doubango.ngn.sip.NgnPublicationSession -> org.doubango.ngn.sip.NgnPublicationSession:
    java.lang.String TAG -> TAG
    org.doubango.tinyWRAP.PublicationSession mSession -> mSession
    org.doubango.ngn.utils.NgnObservableHashMap sSessions -> sSessions
    org.doubango.ngn.sip.NgnPublicationSession createOutgoingSession(org.doubango.ngn.sip.NgnSipStack,java.lang.String) -> createOutgoingSession
    void releaseSession(org.doubango.ngn.sip.NgnPublicationSession) -> releaseSession
    void releaseSession(long) -> releaseSession
    org.doubango.ngn.sip.NgnPublicationSession getSession(long) -> getSession
    int getSize() -> getSize
    boolean hasSession(long) -> hasSession
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    boolean setEvent(java.lang.String) -> setEvent
    boolean setContentType(java.lang.String) -> setContentType
    boolean publish(byte[],java.lang.String,java.lang.String) -> publish
    boolean publish(byte[]) -> publish
org.doubango.ngn.sip.NgnRegistrationSession -> org.doubango.ngn.sip.NgnRegistrationSession:
    org.doubango.tinyWRAP.RegistrationSession mSession -> mSession
    boolean register() -> register
    boolean unregister() -> unregister
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
org.doubango.ngn.sip.NgnSipPrefrences -> org.doubango.ngn.sip.NgnSipPrefrences:
    boolean mPresence -> mPresence
    boolean mXcapEnabled -> mXcapEnabled
    boolean mPresenceRLS -> mPresenceRLS
    boolean mPresencePub -> mPresencePub
    boolean mPresenceSub -> mPresenceSub
    boolean mMWI -> mMWI
    java.lang.String mIMPI -> mIMPI
    java.lang.String mIMPU -> mIMPU
    java.lang.String mRealm -> mRealm
    java.lang.String mPcscfHost -> mPcscfHost
    int mPcscfPort -> mPcscfPort
    java.lang.String mTransport -> mTransport
    java.lang.String mIPVersion -> mIPVersion
    boolean mIPsecSecAgree -> mIPsecSecAgree
    java.lang.String mLocalIP -> mLocalIP
    boolean mHackAoR -> mHackAoR
    void setPresenceEnabled(boolean) -> setPresenceEnabled
    boolean isPresenceEnabled() -> isPresenceEnabled
    void setXcapEnabled(boolean) -> setXcapEnabled
    boolean isXcapEnabled() -> isXcapEnabled
    void setPresenceRLS(boolean) -> setPresenceRLS
    boolean isPresenceRLS() -> isPresenceRLS
    void setMWI(boolean) -> setMWI
    boolean isMWI() -> isMWI
    void setPresencePub(boolean) -> setPresencePub
    boolean isPresencePub() -> isPresencePub
    void setIMPI(java.lang.String) -> setIMPI
    java.lang.String getIMPI() -> getIMPI
    void setIMPU(java.lang.String) -> setIMPU
    java.lang.String getIMPU() -> getIMPU
    void setRealm(java.lang.String) -> setRealm
    java.lang.String getRealm() -> getRealm
    void setPresenceSub(boolean) -> setPresenceSub
    boolean isPresenceSub() -> isPresenceSub
    void setPcscfHost(java.lang.String) -> setPcscfHost
    java.lang.String getPcscfHost() -> getPcscfHost
    void setPcscfPort(int) -> setPcscfPort
    int getPcscfPort() -> getPcscfPort
    void setIPVersion(java.lang.String) -> setIPVersion
    java.lang.String getIPVersion() -> getIPVersion
    void setTransport(java.lang.String) -> setTransport
    java.lang.String getTransport() -> getTransport
    void setIPsecSecAgree(boolean) -> setIPsecSecAgree
    boolean isIPsecSecAgree() -> isIPsecSecAgree
    void setLocalIP(java.lang.String) -> setLocalIP
    java.lang.String getLocalIP() -> getLocalIP
    void setHackAoR(boolean) -> setHackAoR
    boolean isHackAoR() -> isHackAoR
org.doubango.ngn.sip.NgnSipSession -> org.doubango.ngn.sip.NgnSipSession:
    java.lang.String TAG -> TAG
    org.doubango.ngn.sip.NgnSipStack mSipStack -> mSipStack
    boolean mOutgoing -> mOutgoing
    java.lang.String mFromUri -> mFromUri
    java.lang.String mToUri -> mToUri
    java.lang.String mCompId -> mCompId
    java.lang.String mRemotePartyUri -> mRemotePartyUri
    java.lang.String mLocalNum -> mLocalNum
    java.lang.String mRemotePartyDisplayName -> mRemotePartyDisplayName
    long mId -> mId
    int mRefCount -> mRefCount
    org.doubango.ngn.sip.NgnSipSession$ConnectionState mConnectionState -> mConnectionState
    byte[] mInfoContent -> mInfoContent
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    void finalize() -> finalize
    int incRef() -> incRef
    int decRef() -> decRef
    long getId() -> getId
    boolean isOutgoing() -> isOutgoing
    org.doubango.ngn.sip.NgnSipStack getStack() -> getStack
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean removeHeader(java.lang.String) -> removeHeader
    boolean addCaps(java.lang.String) -> addCaps
    boolean addCaps(java.lang.String,java.lang.String) -> addCaps
    boolean removeCaps(java.lang.String) -> removeCaps
    boolean isConnected() -> isConnected
    void setConnectionState(org.doubango.ngn.sip.NgnSipSession$ConnectionState) -> setConnectionState
    org.doubango.ngn.sip.NgnSipSession$ConnectionState getConnectionState() -> getConnectionState
    java.lang.String getFromUri() -> getFromUri
    boolean setFromUri(java.lang.String) -> setFromUri
    boolean setFromUri(org.doubango.tinyWRAP.SipUri) -> setFromUri
    java.lang.String getToUri() -> getToUri
    void setToUri(java.lang.String) -> setToUri
    void setToUri(org.doubango.tinyWRAP.SipUri) -> setToUri
    java.lang.String getLocalNum() -> getLocalNum
    void setLocalNum(java.lang.String) -> setLocalNum
    java.lang.String getRemotePartyUri() -> getRemotePartyUri
    void setRemotePartyUri(java.lang.String) -> setRemotePartyUri
    java.lang.String getRemotePartyDisplayName() -> getRemotePartyDisplayName
    void setSigCompId(java.lang.String) -> setSigCompId
    void setExpires(long) -> setExpires
    void delete() -> delete
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    void init() -> init
    int compareTo(org.doubango.ngn.sip.NgnSipSession) -> compareTo
    byte[] getmInfoContent() -> getmInfoContent
    void setmInfoContent(byte[]) -> setmInfoContent
    java.lang.String getHeaderPcscf() -> getHeaderPcscf
    int compareTo(java.lang.Object) -> compareTo
org.doubango.ngn.sip.NgnSipSession$ConnectionState -> org.doubango.ngn.sip.NgnSipSession$ConnectionState:
    org.doubango.ngn.sip.NgnSipSession$ConnectionState NONE -> NONE
    org.doubango.ngn.sip.NgnSipSession$ConnectionState CONNECTING -> CONNECTING
    org.doubango.ngn.sip.NgnSipSession$ConnectionState CONNECTED -> CONNECTED
    org.doubango.ngn.sip.NgnSipSession$ConnectionState TERMINATING -> TERMINATING
    org.doubango.ngn.sip.NgnSipSession$ConnectionState TERMINATED -> TERMINATED
    org.doubango.ngn.sip.NgnSipSession$ConnectionState[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.sip.NgnSipSession$ConnectionState[] values() -> values
    org.doubango.ngn.sip.NgnSipSession$ConnectionState valueOf(java.lang.String) -> valueOf
org.doubango.ngn.sip.NgnSipStack -> org.doubango.ngn.sip.NgnSipStack:
    java.lang.String TAG -> TAG
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE mState -> mState
    java.lang.String mCompId -> mCompId
    org.doubango.ngn.services.INgnNetworkService mNetworkService -> mNetworkService
    boolean start() -> start
    boolean stop() -> stop
    void setState(org.doubango.ngn.sip.NgnSipStack$STACK_STATE) -> setState
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE getState() -> getState
    java.lang.String getSigCompId() -> getSigCompId
    void setSigCompId(java.lang.String) -> setSigCompId
org.doubango.ngn.sip.NgnSipStack$STACK_STATE -> org.doubango.ngn.sip.NgnSipStack$STACK_STATE:
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE NONE -> NONE
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE STARTING -> STARTING
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE STARTED -> STARTED
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE STOPPING -> STOPPING
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE STOPPED -> STOPPED
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE DISCONNECTED -> DISCONNECTED
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE[] values() -> values
    org.doubango.ngn.sip.NgnSipStack$STACK_STATE valueOf(java.lang.String) -> valueOf
org.doubango.ngn.sip.NgnSubscriptionSession -> org.doubango.ngn.sip.NgnSubscriptionSession:
    org.doubango.tinyWRAP.SubscriptionSession mSession -> mSession
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType mPackage -> mPackage
    org.doubango.ngn.services.INgnConfigurationService mConfigurationService -> mConfigurationService
    org.doubango.ngn.utils.NgnObservableHashMap sSessions -> sSessions
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnSubscriptionSession$EventPackageType -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnSubscriptionSession$EventPackageType
    org.doubango.ngn.sip.NgnSubscriptionSession createOutgoingSession(org.doubango.ngn.sip.NgnSipStack,java.lang.String,java.lang.String,org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType) -> createOutgoingSession
    void releaseSession(org.doubango.ngn.sip.NgnSubscriptionSession) -> releaseSession
    void releaseSession(long) -> releaseSession
    org.doubango.ngn.sip.NgnSubscriptionSession getSession(long) -> getSession
    int getSize() -> getSize
    boolean hasSession(long) -> hasSession
    org.doubango.tinyWRAP.SipSession getSession() -> getSession
    boolean subscribe() -> subscribe
    boolean unSubscribe() -> unSubscribe
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType getEventPackage() -> getEventPackage
    int[] $SWITCH_TABLE$org$doubango$ngn$sip$NgnSubscriptionSession$EventPackageType() -> $SWITCH_TABLE$org$doubango$ngn$sip$NgnSubscriptionSession$EventPackageType
org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType -> org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType:
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType None -> None
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType Conference -> Conference
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType Dialog -> Dialog
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType MessageSummary -> MessageSummary
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType Presence -> Presence
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType PresenceList -> PresenceList
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType Group -> Group
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType Reg -> Reg
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType SipProfile -> SipProfile
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType UAProfile -> UAProfile
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType WInfo -> WInfo
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType XcapDiff -> XcapDiff
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType[] ENUM$VALUES -> ENUM$VALUES
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType[] values() -> values
    org.doubango.ngn.sip.NgnSubscriptionSession$EventPackageType valueOf(java.lang.String) -> valueOf
org.doubango.ngn.utils.NgnCallbackFunc -> org.doubango.ngn.utils.NgnCallbackFunc:
    void callback(java.lang.Object,java.lang.Object[][]) -> callback
org.doubango.ngn.utils.NgnConfigurationEntry -> org.doubango.ngn.utils.NgnConfigurationEntry:
    java.lang.String TAG -> TAG
    java.lang.String SHARED_PREF_NAME -> SHARED_PREF_NAME
    java.lang.String PCSCF_DISCOVERY_DNS_SRV -> PCSCF_DISCOVERY_DNS_SRV
    java.lang.String GENERAL_VIDDO_FPS -> GENERAL_VIDDO_FPS
    java.lang.String GENERAL_AUTOSTART -> GENERAL_AUTOSTART
    java.lang.String GENERAL_AUTOSTART_VIDEO -> GENERAL_AUTOSTART_VIDEO
    java.lang.String GENERAL_SHOW_WELCOME_SCREEN -> GENERAL_SHOW_WELCOME_SCREEN
    java.lang.String GENERAL_FULL_SCREEN_VIDEO -> GENERAL_FULL_SCREEN_VIDEO
    java.lang.String GENERAL_USE_FFC -> GENERAL_USE_FFC
    java.lang.String GENERAL_INTERCEPT_OUTGOING_CALLS -> GENERAL_INTERCEPT_OUTGOING_CALLS
    java.lang.String GENERAL_AUDIO_PLAY_LEVEL -> GENERAL_AUDIO_PLAY_LEVEL
    java.lang.String GENERAL_ENUM_DOMAIN -> GENERAL_ENUM_DOMAIN
    java.lang.String GENERAL_AEC -> GENERAL_AEC
    java.lang.String GENERAL_VAD -> GENERAL_VAD
    java.lang.String GENERAL_NR -> GENERAL_NR
    java.lang.String GENERAL_ECHO_TAIL -> GENERAL_ECHO_TAIL
    java.lang.String GENERAL_USE_ECHO_TAIL_ADAPTIVE -> GENERAL_USE_ECHO_TAIL_ADAPTIVE
    java.lang.String GENERAL_SEND_DEVICE_INFO -> GENERAL_SEND_DEVICE_INFO
    java.lang.String IDENTITY_DISPLAY_NAME -> IDENTITY_DISPLAY_NAME
    java.lang.String IDENTITY_IMPU -> IDENTITY_IMPU
    java.lang.String IDENTITY_IMPI -> IDENTITY_IMPI
    java.lang.String IDENTITY_PASSWORD -> IDENTITY_PASSWORD
    java.lang.String NETWORK_REGISTRATION_TIMEOUT -> NETWORK_REGISTRATION_TIMEOUT
    java.lang.String NETWORK_REALM -> NETWORK_REALM
    java.lang.String NETWORK_GROUP_REALM -> NETWORK_GROUP_REALM
    java.lang.String NETWORK_GROUP_PORT -> NETWORK_GROUP_PORT
    java.lang.String NETWORK_USE_WIFI -> NETWORK_USE_WIFI
    java.lang.String NETWORK_USE_3G -> NETWORK_USE_3G
    java.lang.String NETWORK_USE_EARLY_IMS -> NETWORK_USE_EARLY_IMS
    java.lang.String NETWORK_IP_VERSION -> NETWORK_IP_VERSION
    java.lang.String NETWORK_PCSCF_DISCOVERY -> NETWORK_PCSCF_DISCOVERY
    java.lang.String NETWORK_PCSCF_HOST -> NETWORK_PCSCF_HOST
    java.lang.String NETWORK_PCSCF_PORT -> NETWORK_PCSCF_PORT
    java.lang.String NETWORK_USE_SIGCOMP -> NETWORK_USE_SIGCOMP
    java.lang.String NETWORK_TRANSPORT -> NETWORK_TRANSPORT
    java.lang.String NATT_HACK_AOR -> NATT_HACK_AOR
    java.lang.String NATT_HACK_AOR_TIMEOUT -> NATT_HACK_AOR_TIMEOUT
    java.lang.String NATT_USE_STUN -> NATT_USE_STUN
    java.lang.String NATT_USE_ICE -> NATT_USE_ICE
    java.lang.String NATT_STUN_DISCO -> NATT_STUN_DISCO
    java.lang.String NATT_STUN_SERVER -> NATT_STUN_SERVER
    java.lang.String NATT_STUN_PORT -> NATT_STUN_PORT
    java.lang.String QOS_PRECOND_BANDWIDTH_LEVEL -> QOS_PRECOND_BANDWIDTH_LEVEL
    java.lang.String QOS_PRECOND_STRENGTH -> QOS_PRECOND_STRENGTH
    java.lang.String QOS_PRECOND_TYPE -> QOS_PRECOND_TYPE
    java.lang.String QOS_REFRESHER -> QOS_REFRESHER
    java.lang.String QOS_SIP_CALLS_TIMEOUT -> QOS_SIP_CALLS_TIMEOUT
    java.lang.String QOS_SIP_SESSIONS_TIMEOUT -> QOS_SIP_SESSIONS_TIMEOUT
    java.lang.String QOS_USE_SESSION_TIMERS -> QOS_USE_SESSION_TIMERS
    java.lang.String QOS_PREF_VIDEO_SIZE -> QOS_PREF_VIDEO_SIZE
    java.lang.String QOS_USE_ZERO_VIDEO_ARTIFACTS -> QOS_USE_ZERO_VIDEO_ARTIFACTS
    java.lang.String MEDIA_CODECS -> MEDIA_CODECS
    java.lang.String MEDIA_AUDIO_RESAMPLER_QUALITY -> MEDIA_AUDIO_RESAMPLER_QUALITY
    java.lang.String MEDIA_AUDIO_CONSUMER_GAIN -> MEDIA_AUDIO_CONSUMER_GAIN
    java.lang.String MEDIA_AUDIO_PRODUCER_GAIN -> MEDIA_AUDIO_PRODUCER_GAIN
    java.lang.String MEDIA_AUDIO_CONSUMER_ATTENUATION -> MEDIA_AUDIO_CONSUMER_ATTENUATION
    java.lang.String MEDIA_AUDIO_PRODUCER_ATTENUATION -> MEDIA_AUDIO_PRODUCER_ATTENUATION
    java.lang.String MEDIA_PROFILE -> MEDIA_PROFILE
    java.lang.String SECURITY_SRTP_MODE -> SECURITY_SRTP_MODE
    java.lang.String SECURITY_SRTP_TYPE -> SECURITY_SRTP_TYPE
    java.lang.String SECURITY_IMSAKA_AMF -> SECURITY_IMSAKA_AMF
    java.lang.String SECURITY_IMSAKA_OPID -> SECURITY_IMSAKA_OPID
    java.lang.String SECURITY_TLS_PRIVKEY_FILE_PATH -> SECURITY_TLS_PRIVKEY_FILE_PATH
    java.lang.String SECURITY_TLS_PUBKEY_FILE_PATH -> SECURITY_TLS_PUBKEY_FILE_PATH
    java.lang.String SECURITY_TLS_CA_FILE_PATH -> SECURITY_TLS_CA_FILE_PATH
    java.lang.String SECURITY_TLS_VERIFY_CERTS -> SECURITY_TLS_VERIFY_CERTS
    java.lang.String XCAP_PASSWORD -> XCAP_PASSWORD
    java.lang.String XCAP_USERNAME -> XCAP_USERNAME
    java.lang.String XCAP_ENABLED -> XCAP_ENABLED
    java.lang.String XCAP_XCAP_ROOT -> XCAP_XCAP_ROOT
    java.lang.String RCS_AVATAR_PATH -> RCS_AVATAR_PATH
    java.lang.String RCS_USE_BINARY_SMS -> RCS_USE_BINARY_SMS
    java.lang.String RCS_CONF_FACT -> RCS_CONF_FACT
    java.lang.String RCS_FREE_TEXT -> RCS_FREE_TEXT
    java.lang.String RCS_HACK_SMS -> RCS_HACK_SMS
    java.lang.String RCS_USE_MSRP_FAILURE -> RCS_USE_MSRP_FAILURE
    java.lang.String RCS_USE_MSRP_SUCCESS -> RCS_USE_MSRP_SUCCESS
    java.lang.String RCS_USE_MWI -> RCS_USE_MWI
    java.lang.String RCS_USE_OMAFDR -> RCS_USE_OMAFDR
    java.lang.String RCS_USE_PARTIAL_PUB -> RCS_USE_PARTIAL_PUB
    java.lang.String RCS_USE_PRESENCE -> RCS_USE_PRESENCE
    java.lang.String RCS_USE_RLS -> RCS_USE_RLS
    java.lang.String RCS_SMSC -> RCS_SMSC
    java.lang.String RCS_STATUS -> RCS_STATUS
    int DEFAULT_GENERAL_VIDDO_FPS -> DEFAULT_GENERAL_VIDDO_FPS
    boolean DEFAULT_GENERAL_SHOW_WELCOME_SCREEN -> DEFAULT_GENERAL_SHOW_WELCOME_SCREEN
    boolean DEFAULT_GENERAL_FULL_SCREEN_VIDEO -> DEFAULT_GENERAL_FULL_SCREEN_VIDEO
    boolean DEFAULT_GENERAL_INTERCEPT_OUTGOING_CALLS -> DEFAULT_GENERAL_INTERCEPT_OUTGOING_CALLS
    boolean DEFAULT_GENERAL_USE_FFC -> DEFAULT_GENERAL_USE_FFC
    boolean DEFAULT_GENERAL_AUTOSTART -> DEFAULT_GENERAL_AUTOSTART
    boolean DEFAULT_GENERAL_AUTOSTART_VIDEO -> DEFAULT_GENERAL_AUTOSTART_VIDEO
    float DEFAULT_GENERAL_AUDIO_PLAY_LEVEL -> DEFAULT_GENERAL_AUDIO_PLAY_LEVEL
    java.lang.String DEFAULT_GENERAL_ENUM_DOMAIN -> DEFAULT_GENERAL_ENUM_DOMAIN
    boolean DEFAULT_GENERAL_AEC -> DEFAULT_GENERAL_AEC
    boolean DEFAULT_GENERAL_USE_ECHO_TAIL_ADAPTIVE -> DEFAULT_GENERAL_USE_ECHO_TAIL_ADAPTIVE
    boolean DEFAULT_GENERAL_VAD -> DEFAULT_GENERAL_VAD
    boolean DEFAULT_GENERAL_NR -> DEFAULT_GENERAL_NR
    int DEFAULT_GENERAL_ECHO_TAIL -> DEFAULT_GENERAL_ECHO_TAIL
    boolean DEFAULT_GENERAL_SEND_DEVICE_INFO -> DEFAULT_GENERAL_SEND_DEVICE_INFO
    java.lang.String DEFAULT_IDENTITY_DISPLAY_NAME -> DEFAULT_IDENTITY_DISPLAY_NAME
    java.lang.String DEFAULT_IDENTITY_IMPU -> DEFAULT_IDENTITY_IMPU
    java.lang.String DEFAULT_IDENTITY_IMPI -> DEFAULT_IDENTITY_IMPI
    java.lang.String DEFAULT_IDENTITY_PASSWORD -> DEFAULT_IDENTITY_PASSWORD
    int DEFAULT_NETWORK_REGISTRATION_TIMEOUT -> DEFAULT_NETWORK_REGISTRATION_TIMEOUT
    java.lang.String DEFAULT_NETWORK_REALM -> DEFAULT_NETWORK_REALM
    java.lang.String DEFAULT_NETWORK_GROUP_REALM -> DEFAULT_NETWORK_GROUP_REALM
    java.lang.String DEFAULT_NETWORK_GROUP_PORT -> DEFAULT_NETWORK_GROUP_PORT
    boolean DEFAULT_NETWORK_USE_WIFI -> DEFAULT_NETWORK_USE_WIFI
    boolean DEFAULT_NETWORK_USE_3G -> DEFAULT_NETWORK_USE_3G
    java.lang.String DEFAULT_NETWORK_PCSCF_DISCOVERY -> DEFAULT_NETWORK_PCSCF_DISCOVERY
    java.lang.String DEFAULT_NETWORK_PCSCF_HOST -> DEFAULT_NETWORK_PCSCF_HOST
    int DEFAULT_NETWORK_PCSCF_PORT -> DEFAULT_NETWORK_PCSCF_PORT
    boolean DEFAULT_NETWORK_USE_SIGCOMP -> DEFAULT_NETWORK_USE_SIGCOMP
    java.lang.String DEFAULT_NETWORK_TRANSPORT -> DEFAULT_NETWORK_TRANSPORT
    java.lang.String DEFAULT_NETWORK_IP_VERSION -> DEFAULT_NETWORK_IP_VERSION
    boolean DEFAULT_NETWORK_USE_EARLY_IMS -> DEFAULT_NETWORK_USE_EARLY_IMS
    int DEFAULT_NATT_HACK_AOR_TIMEOUT -> DEFAULT_NATT_HACK_AOR_TIMEOUT
    boolean DEFAULT_NATT_HACK_AOR -> DEFAULT_NATT_HACK_AOR
    boolean DEFAULT_NATT_USE_STUN -> DEFAULT_NATT_USE_STUN
    boolean DEFAULT_NATT_USE_ICE -> DEFAULT_NATT_USE_ICE
    boolean DEFAULT_NATT_STUN_DISCO -> DEFAULT_NATT_STUN_DISCO
    java.lang.String DEFAULT_NATT_STUN_SERVER -> DEFAULT_NATT_STUN_SERVER
    int DEFAULT_NATT_STUN_PORT -> DEFAULT_NATT_STUN_PORT
    int DEFAULT_QOS_PRECOND_BANDWIDTH_LEVEL -> DEFAULT_QOS_PRECOND_BANDWIDTH_LEVEL
    java.lang.String DEFAULT_QOS_PRECOND_STRENGTH -> DEFAULT_QOS_PRECOND_STRENGTH
    java.lang.String DEFAULT_QOS_PRECOND_TYPE -> DEFAULT_QOS_PRECOND_TYPE
    java.lang.String DEFAULT_QOS_REFRESHER -> DEFAULT_QOS_REFRESHER
    int DEFAULT_QOS_SIP_SESSIONS_TIMEOUT -> DEFAULT_QOS_SIP_SESSIONS_TIMEOUT
    int DEFAULT_QOS_SIP_CALLS_TIMEOUT -> DEFAULT_QOS_SIP_CALLS_TIMEOUT
    boolean DEFAULT_QOS_USE_SESSION_TIMERS -> DEFAULT_QOS_USE_SESSION_TIMERS
    boolean DEFAULT_QOS_USE_ZERO_VIDEO_ARTIFACTS -> DEFAULT_QOS_USE_ZERO_VIDEO_ARTIFACTS
    java.lang.String DEFAULT_QOS_PREF_VIDEO_SIZE -> DEFAULT_QOS_PREF_VIDEO_SIZE
    java.lang.String DEFAULT_MEDIA_PROFILE -> DEFAULT_MEDIA_PROFILE
    int DEFAULT_MEDIA_CODECS -> DEFAULT_MEDIA_CODECS
    int DEFAULT_MEDIA_AUDIO_RESAMPLER_QUALITY -> DEFAULT_MEDIA_AUDIO_RESAMPLER_QUALITY
    int DEFAULT_MEDIA_AUDIO_CONSUMER_GAIN -> DEFAULT_MEDIA_AUDIO_CONSUMER_GAIN
    int DEFAULT_MEDIA_AUDIO_PRODUCER_GAIN -> DEFAULT_MEDIA_AUDIO_PRODUCER_GAIN
    float DEFAULT_MEDIA_AUDIO_CONSUMER_ATTENUATION -> DEFAULT_MEDIA_AUDIO_CONSUMER_ATTENUATION
    float DEFAULT_MEDIA_AUDIO_PRODUCER_ATTENUATION -> DEFAULT_MEDIA_AUDIO_PRODUCER_ATTENUATION
    java.lang.String DEFAULT_SECURITY_IMSAKA_AMF -> DEFAULT_SECURITY_IMSAKA_AMF
    java.lang.String DEFAULT_SECURITY_IMSAKA_OPID -> DEFAULT_SECURITY_IMSAKA_OPID
    java.lang.String DEFAULT_SECURITY_SRTP_MODE -> DEFAULT_SECURITY_SRTP_MODE
    java.lang.String DEFAULT_SECURITY_SRTP_TYPE -> DEFAULT_SECURITY_SRTP_TYPE
    java.lang.String DEFAULT_SECURITY_TLS_PRIVKEY_FILE_PATH -> DEFAULT_SECURITY_TLS_PRIVKEY_FILE_PATH
    java.lang.String DEFAULT_SECURITY_TLS_PUBKEY_FILE_PATH -> DEFAULT_SECURITY_TLS_PUBKEY_FILE_PATH
    java.lang.String DEFAULT_SECURITY_TLS_CA_FILE_PATH -> DEFAULT_SECURITY_TLS_CA_FILE_PATH
    boolean DEFAULT_SECURITY_TLS_VERIFY_CERTS -> DEFAULT_SECURITY_TLS_VERIFY_CERTS
    boolean DEFAULT_XCAP_ENABLED -> DEFAULT_XCAP_ENABLED
    java.lang.String DEFAULT_XCAP_ROOT -> DEFAULT_XCAP_ROOT
    java.lang.String DEFAULT_XCAP_USERNAME -> DEFAULT_XCAP_USERNAME
    java.lang.String DEFAULT_XCAP_PASSWORD -> DEFAULT_XCAP_PASSWORD
    java.lang.String DEFAULT_RCS_AVATAR_PATH -> DEFAULT_RCS_AVATAR_PATH
    boolean DEFAULT_RCS_USE_BINARY_SM -> DEFAULT_RCS_USE_BINARY_SM
    java.lang.String DEFAULT_RCS_CONF_FACT -> DEFAULT_RCS_CONF_FACT
    java.lang.String DEFAULT_RCS_FREE_TEXT -> DEFAULT_RCS_FREE_TEXT
    boolean DEFAULT_RCS_HACK_SMS -> DEFAULT_RCS_HACK_SMS
    boolean DEFAULT_RCS_USE_MSRP_FAILURE -> DEFAULT_RCS_USE_MSRP_FAILURE
    boolean DEFAULT_RCS_USE_MSRP_SUCCESS -> DEFAULT_RCS_USE_MSRP_SUCCESS
    boolean DEFAULT_RCS_USE_BINARY_SMS -> DEFAULT_RCS_USE_BINARY_SMS
    boolean DEFAULT_RCS_USE_MWI -> DEFAULT_RCS_USE_MWI
    boolean DEFAULT_RCS_USE_OMAFDR -> DEFAULT_RCS_USE_OMAFDR
    boolean DEFAULT_RCS_USE_PARTIAL_PUB -> DEFAULT_RCS_USE_PARTIAL_PUB
    boolean DEFAULT_RCS_USE_PRESENCE -> DEFAULT_RCS_USE_PRESENCE
    boolean DEFAULT_RCS_USE_RLS -> DEFAULT_RCS_USE_RLS
    java.lang.String DEFAULT_RCS_SMSC -> DEFAULT_RCS_SMSC
    org.doubango.ngn.sip.NgnPresenceStatus DEFAULT_RCS_STATUS -> DEFAULT_RCS_STATUS
    java.lang.String XCAP_GroupContacts_Need_Update -> XCAP_GroupContacts_Need_Update
    java.lang.String XCAP_GroupContacts_For_Single -> XCAP_GroupContacts_For_Single
    java.lang.String XCAP_GroupContacts_For_Group -> XCAP_GroupContacts_For_Group
    java.lang.String GPS_SENDTO_HOST -> GPS_SENDTO_HOST
    java.lang.String GPS_SENDTO_PORT -> GPS_SENDTO_PORT
    boolean DEFAULT_XCAP_GroupContacts_Need_Update -> DEFAULT_XCAP_GroupContacts_Need_Update
    java.lang.String DEFAULT_XCAP_GroupContacts_For_Single -> DEFAULT_XCAP_GroupContacts_For_Single
    java.lang.String DEFAULT_XCAP_GroupContacts_For_Group -> DEFAULT_XCAP_GroupContacts_For_Group
    java.lang.String DEFAULT_GPS_SENDTO_HOST -> DEFAULT_GPS_SENDTO_HOST
    int DEFAULT_GPS_SENDTO_PORT -> DEFAULT_GPS_SENDTO_PORT
    java.lang.String SERVICE_ROUTE -> SERVICE_ROUTE
    java.lang.String DEFAULT_SERVICE_ROUTE -> DEFAULT_SERVICE_ROUTE
    java.lang.String FILE_SERVER_URL -> FILE_SERVER_URL
    java.lang.String DEFAULT_FILE_SERVER_URL -> DEFAULT_FILE_SERVER_URL
    java.lang.String MAP_SERVER_URL -> MAP_SERVER_URL
    java.lang.String DEFAULT_MAP_SERVER_URL -> DEFAULT_MAP_SERVER_URL
    java.lang.String LOCAL_IP -> LOCAL_IP
    java.lang.String GPS_REPORT_PERIOD -> GPS_REPORT_PERIOD
org.doubango.ngn.utils.NgnContentType -> org.doubango.ngn.utils.NgnContentType:
    java.lang.String TEXT_PLAIN -> TEXT_PLAIN
    java.lang.String CONFERENCE_INFO -> CONFERENCE_INFO
    java.lang.String DIALOG_INFO -> DIALOG_INFO
    java.lang.String EXTERNAL_BODY -> EXTERNAL_BODY
    java.lang.String MESSAGE_SUMMARY -> MESSAGE_SUMMARY
    java.lang.String MULTIPART_RELATED -> MULTIPART_RELATED
    java.lang.String OMA_DEFERRED_LIST -> OMA_DEFERRED_LIST
    java.lang.String PIDF -> PIDF
    java.lang.String REG_INFO -> REG_INFO
    java.lang.String RLMI -> RLMI
    java.lang.String RPID -> RPID
    java.lang.String CPIM -> CPIM
    java.lang.String WATCHER_INFO -> WATCHER_INFO
    java.lang.String XCAP_DIFF -> XCAP_DIFF
    java.lang.String SMS_3GPP -> SMS_3GPP
    java.lang.String JSON -> JSON
    java.lang.String DOUBANGO_DEVICE_INFO -> DOUBANGO_DEVICE_INFO
    java.lang.String T140COMMAND -> T140COMMAND
    java.lang.String USSD_INFO -> USSD_INFO
    java.lang.String PTT_INFO -> PTT_INFO
    java.lang.String TEXT_PUSHINFO -> TEXT_PUSHINFO
    java.lang.String GPS_CONTENT_TYPE_HEADER_COMMAND -> GPS_CONTENT_TYPE_HEADER_COMMAND
    java.lang.String GPS_CONTENT_TYPE_HEADER_DATA -> GPS_CONTENT_TYPE_HEADER_DATA
    java.lang.String GPS_APP_TYPE -> GPS_APP_TYPE
    java.lang.String MSG_GROUP_INVITE -> MSG_GROUP_INVITE
org.doubango.ngn.utils.NgnDataBaseHelper -> org.doubango.ngn.utils.NgnDataBaseHelper:
    java.lang.String TAG -> TAG
    android.content.Context mContext -> mContext
    java.lang.String mDataBaseName -> mDataBaseName
    int mDataBaseVersion -> mDataBaseVersion
    org.doubango.ngn.utils.NgnDataBaseHelper$NgnDataBaseOpenHelper mDataBaseOpenHelper -> mDataBaseOpenHelper
    android.database.sqlite.SQLiteDatabase mSQLiteDatabase -> mSQLiteDatabase
    void finalize() -> finalize
    boolean close() -> close
    boolean isFreshDataBase() -> isFreshDataBase
    android.database.sqlite.SQLiteDatabase getSQLiteDatabase() -> getSQLiteDatabase
    boolean deleteAll(java.lang.String,java.lang.String,java.lang.String[]) -> deleteAll
    boolean deleteAll(java.lang.String) -> deleteAll
org.doubango.ngn.utils.NgnDataBaseHelper$NgnDataBaseOpenHelper -> org.doubango.ngn.utils.NgnDataBaseHelper$NgnDataBaseOpenHelper:
    boolean mFreshDataBase -> mFreshDataBase
    java.lang.String[][] mCreateTableSt -> mCreateTableSt
    boolean isFreshDataBase() -> isFreshDataBase
    boolean createDataBase(android.database.sqlite.SQLiteDatabase) -> createDataBase
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    boolean access$0(org.doubango.ngn.utils.NgnDataBaseHelper$NgnDataBaseOpenHelper) -> access$0
org.doubango.ngn.utils.NgnDateTimeUtils -> org.doubango.ngn.utils.NgnDateTimeUtils:
    java.text.DateFormat sDefaultDateFormat -> sDefaultDateFormat
    java.lang.String now(java.lang.String) -> now
    java.lang.String now() -> now
    java.util.Date parseDate(java.lang.String,java.text.DateFormat) -> parseDate
    java.util.Date parseDate(java.lang.String) -> parseDate
    boolean isSameDay(java.util.Date,java.util.Date) -> isSameDay
org.doubango.ngn.utils.NgnGraphicsUtils -> org.doubango.ngn.utils.NgnGraphicsUtils:
    android.graphics.Bitmap getResizedBitmap(android.graphics.Bitmap,int,int) -> getResizedBitmap
    int getSizeInPixel(int) -> getSizeInPixel
org.doubango.ngn.utils.NgnListUtils -> org.doubango.ngn.utils.NgnListUtils:
    java.util.List filter(java.util.Collection,org.doubango.ngn.utils.NgnPredicate) -> filter
    java.lang.Object getFirstOrDefault(java.util.Collection,org.doubango.ngn.utils.NgnPredicate) -> getFirstOrDefault
org.doubango.ngn.utils.NgnObservableHashMap -> org.doubango.ngn.utils.NgnObservableHashMap:
    java.util.HashMap mHashMap -> mHashMap
    boolean mWatchValueChanged -> mWatchValueChanged
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object getAt(int) -> getAt
    java.util.Collection values() -> values
    java.lang.Object remove(java.lang.Object) -> remove
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    java.util.Set entrySet() -> entrySet
    int size() -> size
    void update(java.util.Observable,java.lang.Object) -> update
org.doubango.ngn.utils.NgnObservableList -> org.doubango.ngn.utils.NgnObservableList:
    java.util.List mList -> mList
    boolean mWatchValueChanged -> mWatchValueChanged
    java.util.List getList() -> getList
    java.util.List filter(org.doubango.ngn.utils.NgnPredicate) -> filter
    boolean add(java.lang.Object) -> add
    void add(java.lang.Object[]) -> add
    void add(java.util.Collection) -> add
    void add(int,java.lang.Object) -> add
    java.lang.Object remove(int) -> remove
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    void clear() -> clear
    void setWatchValueChanged(boolean) -> setWatchValueChanged
    void update(java.util.Observable,java.lang.Object) -> update
org.doubango.ngn.utils.NgnObservableObject -> org.doubango.ngn.utils.NgnObservableObject:
    void setChangedAndNotifyObservers(java.lang.Object) -> setChangedAndNotifyObservers
org.doubango.ngn.utils.NgnPredicate -> org.doubango.ngn.utils.NgnPredicate:
    boolean apply(java.lang.Object) -> apply
org.doubango.ngn.utils.NgnStringUtils -> org.doubango.ngn.utils.NgnStringUtils:
    java.security.MessageDigest sMD5Digest -> sMD5Digest
    java.lang.String emptyValue() -> emptyValue
    java.lang.String nullValue() -> nullValue
    boolean isNullOrEmpty(java.lang.String) -> isNullOrEmpty
    boolean startsWith(java.lang.String,java.lang.String,boolean) -> startsWith
    boolean equals(java.lang.String,java.lang.String,boolean) -> equals
    java.lang.String unquote(java.lang.String,java.lang.String) -> unquote
    java.lang.String quote(java.lang.String,java.lang.String) -> quote
    long parseLong(java.lang.String,long) -> parseLong
    int parseInt(java.lang.String,int) -> parseInt
    java.lang.String getMD5(java.lang.String) -> getMD5
    byte[] getMD5Digest(java.lang.String) -> getMD5Digest
    boolean isValidMD5String(java.lang.String) -> isValidMD5String
org.doubango.ngn.utils.NgnTimer -> org.doubango.ngn.utils.NgnTimer:
    java.lang.String TAG -> TAG
    void cancel() -> cancel
    void schedule(java.util.TimerTask,java.util.Date,long) -> schedule
    void schedule(java.util.TimerTask,java.util.Date) -> schedule
    void schedule(java.util.TimerTask,long,long) -> schedule
    void schedule(java.util.TimerTask,long) -> schedule
org.doubango.ngn.utils.NgnUriUtils -> org.doubango.ngn.utils.NgnUriUtils:
    java.lang.String mGroupNum -> mGroupNum
    java.lang.String mMemberNum -> mMemberNum
    long MAX_PHONE_NUMBER -> MAX_PHONE_NUMBER
    java.lang.String INVALID_SIP_URI -> INVALID_SIP_URI
    java.lang.String getGroupNum() -> getGroupNum
    java.lang.String getMemberNum() -> getMemberNum
    void setGroupAndMemberNum(java.lang.String) -> setGroupAndMemberNum
    java.lang.String getDisplayName(java.lang.String) -> getDisplayName
    java.lang.String getUserName(java.lang.String) -> getUserName
    boolean isValidSipUri(java.lang.String) -> isValidSipUri
    java.lang.String makeValidSipUri(java.lang.String) -> makeValidSipUri
    org.doubango.tinyWRAP.SipUri makeValidSipUriObj(java.lang.String) -> makeValidSipUriObj
    java.lang.String getValidPhoneNumber(java.lang.String) -> getValidPhoneNumber
    java.lang.String getRemoteNumber(java.lang.String) -> getRemoteNumber
    boolean getContactIsOnline(java.lang.String) -> getContactIsOnline
    java.lang.String getGroupRemoveNumber(java.lang.String) -> getGroupRemoveNumber
    java.lang.String getReplaceNumber(java.lang.String) -> getReplaceNumber
    void catchError(java.lang.String,java.lang.String,java.lang.String,int) -> catchError
    java.lang.String getGroupUri(java.lang.String) -> getGroupUri
org.doubango.tinyWRAP.ActionConfig -> org.doubango.tinyWRAP.ActionConfig:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ActionConfig) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean addPayload(java.nio.ByteBuffer,long) -> addPayload
    boolean setActiveMedia(org.doubango.tinyWRAP.twrap_media_type_t) -> setActiveMedia
    org.doubango.tinyWRAP.ActionConfig setResponseLine(short,java.lang.String) -> setResponseLine
    org.doubango.tinyWRAP.ActionConfig setMediaString(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,java.lang.String) -> setMediaString
    org.doubango.tinyWRAP.ActionConfig setMediaInt(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,int) -> setMediaInt
org.doubango.tinyWRAP.AudioResampler -> org.doubango.tinyWRAP.AudioResampler:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.AudioResampler) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean isValid() -> isValid
    long getOutputRequiredSizeInShort() -> getOutputRequiredSizeInShort
    long getInputRequiredSizeInShort() -> getInputRequiredSizeInShort
    long process(java.nio.ByteBuffer,long,java.nio.ByteBuffer,long) -> process
org.doubango.tinyWRAP.CallSession -> org.doubango.tinyWRAP.CallSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.CallSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean callAudio(java.lang.String,org.doubango.tinyWRAP.ActionConfig) -> callAudio
    boolean callAudio(java.lang.String) -> callAudio
    boolean callAudio(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.ActionConfig) -> callAudio
    boolean callAudio(org.doubango.tinyWRAP.SipUri) -> callAudio
    boolean callAudioVideo(java.lang.String,org.doubango.tinyWRAP.ActionConfig) -> callAudioVideo
    boolean callAudioVideo(java.lang.String) -> callAudioVideo
    boolean callAudioVideo(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.ActionConfig) -> callAudioVideo
    boolean callAudioVideo(org.doubango.tinyWRAP.SipUri) -> callAudioVideo
    boolean callVideo(java.lang.String,org.doubango.tinyWRAP.ActionConfig) -> callVideo
    boolean callVideo(java.lang.String) -> callVideo
    boolean callVideo(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.ActionConfig) -> callVideo
    boolean callVideo(org.doubango.tinyWRAP.SipUri) -> callVideo
    boolean call(java.lang.String,org.doubango.tinyWRAP.twrap_media_type_t,org.doubango.tinyWRAP.ActionConfig) -> call
    boolean call(java.lang.String,org.doubango.tinyWRAP.twrap_media_type_t) -> call
    boolean call(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.twrap_media_type_t,org.doubango.tinyWRAP.ActionConfig) -> call
    boolean call(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.twrap_media_type_t) -> call
    boolean setSessionTimer(long,java.lang.String) -> setSessionTimer
    boolean set100rel(boolean) -> set100rel
    boolean setRtcp(boolean) -> setRtcp
    boolean setRtcpMux(boolean) -> setRtcpMux
    boolean setSRtpMode(org.doubango.tinyWRAP.tmedia_srtp_mode_t) -> setSRtpMode
    boolean setAvpfMode(org.doubango.tinyWRAP.tmedia_mode_t) -> setAvpfMode
    boolean setICE(boolean) -> setICE
    boolean setQoS(org.doubango.tinyWRAP.tmedia_qos_stype_t,org.doubango.tinyWRAP.tmedia_qos_strength_t) -> setQoS
    boolean hold(org.doubango.tinyWRAP.ActionConfig) -> hold
    boolean hold() -> hold
    boolean resume(org.doubango.tinyWRAP.ActionConfig) -> resume
    boolean resume() -> resume
    boolean transfer(java.lang.String,org.doubango.tinyWRAP.ActionConfig) -> transfer
    boolean transfer(java.lang.String) -> transfer
    boolean acceptTransfer(org.doubango.tinyWRAP.ActionConfig) -> acceptTransfer
    boolean acceptTransfer() -> acceptTransfer
    boolean rejectTransfer(org.doubango.tinyWRAP.ActionConfig) -> rejectTransfer
    boolean rejectTransfer() -> rejectTransfer
    boolean sendDTMF(int) -> sendDTMF
    long getSessionTransferId() -> getSessionTransferId
    boolean sendT140Data(org.doubango.tinyWRAP.tmedia_t140_data_type_t,java.nio.ByteBuffer,long) -> sendT140Data
    boolean sendT140Data(org.doubango.tinyWRAP.tmedia_t140_data_type_t,java.nio.ByteBuffer) -> sendT140Data
    boolean sendT140Data(org.doubango.tinyWRAP.tmedia_t140_data_type_t) -> sendT140Data
    boolean setT140Callback(org.doubango.tinyWRAP.T140Callback) -> setT140Callback
org.doubango.tinyWRAP.Codec -> org.doubango.tinyWRAP.Codec:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.Codec) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.twrap_media_type_t getMediaType() -> getMediaType
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    java.lang.String getNegFormat() -> getNegFormat
    int getAudioSamplingRate() -> getAudioSamplingRate
    int getAudioChannels() -> getAudioChannels
    int getAudioPTime() -> getAudioPTime
org.doubango.tinyWRAP.DDebugCallback -> org.doubango.tinyWRAP.DDebugCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.DDebugCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int OnDebugInfo(java.lang.String) -> OnDebugInfo
    int OnDebugWarn(java.lang.String) -> OnDebugWarn
    int OnDebugError(java.lang.String) -> OnDebugError
    int OnDebugFatal(java.lang.String) -> OnDebugFatal
org.doubango.tinyWRAP.DialogEvent -> org.doubango.tinyWRAP.DialogEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.DialogEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
org.doubango.tinyWRAP.InfoEvent -> org.doubango.tinyWRAP.InfoEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.InfoEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_info_event_type_t getType() -> getType
    org.doubango.tinyWRAP.InfoSession getSession() -> getSession
    org.doubango.tinyWRAP.InfoSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.InfoSession -> org.doubango.tinyWRAP.InfoSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.InfoSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean send(java.nio.ByteBuffer,long,org.doubango.tinyWRAP.ActionConfig) -> send
    boolean send(java.nio.ByteBuffer,long) -> send
    boolean accept(org.doubango.tinyWRAP.ActionConfig) -> accept
    boolean accept() -> accept
    boolean reject(org.doubango.tinyWRAP.ActionConfig) -> reject
    boolean reject() -> reject
org.doubango.tinyWRAP.InviteEvent -> org.doubango.tinyWRAP.InviteEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.InviteEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_invite_event_type_t getType() -> getType
    org.doubango.tinyWRAP.twrap_media_type_t getMediaType() -> getMediaType
    org.doubango.tinyWRAP.InviteSession getSession() -> getSession
    org.doubango.tinyWRAP.CallSession takeCallSessionOwnership() -> takeCallSessionOwnership
    org.doubango.tinyWRAP.MsrpSession takeMsrpSessionOwnership() -> takeMsrpSessionOwnership
org.doubango.tinyWRAP.InviteSession -> org.doubango.tinyWRAP.InviteSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.InviteSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean accept(org.doubango.tinyWRAP.ActionConfig) -> accept
    boolean accept() -> accept
    boolean hangup(org.doubango.tinyWRAP.ActionConfig) -> hangup
    boolean hangup() -> hangup
    boolean reject(org.doubango.tinyWRAP.ActionConfig) -> reject
    boolean reject() -> reject
    boolean sendInfo(java.nio.ByteBuffer,long,org.doubango.tinyWRAP.ActionConfig) -> sendInfo
    boolean sendInfo(java.nio.ByteBuffer,long) -> sendInfo
    org.doubango.tinyWRAP.MediaSessionMgr getMediaMgr() -> getMediaMgr
org.doubango.tinyWRAP.MediaContent -> org.doubango.tinyWRAP.MediaContent:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.MediaContent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    java.lang.String getType() -> getType
    long getDataLength() -> getDataLength
    long getData(java.nio.ByteBuffer,long) -> getData
    org.doubango.tinyWRAP.MediaContent parse(java.nio.ByteBuffer,long,java.lang.String) -> parse
    org.doubango.tinyWRAP.MediaContentCPIM parse(java.nio.ByteBuffer,long) -> parse
    long getPayloadLength() -> getPayloadLength
    long getPayload(java.nio.ByteBuffer,long) -> getPayload
org.doubango.tinyWRAP.MediaContentCPIM -> org.doubango.tinyWRAP.MediaContentCPIM:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.MediaContentCPIM) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    long getPayloadLength() -> getPayloadLength
    long getPayload(java.nio.ByteBuffer,long) -> getPayload
    java.lang.String getHeaderValue(java.lang.String) -> getHeaderValue
org.doubango.tinyWRAP.MediaSessionMgr -> org.doubango.tinyWRAP.MediaSessionMgr:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.MediaSessionMgr) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean sessionSetInt32(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,int) -> sessionSetInt32
    int sessionGetInt32(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String) -> sessionGetInt32
    boolean consumerSetInt32(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,int) -> consumerSetInt32
    boolean consumerSetInt64(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,long) -> consumerSetInt64
    boolean producerSetInt32(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,int) -> producerSetInt32
    boolean producerSetInt64(org.doubango.tinyWRAP.twrap_media_type_t,java.lang.String,long) -> producerSetInt64
    org.doubango.tinyWRAP.Codec producerGetCodec(org.doubango.tinyWRAP.twrap_media_type_t) -> producerGetCodec
    org.doubango.tinyWRAP.ProxyPlugin findProxyPluginConsumer(org.doubango.tinyWRAP.twrap_media_type_t) -> findProxyPluginConsumer
    org.doubango.tinyWRAP.ProxyPlugin findProxyPluginProducer(org.doubango.tinyWRAP.twrap_media_type_t) -> findProxyPluginProducer
    long registerAudioPluginFromFile(java.lang.String) -> registerAudioPluginFromFile
    java.math.BigInteger getSessionId(org.doubango.tinyWRAP.twrap_media_type_t) -> getSessionId
    boolean defaultsSetProfile(org.doubango.tinyWRAP.tmedia_profile_t) -> defaultsSetProfile
    org.doubango.tinyWRAP.tmedia_profile_t defaultsGetProfile() -> defaultsGetProfile
    boolean defaultsSetBandwidthLevel(org.doubango.tinyWRAP.tmedia_bandwidth_level_t) -> defaultsSetBandwidthLevel
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t defaultsGetBandwidthLevel() -> defaultsGetBandwidthLevel
    boolean defaultsSetCongestionCtrlEnabled(boolean) -> defaultsSetCongestionCtrlEnabled
    boolean defaultsSetVideoMotionRank(int) -> defaultsSetVideoMotionRank
    boolean defaultsSetVideoFps(int) -> defaultsSetVideoFps
    boolean defaultsSetBandwidthVideoUploadMax(int) -> defaultsSetBandwidthVideoUploadMax
    boolean defaultsSetBandwidthVideoDownloadMax(int) -> defaultsSetBandwidthVideoDownloadMax
    boolean defaultsSetPrefVideoSize(org.doubango.tinyWRAP.tmedia_pref_video_size_t) -> defaultsSetPrefVideoSize
    boolean defaultsSetJbMargin(long) -> defaultsSetJbMargin
    boolean defaultsSetJbMaxLateRate(long) -> defaultsSetJbMaxLateRate
    boolean defaultsSetEchoTail(long) -> defaultsSetEchoTail
    long defaultsGetEchoTail() -> defaultsGetEchoTail
    boolean defaultsSetEchoSkew(long) -> defaultsSetEchoSkew
    boolean defaultsSetEchoSuppEnabled(boolean) -> defaultsSetEchoSuppEnabled
    boolean defaultsGetEchoSuppEnabled() -> defaultsGetEchoSuppEnabled
    boolean defaultsSetAgcEnabled(boolean) -> defaultsSetAgcEnabled
    boolean defaultsGetAgcEnabled() -> defaultsGetAgcEnabled
    boolean defaultsSetAgcLevel(float) -> defaultsSetAgcLevel
    float defaultsGetAgcLevel() -> defaultsGetAgcLevel
    boolean defaultsSetVadEnabled(boolean) -> defaultsSetVadEnabled
    boolean defaultsGetGetVadEnabled() -> defaultsGetGetVadEnabled
    boolean defaultsSetNoiseSuppEnabled(boolean) -> defaultsSetNoiseSuppEnabled
    boolean defaultsGetNoiseSuppEnabled() -> defaultsGetNoiseSuppEnabled
    boolean defaultsSetNoiseSuppLevel(int) -> defaultsSetNoiseSuppLevel
    int defaultsGetNoiseSuppLevel() -> defaultsGetNoiseSuppLevel
    boolean defaultsSet100relEnabled(boolean) -> defaultsSet100relEnabled
    boolean defaultsGet100relEnabled() -> defaultsGet100relEnabled
    boolean defaultsSetScreenSize(int,int) -> defaultsSetScreenSize
    boolean defaultsSetAudioGain(int,int) -> defaultsSetAudioGain
    boolean defaultsSetAudioPtime(int) -> defaultsSetAudioPtime
    boolean defaultsSetAudioChannels(int,int) -> defaultsSetAudioChannels
    boolean defaultsSetRtpPortRange(int,int) -> defaultsSetRtpPortRange
    boolean defaultsSetRtpSymetricEnabled(boolean) -> defaultsSetRtpSymetricEnabled
    boolean defaultsSetMediaType(org.doubango.tinyWRAP.twrap_media_type_t) -> defaultsSetMediaType
    boolean defaultsSetVolume(int) -> defaultsSetVolume
    int defaultsGetVolume() -> defaultsGetVolume
    boolean defaultsSetInviteSessionTimers(int,java.lang.String) -> defaultsSetInviteSessionTimers
    boolean defaultsSetSRtpMode(org.doubango.tinyWRAP.tmedia_srtp_mode_t) -> defaultsSetSRtpMode
    org.doubango.tinyWRAP.tmedia_srtp_mode_t defaultsGetSRtpMode() -> defaultsGetSRtpMode
    boolean defaultsSetSRtpType(org.doubango.tinyWRAP.tmedia_srtp_type_t) -> defaultsSetSRtpType
    org.doubango.tinyWRAP.tmedia_srtp_type_t defaultsGetSRtpType() -> defaultsGetSRtpType
    boolean defaultsSetRtcpEnabled(boolean) -> defaultsSetRtcpEnabled
    boolean defaultsGetRtcpEnabled() -> defaultsGetRtcpEnabled
    boolean defaultsSetRtcpMuxEnabled(boolean) -> defaultsSetRtcpMuxEnabled
    boolean defaultsGetRtcpMuxEnabled() -> defaultsGetRtcpMuxEnabled
    boolean defaultsSetStunEnabled(boolean) -> defaultsSetStunEnabled
    boolean defaultsSetIceStunEnabled(boolean) -> defaultsSetIceStunEnabled
    boolean defaultsSetStunServer(java.lang.String,int,java.lang.String,java.lang.String) -> defaultsSetStunServer
    boolean defaultsSetStunServer(java.lang.String,int,java.lang.String) -> defaultsSetStunServer
    boolean defaultsSetStunServer(java.lang.String,int) -> defaultsSetStunServer
    boolean defaultsSetIceEnabled(boolean) -> defaultsSetIceEnabled
    boolean defaultsSetByPassEncoding(boolean) -> defaultsSetByPassEncoding
    boolean defaultsGetByPassEncoding() -> defaultsGetByPassEncoding
    boolean defaultsSetByPassDecoding(boolean) -> defaultsSetByPassDecoding
    boolean defaultsGetByPassDecoding() -> defaultsGetByPassDecoding
    boolean defaultsSetVideoJbEnabled(boolean) -> defaultsSetVideoJbEnabled
    boolean defaultsGetVideoJbEnabled() -> defaultsGetVideoJbEnabled
    boolean defaultsSetVideoZeroArtifactsEnabled(boolean) -> defaultsSetVideoZeroArtifactsEnabled
    boolean defaultsGetVideoZeroArtifactsEnabled() -> defaultsGetVideoZeroArtifactsEnabled
    boolean defaultsSetRtpBuffSize(long) -> defaultsSetRtpBuffSize
    long defaultsGetRtpBuffSize() -> defaultsGetRtpBuffSize
    boolean defaultsSetAvpfTail(long,long) -> defaultsSetAvpfTail
    boolean defaultsSetAvpfMode(org.doubango.tinyWRAP.tmedia_mode_t) -> defaultsSetAvpfMode
    boolean defaultsSetOpusMaxCaptureRate(long) -> defaultsSetOpusMaxCaptureRate
    boolean defaultsSetOpusMaxPlaybackRate(long) -> defaultsSetOpusMaxPlaybackRate
    boolean defaultsSetMaxFds(int) -> defaultsSetMaxFds
org.doubango.tinyWRAP.MessagingEvent -> org.doubango.tinyWRAP.MessagingEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.MessagingEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_message_event_type_t getType() -> getType
    org.doubango.tinyWRAP.MessagingSession getSession() -> getSession
    org.doubango.tinyWRAP.MessagingSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.MessagingSession -> org.doubango.tinyWRAP.MessagingSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.MessagingSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean send(java.nio.ByteBuffer,long,org.doubango.tinyWRAP.ActionConfig) -> send
    boolean send(java.nio.ByteBuffer,long) -> send
    boolean accept(org.doubango.tinyWRAP.ActionConfig) -> accept
    boolean accept() -> accept
    boolean reject(org.doubango.tinyWRAP.ActionConfig) -> reject
    boolean reject() -> reject
org.doubango.tinyWRAP.MsrpCallback -> org.doubango.tinyWRAP.MsrpCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.MsrpCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int OnEvent(org.doubango.tinyWRAP.MsrpEvent) -> OnEvent
org.doubango.tinyWRAP.MsrpEvent -> org.doubango.tinyWRAP.MsrpEvent:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.MsrpEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tmsrp_event_type_t getType() -> getType
    org.doubango.tinyWRAP.MsrpSession getSipSession() -> getSipSession
    org.doubango.tinyWRAP.MsrpMessage getMessage() -> getMessage
org.doubango.tinyWRAP.MsrpMessage -> org.doubango.tinyWRAP.MsrpMessage:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.MsrpMessage) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean isRequest() -> isRequest
    short getCode() -> getCode
    java.lang.String getPhrase() -> getPhrase
    org.doubango.tinyWRAP.tmsrp_request_type_t getRequestType() -> getRequestType
    void getByteRange(long[],long[],long[]) -> getByteRange
    boolean isLastChunck() -> isLastChunck
    boolean isFirstChunck() -> isFirstChunck
    boolean isSuccessReport() -> isSuccessReport
    java.lang.String getMsrpHeaderValue(java.lang.String) -> getMsrpHeaderValue
    java.lang.String getMsrpHeaderParamValue(java.lang.String,java.lang.String) -> getMsrpHeaderParamValue
    long getMsrpContentLength() -> getMsrpContentLength
    long getMsrpContent(java.nio.ByteBuffer,long) -> getMsrpContent
org.doubango.tinyWRAP.MsrpSession -> org.doubango.tinyWRAP.MsrpSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.MsrpSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean setCallback(org.doubango.tinyWRAP.MsrpCallback) -> setCallback
    boolean callMsrp(java.lang.String,org.doubango.tinyWRAP.ActionConfig) -> callMsrp
    boolean callMsrp(java.lang.String) -> callMsrp
    boolean callMsrp(org.doubango.tinyWRAP.SipUri,org.doubango.tinyWRAP.ActionConfig) -> callMsrp
    boolean callMsrp(org.doubango.tinyWRAP.SipUri) -> callMsrp
    boolean sendMessage(java.nio.ByteBuffer,long,org.doubango.tinyWRAP.ActionConfig) -> sendMessage
    boolean sendMessage(java.nio.ByteBuffer,long) -> sendMessage
    boolean sendFile(org.doubango.tinyWRAP.ActionConfig) -> sendFile
    boolean sendFile() -> sendFile
org.doubango.tinyWRAP.OptionsEvent -> org.doubango.tinyWRAP.OptionsEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.OptionsEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_options_event_type_t getType() -> getType
    org.doubango.tinyWRAP.OptionsSession getSession() -> getSession
    org.doubango.tinyWRAP.OptionsSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.OptionsSession -> org.doubango.tinyWRAP.OptionsSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.OptionsSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean send(org.doubango.tinyWRAP.ActionConfig) -> send
    boolean send() -> send
    boolean accept(org.doubango.tinyWRAP.ActionConfig) -> accept
    boolean accept() -> accept
    boolean reject(org.doubango.tinyWRAP.ActionConfig) -> reject
    boolean reject() -> reject
org.doubango.tinyWRAP.ProxyAudioConsumer -> org.doubango.tinyWRAP.ProxyAudioConsumer:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.ProxyAudioConsumer) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean setActualSndCardPlaybackParams(int,int,int) -> setActualSndCardPlaybackParams
    boolean queryForResampler(int,int,int,int,int) -> queryForResampler
    boolean setPullBuffer(java.nio.ByteBuffer,long) -> setPullBuffer
    long pull(java.nio.ByteBuffer,long) -> pull
    long pull(java.nio.ByteBuffer) -> pull
    long pull() -> pull
    boolean setGain(long) -> setGain
    long getGain() -> getGain
    boolean reset() -> reset
    void setCallback(org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> setCallback
    java.math.BigInteger getMediaSessionId() -> getMediaSessionId
    boolean registerPlugin() -> registerPlugin
org.doubango.tinyWRAP.ProxyAudioConsumerCallback -> org.doubango.tinyWRAP.ProxyAudioConsumerCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.tinyWRAP.ProxyAudioProducer -> org.doubango.tinyWRAP.ProxyAudioProducer:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.ProxyAudioProducer) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean setActualSndCardRecordParams(int,int,int) -> setActualSndCardRecordParams
    boolean setPushBuffer(java.nio.ByteBuffer,long,boolean) -> setPushBuffer
    boolean setPushBuffer(java.nio.ByteBuffer,long) -> setPushBuffer
    int push(java.nio.ByteBuffer,long) -> push
    int push(java.nio.ByteBuffer) -> push
    int push() -> push
    boolean setGain(long) -> setGain
    long getGain() -> getGain
    void setCallback(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> setCallback
    java.math.BigInteger getMediaSessionId() -> getMediaSessionId
    boolean registerPlugin() -> registerPlugin
org.doubango.tinyWRAP.ProxyAudioProducerCallback -> org.doubango.tinyWRAP.ProxyAudioProducerCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
    int fillPushBuffer() -> fillPushBuffer
org.doubango.tinyWRAP.ProxyPlugin -> org.doubango.tinyWRAP.ProxyPlugin:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyPlugin) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t getType() -> getType
    java.math.BigInteger getId() -> getId
org.doubango.tinyWRAP.ProxyPluginMgr -> org.doubango.tinyWRAP.ProxyPluginMgr:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyPluginMgr) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.ProxyPluginMgr createInstance(org.doubango.tinyWRAP.ProxyPluginMgrCallback) -> createInstance
    org.doubango.tinyWRAP.ProxyPluginMgr getInstance() -> getInstance
    org.doubango.tinyWRAP.ProxyPlugin findPlugin(java.math.BigInteger) -> findPlugin
    org.doubango.tinyWRAP.ProxyAudioConsumer findAudioConsumer(java.math.BigInteger) -> findAudioConsumer
    org.doubango.tinyWRAP.ProxyVideoConsumer findVideoConsumer(java.math.BigInteger) -> findVideoConsumer
    org.doubango.tinyWRAP.ProxyAudioProducer findAudioProducer(java.math.BigInteger) -> findAudioProducer
    org.doubango.tinyWRAP.ProxyVideoProducer findVideoProducer(java.math.BigInteger) -> findVideoProducer
org.doubango.tinyWRAP.ProxyPluginMgrCallback -> org.doubango.tinyWRAP.ProxyPluginMgrCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyPluginMgrCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int OnPluginCreated(java.math.BigInteger,org.doubango.tinyWRAP.twrap_proxy_plugin_type_t) -> OnPluginCreated
    int OnPluginDestroyed(java.math.BigInteger,org.doubango.tinyWRAP.twrap_proxy_plugin_type_t) -> OnPluginDestroyed
org.doubango.tinyWRAP.ProxyVideoConsumer -> org.doubango.tinyWRAP.ProxyVideoConsumer:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.ProxyVideoConsumer) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean setDisplaySize(long,long) -> setDisplaySize
    long getDisplayWidth() -> getDisplayWidth
    long getDisplayHeight() -> getDisplayHeight
    long getDecodedWidth() -> getDecodedWidth
    long getDecodedHeight() -> getDecodedHeight
    void setCallback(org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> setCallback
    boolean setAutoResizeDisplay(boolean) -> setAutoResizeDisplay
    boolean getAutoResizeDisplay() -> getAutoResizeDisplay
    boolean setConsumeBuffer(java.nio.ByteBuffer,long) -> setConsumeBuffer
    long pull(java.nio.ByteBuffer,long) -> pull
    boolean reset() -> reset
    java.math.BigInteger getMediaSessionId() -> getMediaSessionId
    boolean registerPlugin() -> registerPlugin
    void setDefaultChroma(org.doubango.tinyWRAP.tmedia_chroma_t) -> setDefaultChroma
    void setDefaultAutoResizeDisplay(boolean) -> setDefaultAutoResizeDisplay
org.doubango.tinyWRAP.ProxyVideoConsumerCallback -> org.doubango.tinyWRAP.ProxyVideoConsumerCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int prepare(int,int,int) -> prepare
    int consume(org.doubango.tinyWRAP.ProxyVideoFrame) -> consume
    int bufferCopied(long,long) -> bufferCopied
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.tinyWRAP.ProxyVideoFrame -> org.doubango.tinyWRAP.ProxyVideoFrame:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyVideoFrame) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    long getSize() -> getSize
    long getContent(java.nio.ByteBuffer,long) -> getContent
    long getFrameWidth() -> getFrameWidth
    long getFrameHeight() -> getFrameHeight
org.doubango.tinyWRAP.ProxyVideoProducer -> org.doubango.tinyWRAP.ProxyVideoProducer:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.ProxyVideoProducer) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    int getRotation() -> getRotation
    boolean setRotation(int) -> setRotation
    boolean setActualCameraOutputSize(long,long) -> setActualCameraOutputSize
    int push(java.nio.ByteBuffer,long) -> push
    void setCallback(org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> setCallback
    java.math.BigInteger getMediaSessionId() -> getMediaSessionId
    boolean registerPlugin() -> registerPlugin
    void setDefaultChroma(org.doubango.tinyWRAP.tmedia_chroma_t) -> setDefaultChroma
org.doubango.tinyWRAP.ProxyVideoProducerCallback -> org.doubango.tinyWRAP.ProxyVideoProducerCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int prepare(int,int,int) -> prepare
    int start() -> start
    int pause() -> pause
    int stop() -> stop
org.doubango.tinyWRAP.PublicationEvent -> org.doubango.tinyWRAP.PublicationEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.PublicationEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_publish_event_type_t getType() -> getType
    org.doubango.tinyWRAP.PublicationSession getSession() -> getSession
    org.doubango.tinyWRAP.PublicationSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.PublicationSession -> org.doubango.tinyWRAP.PublicationSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.PublicationSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean Publish(byte[]) -> Publish
    boolean publish(java.nio.ByteBuffer,long,org.doubango.tinyWRAP.ActionConfig) -> publish
    boolean publish(java.nio.ByteBuffer,long) -> publish
    boolean unPublish(org.doubango.tinyWRAP.ActionConfig) -> unPublish
    boolean unPublish() -> unPublish
org.doubango.tinyWRAP.RPMessage -> org.doubango.tinyWRAP.RPMessage:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.RPMessage) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.twrap_rpmessage_type_t getType() -> getType
    long getPayloadLength() -> getPayloadLength
    long getPayload(java.nio.ByteBuffer,long) -> getPayload
org.doubango.tinyWRAP.RegistrationEvent -> org.doubango.tinyWRAP.RegistrationEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.RegistrationEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_register_event_type_t getType() -> getType
    org.doubango.tinyWRAP.RegistrationSession getSession() -> getSession
    org.doubango.tinyWRAP.RegistrationSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.RegistrationSession -> org.doubango.tinyWRAP.RegistrationSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.RegistrationSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean register_(org.doubango.tinyWRAP.ActionConfig) -> register_
    boolean register_() -> register_
    boolean unRegister(org.doubango.tinyWRAP.ActionConfig) -> unRegister
    boolean unRegister() -> unRegister
    boolean accept(org.doubango.tinyWRAP.ActionConfig) -> accept
    boolean accept() -> accept
    boolean reject(org.doubango.tinyWRAP.ActionConfig) -> reject
    boolean reject() -> reject
org.doubango.tinyWRAP.SMSData -> org.doubango.tinyWRAP.SMSData:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SMSData) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.twrap_sms_type_t getType() -> getType
    int getMR() -> getMR
    long getPayloadLength() -> getPayloadLength
    long getPayload(java.nio.ByteBuffer,long) -> getPayload
    java.lang.String getOA() -> getOA
    java.lang.String getDA() -> getDA
org.doubango.tinyWRAP.SMSEncoder -> org.doubango.tinyWRAP.SMSEncoder:
    java.lang.String TAG -> TAG
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SMSEncoder) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.RPMessage encodeSubmit(int,java.lang.String,java.lang.String,java.lang.String) -> encodeSubmit
    org.doubango.tinyWRAP.RPMessage encodeDeliver(int,java.lang.String,java.lang.String,java.lang.String) -> encodeDeliver
    org.doubango.tinyWRAP.RPMessage encodeACK(int,java.lang.String,java.lang.String,boolean) -> encodeACK
    org.doubango.tinyWRAP.RPMessage encodeError(int,java.lang.String,java.lang.String,boolean) -> encodeError
    org.doubango.tinyWRAP.SMSData decode(java.nio.ByteBuffer,long,boolean) -> decode
org.doubango.tinyWRAP.SafeObject -> org.doubango.tinyWRAP.SafeObject:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SafeObject) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    int Lock() -> Lock
    int UnLock() -> UnLock
org.doubango.tinyWRAP.SdpMessage -> org.doubango.tinyWRAP.SdpMessage:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SdpMessage) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    java.lang.String getSdpHeaderValue(java.lang.String,char,long) -> getSdpHeaderValue
    java.lang.String getSdpHeaderValue(java.lang.String,char) -> getSdpHeaderValue
    java.lang.String getSdpHeaderAValue(java.lang.String,java.lang.String) -> getSdpHeaderAValue
org.doubango.tinyWRAP.SipCallback -> org.doubango.tinyWRAP.SipCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SipCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int OnDialogEvent(org.doubango.tinyWRAP.DialogEvent) -> OnDialogEvent
    int OnStackEvent(org.doubango.tinyWRAP.StackEvent) -> OnStackEvent
    int OnInviteEvent(org.doubango.tinyWRAP.InviteEvent) -> OnInviteEvent
    int OnMessagingEvent(org.doubango.tinyWRAP.MessagingEvent) -> OnMessagingEvent
    int OnInfoEvent(org.doubango.tinyWRAP.InfoEvent) -> OnInfoEvent
    int OnOptionsEvent(org.doubango.tinyWRAP.OptionsEvent) -> OnOptionsEvent
    int OnPublicationEvent(org.doubango.tinyWRAP.PublicationEvent) -> OnPublicationEvent
    int OnRegistrationEvent(org.doubango.tinyWRAP.RegistrationEvent) -> OnRegistrationEvent
    int OnSubscriptionEvent(org.doubango.tinyWRAP.SubscriptionEvent) -> OnSubscriptionEvent
org.doubango.tinyWRAP.SipEvent -> org.doubango.tinyWRAP.SipEvent:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SipEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    short getCode() -> getCode
    java.lang.String getPhrase() -> getPhrase
    org.doubango.tinyWRAP.SipSession getBaseSession() -> getBaseSession
    org.doubango.tinyWRAP.SipMessage getSipMessage() -> getSipMessage
org.doubango.tinyWRAP.SipMessage -> org.doubango.tinyWRAP.SipMessage:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SipMessage) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    byte[] getSipContent() -> getSipContent
    boolean isResponse() -> isResponse
    org.doubango.tinyWRAP.tsip_request_type_t getRequestType() -> getRequestType
    short getResponseCode() -> getResponseCode
    java.lang.String getResponsePhrase() -> getResponsePhrase
    java.lang.String getSipHeaderValue(java.lang.String,long) -> getSipHeaderValue
    java.lang.String getSipHeaderValue(java.lang.String) -> getSipHeaderValue
    java.lang.String getSipHeaderParamValue(java.lang.String,java.lang.String,long) -> getSipHeaderParamValue
    java.lang.String getSipHeaderParamValue(java.lang.String,java.lang.String) -> getSipHeaderParamValue
    long getSipContentLength() -> getSipContentLength
    long getSipContent(java.nio.ByteBuffer,long) -> getSipContent
    org.doubango.tinyWRAP.SdpMessage getSdpMessage() -> getSdpMessage
org.doubango.tinyWRAP.SipSession -> org.doubango.tinyWRAP.SipSession:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SipSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    java.nio.ByteBuffer getByteBuffer(byte[]) -> getByteBuffer
    boolean haveOwnership() -> haveOwnership
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean removeHeader(java.lang.String) -> removeHeader
    boolean addCaps(java.lang.String,java.lang.String) -> addCaps
    boolean addCaps(java.lang.String) -> addCaps
    boolean removeCaps(java.lang.String) -> removeCaps
    boolean setExpires(long) -> setExpires
    boolean setFromUri(java.lang.String) -> setFromUri
    boolean setFromUri(org.doubango.tinyWRAP.SipUri) -> setFromUri
    boolean setToUri(java.lang.String) -> setToUri
    boolean setToUri(org.doubango.tinyWRAP.SipUri) -> setToUri
    boolean setSilentHangup(boolean) -> setSilentHangup
    boolean addSigCompCompartment(java.lang.String) -> addSigCompCompartment
    boolean removeSigCompCompartment() -> removeSigCompCompartment
    long getId() -> getId
org.doubango.tinyWRAP.SipStack -> org.doubango.tinyWRAP.SipStack:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.SipStack) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean start() -> start
    boolean setDebugCallback(org.doubango.tinyWRAP.DDebugCallback) -> setDebugCallback
    boolean setDisplayName(java.lang.String) -> setDisplayName
    boolean setRealm(java.lang.String) -> setRealm
    boolean setIMPI(java.lang.String) -> setIMPI
    boolean setIMPU(java.lang.String) -> setIMPU
    boolean setPassword(java.lang.String) -> setPassword
    boolean setAMF(java.lang.String) -> setAMF
    boolean setOperatorId(java.lang.String) -> setOperatorId
    boolean setProxyCSCF(java.lang.String,int,java.lang.String,java.lang.String) -> setProxyCSCF
    boolean setLocalIP(java.lang.String,java.lang.String) -> setLocalIP
    boolean setLocalIP(java.lang.String) -> setLocalIP
    boolean setLocalPort(int,java.lang.String) -> setLocalPort
    boolean setLocalPort(int) -> setLocalPort
    boolean setEarlyIMS(boolean) -> setEarlyIMS
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean removeHeader(java.lang.String) -> removeHeader
    boolean addDnsServer(java.lang.String) -> addDnsServer
    boolean setDnsDiscovery(boolean) -> setDnsDiscovery
    boolean setAoR(java.lang.String,int) -> setAoR
    boolean setSigCompParams(long,long,long,boolean) -> setSigCompParams
    boolean addSigCompCompartment(java.lang.String) -> addSigCompCompartment
    boolean removeSigCompCompartment(java.lang.String) -> removeSigCompCompartment
    boolean setSTUNEnabledForICE(boolean) -> setSTUNEnabledForICE
    boolean setSTUNServer(java.lang.String,int) -> setSTUNServer
    boolean setSTUNCred(java.lang.String,java.lang.String) -> setSTUNCred
    boolean setSTUNEnabled(boolean) -> setSTUNEnabled
    boolean setTLSSecAgree(boolean) -> setTLSSecAgree
    boolean setSSLCertificates(java.lang.String,java.lang.String,java.lang.String,boolean) -> setSSLCertificates
    boolean setSSLCertificates(java.lang.String,java.lang.String,java.lang.String) -> setSSLCertificates
    boolean setSSLCretificates(java.lang.String,java.lang.String,java.lang.String,boolean) -> setSSLCretificates
    boolean setSSLCretificates(java.lang.String,java.lang.String,java.lang.String) -> setSSLCretificates
    boolean setIPSecSecAgree(boolean) -> setIPSecSecAgree
    boolean setIPSecParameters(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> setIPSecParameters
    java.lang.String dnsENUM(java.lang.String,java.lang.String,java.lang.String) -> dnsENUM
    java.lang.String dnsNaptrSrv(java.lang.String,java.lang.String,int[]) -> dnsNaptrSrv
    java.lang.String dnsSrv(java.lang.String,int[]) -> dnsSrv
    boolean setMaxFDs(long) -> setMaxFDs
    java.lang.String getLocalIPnPort(java.lang.String,int[]) -> getLocalIPnPort
    java.lang.String getPreferredIdentity() -> getPreferredIdentity
    boolean isValid() -> isValid
    boolean stop() -> stop
    boolean initialize() -> initialize
    boolean deInitialize() -> deInitialize
    void setCodecs(org.doubango.tinyWRAP.tdav_codec_id_t) -> setCodecs
    void setCodecs_2(long) -> setCodecs_2
    boolean setCodecPriority(org.doubango.tinyWRAP.tdav_codec_id_t,int) -> setCodecPriority
    boolean setCodecPriority_2(int,int) -> setCodecPriority_2
    boolean isCodecSupported(org.doubango.tinyWRAP.tdav_codec_id_t) -> isCodecSupported
    boolean isIPSecSupported() -> isIPSecSupported
org.doubango.tinyWRAP.SipUri -> org.doubango.tinyWRAP.SipUri:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.SipUri) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean isValid(java.lang.String) -> isValid
    boolean isValid() -> isValid
    java.lang.String getScheme() -> getScheme
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    java.lang.String getDisplayName() -> getDisplayName
    java.lang.String getParamValue(java.lang.String) -> getParamValue
    void setDisplayName(java.lang.String) -> setDisplayName
org.doubango.tinyWRAP.StackEvent -> org.doubango.tinyWRAP.StackEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.StackEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
org.doubango.tinyWRAP.SubscriptionEvent -> org.doubango.tinyWRAP.SubscriptionEvent:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.SubscriptionEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t getType() -> getType
    org.doubango.tinyWRAP.SubscriptionSession getSession() -> getSession
    org.doubango.tinyWRAP.SubscriptionSession takeSessionOwnership() -> takeSessionOwnership
org.doubango.tinyWRAP.SubscriptionSession -> org.doubango.tinyWRAP.SubscriptionSession:
    long swigCPtr -> swigCPtr
    long getCPtr(org.doubango.tinyWRAP.SubscriptionSession) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean subscribe() -> subscribe
    boolean unSubscribe() -> unSubscribe
org.doubango.tinyWRAP.T140Callback -> org.doubango.tinyWRAP.T140Callback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.T140Callback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int ondata(org.doubango.tinyWRAP.T140CallbackData) -> ondata
org.doubango.tinyWRAP.T140CallbackData -> org.doubango.tinyWRAP.T140CallbackData:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.T140CallbackData) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    byte[] getData() -> getData
    org.doubango.tinyWRAP.tmedia_t140_data_type_t getType() -> getType
    long getSize() -> getSize
    long getData(java.nio.ByteBuffer,long) -> getData
org.doubango.tinyWRAP.XcapCallback -> org.doubango.tinyWRAP.XcapCallback:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.XcapCallback) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    void swigDirectorDisconnect() -> swigDirectorDisconnect
    void swigReleaseOwnership() -> swigReleaseOwnership
    void swigTakeOwnership() -> swigTakeOwnership
    int onEvent(org.doubango.tinyWRAP.XcapEvent) -> onEvent
org.doubango.tinyWRAP.XcapEvent -> org.doubango.tinyWRAP.XcapEvent:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.XcapEvent) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.thttp_event_type_t getType() -> getType
    org.doubango.tinyWRAP.XcapMessage getXcapMessage() -> getXcapMessage
org.doubango.tinyWRAP.XcapMessage -> org.doubango.tinyWRAP.XcapMessage:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.XcapMessage) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    byte[] getXcapContent() -> getXcapContent
    short getCode() -> getCode
    java.lang.String getPhrase() -> getPhrase
    java.lang.String getXcapHeaderValue(java.lang.String,long) -> getXcapHeaderValue
    java.lang.String getXcapHeaderValue(java.lang.String) -> getXcapHeaderValue
    java.lang.String getXcapHeaderParamValue(java.lang.String,java.lang.String,long) -> getXcapHeaderParamValue
    java.lang.String getXcapHeaderParamValue(java.lang.String,java.lang.String) -> getXcapHeaderParamValue
    long getXcapContentLength() -> getXcapContentLength
    long getXcapContent(java.nio.ByteBuffer,long) -> getXcapContent
org.doubango.tinyWRAP.XcapSelector -> org.doubango.tinyWRAP.XcapSelector:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.XcapSelector) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    org.doubango.tinyWRAP.XcapSelector setAUID(java.lang.String) -> setAUID
    org.doubango.tinyWRAP.XcapSelector setName(java.lang.String) -> setName
    org.doubango.tinyWRAP.XcapSelector setAttribute(java.lang.String,java.lang.String,java.lang.String) -> setAttribute
    org.doubango.tinyWRAP.XcapSelector setPos(java.lang.String,long) -> setPos
    org.doubango.tinyWRAP.XcapSelector setPosAttribute(java.lang.String,long,java.lang.String,java.lang.String) -> setPosAttribute
    org.doubango.tinyWRAP.XcapSelector setNamespace(java.lang.String,java.lang.String) -> setNamespace
    java.lang.String getString() -> getString
    void reset() -> reset
org.doubango.tinyWRAP.XcapStack -> org.doubango.tinyWRAP.XcapStack:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.tinyWRAP.XcapStack) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    boolean registerAUID(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> registerAUID
    boolean start() -> start
    boolean setCredentials(java.lang.String,java.lang.String) -> setCredentials
    boolean setXcapRoot(java.lang.String) -> setXcapRoot
    boolean setLocalIP(java.lang.String) -> setLocalIP
    boolean setLocalPort(long) -> setLocalPort
    boolean addHeader(java.lang.String,java.lang.String) -> addHeader
    boolean removeHeader(java.lang.String) -> removeHeader
    boolean setTimeout(long) -> setTimeout
    boolean getDocument(java.lang.String) -> getDocument
    boolean getElement(java.lang.String) -> getElement
    boolean getAttribute(java.lang.String) -> getAttribute
    boolean deleteDocument(java.lang.String) -> deleteDocument
    boolean deleteElement(java.lang.String) -> deleteElement
    boolean deleteAttribute(java.lang.String) -> deleteAttribute
    boolean putDocument(java.lang.String,java.nio.ByteBuffer,long,java.lang.String) -> putDocument
    boolean putElement(java.lang.String,java.nio.ByteBuffer,long) -> putElement
    boolean putAttribute(java.lang.String,java.nio.ByteBuffer,long) -> putAttribute
    boolean stop() -> stop
org.doubango.tinyWRAP.tdav_codec_id_t -> org.doubango.tinyWRAP.tdav_codec_id_t:
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_none -> tdav_codec_id_none
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_amr_nb_oa -> tdav_codec_id_amr_nb_oa
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_amr_nb_be -> tdav_codec_id_amr_nb_be
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_amr_wb_oa -> tdav_codec_id_amr_wb_oa
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_amr_wb_be -> tdav_codec_id_amr_wb_be
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_gsm -> tdav_codec_id_gsm
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_pcma -> tdav_codec_id_pcma
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_pcmu -> tdav_codec_id_pcmu
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_ilbc -> tdav_codec_id_ilbc
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_speex_nb -> tdav_codec_id_speex_nb
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_speex_wb -> tdav_codec_id_speex_wb
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_speex_uwb -> tdav_codec_id_speex_uwb
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_bv16 -> tdav_codec_id_bv16
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_bv32 -> tdav_codec_id_bv32
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_opus -> tdav_codec_id_opus
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_g729ab -> tdav_codec_id_g729ab
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_g722 -> tdav_codec_id_g722
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h261 -> tdav_codec_id_h261
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h263 -> tdav_codec_id_h263
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h263p -> tdav_codec_id_h263p
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h263pp -> tdav_codec_id_h263pp
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_bp -> tdav_codec_id_h264_bp
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_mp -> tdav_codec_id_h264_mp
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_hp -> tdav_codec_id_h264_hp
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_bp10 -> tdav_codec_id_h264_bp10
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_bp20 -> tdav_codec_id_h264_bp20
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_bp30 -> tdav_codec_id_h264_bp30
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_h264_svc -> tdav_codec_id_h264_svc
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_theora -> tdav_codec_id_theora
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_mp4ves_es -> tdav_codec_id_mp4ves_es
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_vp8 -> tdav_codec_id_vp8
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_t140 -> tdav_codec_id_t140
    org.doubango.tinyWRAP.tdav_codec_id_t tdav_codec_id_red -> tdav_codec_id_red
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tdav_codec_id_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tdav_codec_id_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tdav_codec_id_t[] values() -> values
    org.doubango.tinyWRAP.tdav_codec_id_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tdav_codec_id_t$SwigNext -> org.doubango.tinyWRAP.tdav_codec_id_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.thttp_event_type_t -> org.doubango.tinyWRAP.thttp_event_type_t:
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_dialog_started -> thttp_event_dialog_started
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_message -> thttp_event_message
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_auth_failed -> thttp_event_auth_failed
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_closed -> thttp_event_closed
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_transport_error -> thttp_event_transport_error
    org.doubango.tinyWRAP.thttp_event_type_t thttp_event_dialog_terminated -> thttp_event_dialog_terminated
    int swigValue -> swigValue
    org.doubango.tinyWRAP.thttp_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.thttp_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.thttp_event_type_t[] values() -> values
    org.doubango.tinyWRAP.thttp_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.thttp_event_type_t$SwigNext -> org.doubango.tinyWRAP.thttp_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tinyWRAP -> org.doubango.tinyWRAP.tinyWRAP:
org.doubango.tinyWRAP.tinyWRAPConstants -> org.doubango.tinyWRAP.tinyWRAPConstants:
    int tsip_event_code_dialog_transport_error -> tsip_event_code_dialog_transport_error
    int tsip_event_code_dialog_global_error -> tsip_event_code_dialog_global_error
    int tsip_event_code_dialog_message_error -> tsip_event_code_dialog_message_error
    int tsip_event_code_dialog_request_incoming -> tsip_event_code_dialog_request_incoming
    int tsip_event_code_dialog_request_outgoing -> tsip_event_code_dialog_request_outgoing
    int tsip_event_code_dialog_request_cancelled -> tsip_event_code_dialog_request_cancelled
    int tsip_event_code_dialog_request_sent -> tsip_event_code_dialog_request_sent
    int tsip_event_code_dialog_connecting -> tsip_event_code_dialog_connecting
    int tsip_event_code_dialog_connected -> tsip_event_code_dialog_connected
    int tsip_event_code_dialog_terminating -> tsip_event_code_dialog_terminating
    int tsip_event_code_dialog_terminated -> tsip_event_code_dialog_terminated
    int tsip_event_code_stack_starting -> tsip_event_code_stack_starting
    int tsip_event_code_stack_started -> tsip_event_code_stack_started
    int tsip_event_code_stack_stopping -> tsip_event_code_stack_stopping
    int tsip_event_code_stack_stopped -> tsip_event_code_stack_stopped
    int tsip_event_code_stack_failed_to_start -> tsip_event_code_stack_failed_to_start
    int tsip_event_code_stack_failed_to_stop -> tsip_event_code_stack_failed_to_stop
    int tsip_event_code_stack_disconnected -> tsip_event_code_stack_disconnected
org.doubango.tinyWRAP.tinyWRAPJNI -> org.doubango.tinyWRAP.tinyWRAPJNI:
    long new_DDebugCallback() -> new_DDebugCallback
    void delete_DDebugCallback(long) -> delete_DDebugCallback
    int DDebugCallback_OnDebugInfo(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugInfo
    int DDebugCallback_OnDebugInfoSwigExplicitDDebugCallback(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugInfoSwigExplicitDDebugCallback
    int DDebugCallback_OnDebugWarn(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugWarn
    int DDebugCallback_OnDebugWarnSwigExplicitDDebugCallback(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugWarnSwigExplicitDDebugCallback
    int DDebugCallback_OnDebugError(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugError
    int DDebugCallback_OnDebugErrorSwigExplicitDDebugCallback(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugErrorSwigExplicitDDebugCallback
    int DDebugCallback_OnDebugFatal(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugFatal
    int DDebugCallback_OnDebugFatalSwigExplicitDDebugCallback(long,org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> DDebugCallback_OnDebugFatalSwigExplicitDDebugCallback
    void DDebugCallback_director_connect(org.doubango.tinyWRAP.DDebugCallback,long,boolean,boolean) -> DDebugCallback_director_connect
    void DDebugCallback_change_ownership(org.doubango.tinyWRAP.DDebugCallback,long,boolean) -> DDebugCallback_change_ownership
    long new_AudioResampler(long,long,long,long,long) -> new_AudioResampler
    void delete_AudioResampler(long) -> delete_AudioResampler
    boolean AudioResampler_isValid(long,org.doubango.tinyWRAP.AudioResampler) -> AudioResampler_isValid
    long AudioResampler_getOutputRequiredSizeInShort(long,org.doubango.tinyWRAP.AudioResampler) -> AudioResampler_getOutputRequiredSizeInShort
    long AudioResampler_getInputRequiredSizeInShort(long,org.doubango.tinyWRAP.AudioResampler) -> AudioResampler_getInputRequiredSizeInShort
    long AudioResampler_process(long,org.doubango.tinyWRAP.AudioResampler,java.nio.ByteBuffer,long,java.nio.ByteBuffer,long) -> AudioResampler_process
    long new_ActionConfig() -> new_ActionConfig
    void delete_ActionConfig(long) -> delete_ActionConfig
    boolean ActionConfig_addHeader(long,org.doubango.tinyWRAP.ActionConfig,java.lang.String,java.lang.String) -> ActionConfig_addHeader
    boolean ActionConfig_addPayload(long,org.doubango.tinyWRAP.ActionConfig,java.nio.ByteBuffer,long) -> ActionConfig_addPayload
    boolean ActionConfig_setActiveMedia(long,org.doubango.tinyWRAP.ActionConfig,int) -> ActionConfig_setActiveMedia
    long ActionConfig_setResponseLine(long,org.doubango.tinyWRAP.ActionConfig,short,java.lang.String) -> ActionConfig_setResponseLine
    long ActionConfig_setMediaString(long,org.doubango.tinyWRAP.ActionConfig,int,java.lang.String,java.lang.String) -> ActionConfig_setMediaString
    long ActionConfig_setMediaInt(long,org.doubango.tinyWRAP.ActionConfig,int,java.lang.String,int) -> ActionConfig_setMediaInt
    void delete_Codec(long) -> delete_Codec
    int Codec_getMediaType(long,org.doubango.tinyWRAP.Codec) -> Codec_getMediaType
    java.lang.String Codec_getName(long,org.doubango.tinyWRAP.Codec) -> Codec_getName
    java.lang.String Codec_getDescription(long,org.doubango.tinyWRAP.Codec) -> Codec_getDescription
    java.lang.String Codec_getNegFormat(long,org.doubango.tinyWRAP.Codec) -> Codec_getNegFormat
    int Codec_getAudioSamplingRate(long,org.doubango.tinyWRAP.Codec) -> Codec_getAudioSamplingRate
    int Codec_getAudioChannels(long,org.doubango.tinyWRAP.Codec) -> Codec_getAudioChannels
    int Codec_getAudioPTime(long,org.doubango.tinyWRAP.Codec) -> Codec_getAudioPTime
    void delete_MediaSessionMgr(long) -> delete_MediaSessionMgr
    boolean MediaSessionMgr_sessionSetInt32(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String,int) -> MediaSessionMgr_sessionSetInt32
    int MediaSessionMgr_sessionGetInt32(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String) -> MediaSessionMgr_sessionGetInt32
    boolean MediaSessionMgr_consumerSetInt32(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String,int) -> MediaSessionMgr_consumerSetInt32
    boolean MediaSessionMgr_consumerSetInt64(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String,long) -> MediaSessionMgr_consumerSetInt64
    boolean MediaSessionMgr_producerSetInt32(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String,int) -> MediaSessionMgr_producerSetInt32
    boolean MediaSessionMgr_producerSetInt64(long,org.doubango.tinyWRAP.MediaSessionMgr,int,java.lang.String,long) -> MediaSessionMgr_producerSetInt64
    long MediaSessionMgr_producerGetCodec(long,org.doubango.tinyWRAP.MediaSessionMgr,int) -> MediaSessionMgr_producerGetCodec
    long MediaSessionMgr_findProxyPluginConsumer(long,org.doubango.tinyWRAP.MediaSessionMgr,int) -> MediaSessionMgr_findProxyPluginConsumer
    long MediaSessionMgr_findProxyPluginProducer(long,org.doubango.tinyWRAP.MediaSessionMgr,int) -> MediaSessionMgr_findProxyPluginProducer
    long MediaSessionMgr_registerAudioPluginFromFile(java.lang.String) -> MediaSessionMgr_registerAudioPluginFromFile
    java.math.BigInteger MediaSessionMgr_getSessionId(long,org.doubango.tinyWRAP.MediaSessionMgr,int) -> MediaSessionMgr_getSessionId
    boolean MediaSessionMgr_defaultsSetProfile(int) -> MediaSessionMgr_defaultsSetProfile
    int MediaSessionMgr_defaultsGetProfile() -> MediaSessionMgr_defaultsGetProfile
    boolean MediaSessionMgr_defaultsSetBandwidthLevel(int) -> MediaSessionMgr_defaultsSetBandwidthLevel
    int MediaSessionMgr_defaultsGetBandwidthLevel() -> MediaSessionMgr_defaultsGetBandwidthLevel
    boolean MediaSessionMgr_defaultsSetCongestionCtrlEnabled(boolean) -> MediaSessionMgr_defaultsSetCongestionCtrlEnabled
    boolean MediaSessionMgr_defaultsSetVideoMotionRank(int) -> MediaSessionMgr_defaultsSetVideoMotionRank
    boolean MediaSessionMgr_defaultsSetVideoFps(int) -> MediaSessionMgr_defaultsSetVideoFps
    boolean MediaSessionMgr_defaultsSetBandwidthVideoUploadMax(int) -> MediaSessionMgr_defaultsSetBandwidthVideoUploadMax
    boolean MediaSessionMgr_defaultsSetBandwidthVideoDownloadMax(int) -> MediaSessionMgr_defaultsSetBandwidthVideoDownloadMax
    boolean MediaSessionMgr_defaultsSetPrefVideoSize(int) -> MediaSessionMgr_defaultsSetPrefVideoSize
    boolean MediaSessionMgr_defaultsSetJbMargin(long) -> MediaSessionMgr_defaultsSetJbMargin
    boolean MediaSessionMgr_defaultsSetJbMaxLateRate(long) -> MediaSessionMgr_defaultsSetJbMaxLateRate
    boolean MediaSessionMgr_defaultsSetEchoTail(long) -> MediaSessionMgr_defaultsSetEchoTail
    long MediaSessionMgr_defaultsGetEchoTail() -> MediaSessionMgr_defaultsGetEchoTail
    boolean MediaSessionMgr_defaultsSetEchoSkew(long) -> MediaSessionMgr_defaultsSetEchoSkew
    boolean MediaSessionMgr_defaultsSetEchoSuppEnabled(boolean) -> MediaSessionMgr_defaultsSetEchoSuppEnabled
    boolean MediaSessionMgr_defaultsGetEchoSuppEnabled() -> MediaSessionMgr_defaultsGetEchoSuppEnabled
    boolean MediaSessionMgr_defaultsSetAgcEnabled(boolean) -> MediaSessionMgr_defaultsSetAgcEnabled
    boolean MediaSessionMgr_defaultsGetAgcEnabled() -> MediaSessionMgr_defaultsGetAgcEnabled
    boolean MediaSessionMgr_defaultsSetAgcLevel(float) -> MediaSessionMgr_defaultsSetAgcLevel
    float MediaSessionMgr_defaultsGetAgcLevel() -> MediaSessionMgr_defaultsGetAgcLevel
    boolean MediaSessionMgr_defaultsSetVadEnabled(boolean) -> MediaSessionMgr_defaultsSetVadEnabled
    boolean MediaSessionMgr_defaultsGetGetVadEnabled() -> MediaSessionMgr_defaultsGetGetVadEnabled
    boolean MediaSessionMgr_defaultsSetNoiseSuppEnabled(boolean) -> MediaSessionMgr_defaultsSetNoiseSuppEnabled
    boolean MediaSessionMgr_defaultsGetNoiseSuppEnabled() -> MediaSessionMgr_defaultsGetNoiseSuppEnabled
    boolean MediaSessionMgr_defaultsSetNoiseSuppLevel(int) -> MediaSessionMgr_defaultsSetNoiseSuppLevel
    int MediaSessionMgr_defaultsGetNoiseSuppLevel() -> MediaSessionMgr_defaultsGetNoiseSuppLevel
    boolean MediaSessionMgr_defaultsSet100relEnabled(boolean) -> MediaSessionMgr_defaultsSet100relEnabled
    boolean MediaSessionMgr_defaultsGet100relEnabled() -> MediaSessionMgr_defaultsGet100relEnabled
    boolean MediaSessionMgr_defaultsSetScreenSize(int,int) -> MediaSessionMgr_defaultsSetScreenSize
    boolean MediaSessionMgr_defaultsSetAudioGain(int,int) -> MediaSessionMgr_defaultsSetAudioGain
    boolean MediaSessionMgr_defaultsSetAudioPtime(int) -> MediaSessionMgr_defaultsSetAudioPtime
    boolean MediaSessionMgr_defaultsSetAudioChannels(int,int) -> MediaSessionMgr_defaultsSetAudioChannels
    boolean MediaSessionMgr_defaultsSetRtpPortRange(int,int) -> MediaSessionMgr_defaultsSetRtpPortRange
    boolean MediaSessionMgr_defaultsSetRtpSymetricEnabled(boolean) -> MediaSessionMgr_defaultsSetRtpSymetricEnabled
    boolean MediaSessionMgr_defaultsSetMediaType(int) -> MediaSessionMgr_defaultsSetMediaType
    boolean MediaSessionMgr_defaultsSetVolume(int) -> MediaSessionMgr_defaultsSetVolume
    int MediaSessionMgr_defaultsGetVolume() -> MediaSessionMgr_defaultsGetVolume
    boolean MediaSessionMgr_defaultsSetInviteSessionTimers(int,java.lang.String) -> MediaSessionMgr_defaultsSetInviteSessionTimers
    boolean MediaSessionMgr_defaultsSetSRtpMode(int) -> MediaSessionMgr_defaultsSetSRtpMode
    int MediaSessionMgr_defaultsGetSRtpMode() -> MediaSessionMgr_defaultsGetSRtpMode
    boolean MediaSessionMgr_defaultsSetSRtpType(int) -> MediaSessionMgr_defaultsSetSRtpType
    int MediaSessionMgr_defaultsGetSRtpType() -> MediaSessionMgr_defaultsGetSRtpType
    boolean MediaSessionMgr_defaultsSetRtcpEnabled(boolean) -> MediaSessionMgr_defaultsSetRtcpEnabled
    boolean MediaSessionMgr_defaultsGetRtcpEnabled() -> MediaSessionMgr_defaultsGetRtcpEnabled
    boolean MediaSessionMgr_defaultsSetRtcpMuxEnabled(boolean) -> MediaSessionMgr_defaultsSetRtcpMuxEnabled
    boolean MediaSessionMgr_defaultsGetRtcpMuxEnabled() -> MediaSessionMgr_defaultsGetRtcpMuxEnabled
    boolean MediaSessionMgr_defaultsSetStunEnabled(boolean) -> MediaSessionMgr_defaultsSetStunEnabled
    boolean MediaSessionMgr_defaultsSetIceStunEnabled(boolean) -> MediaSessionMgr_defaultsSetIceStunEnabled
    boolean MediaSessionMgr_defaultsSetStunServer__SWIG_0(java.lang.String,int,java.lang.String,java.lang.String) -> MediaSessionMgr_defaultsSetStunServer__SWIG_0
    boolean MediaSessionMgr_defaultsSetStunServer__SWIG_1(java.lang.String,int,java.lang.String) -> MediaSessionMgr_defaultsSetStunServer__SWIG_1
    boolean MediaSessionMgr_defaultsSetStunServer__SWIG_2(java.lang.String,int) -> MediaSessionMgr_defaultsSetStunServer__SWIG_2
    boolean MediaSessionMgr_defaultsSetIceEnabled(boolean) -> MediaSessionMgr_defaultsSetIceEnabled
    boolean MediaSessionMgr_defaultsSetByPassEncoding(boolean) -> MediaSessionMgr_defaultsSetByPassEncoding
    boolean MediaSessionMgr_defaultsGetByPassEncoding() -> MediaSessionMgr_defaultsGetByPassEncoding
    boolean MediaSessionMgr_defaultsSetByPassDecoding(boolean) -> MediaSessionMgr_defaultsSetByPassDecoding
    boolean MediaSessionMgr_defaultsGetByPassDecoding() -> MediaSessionMgr_defaultsGetByPassDecoding
    boolean MediaSessionMgr_defaultsSetVideoJbEnabled(boolean) -> MediaSessionMgr_defaultsSetVideoJbEnabled
    boolean MediaSessionMgr_defaultsGetVideoJbEnabled() -> MediaSessionMgr_defaultsGetVideoJbEnabled
    boolean MediaSessionMgr_defaultsSetVideoZeroArtifactsEnabled(boolean) -> MediaSessionMgr_defaultsSetVideoZeroArtifactsEnabled
    boolean MediaSessionMgr_defaultsGetVideoZeroArtifactsEnabled() -> MediaSessionMgr_defaultsGetVideoZeroArtifactsEnabled
    boolean MediaSessionMgr_defaultsSetRtpBuffSize(long) -> MediaSessionMgr_defaultsSetRtpBuffSize
    long MediaSessionMgr_defaultsGetRtpBuffSize() -> MediaSessionMgr_defaultsGetRtpBuffSize
    boolean MediaSessionMgr_defaultsSetAvpfTail(long,long) -> MediaSessionMgr_defaultsSetAvpfTail
    boolean MediaSessionMgr_defaultsSetAvpfMode(int) -> MediaSessionMgr_defaultsSetAvpfMode
    boolean MediaSessionMgr_defaultsSetOpusMaxCaptureRate(long) -> MediaSessionMgr_defaultsSetOpusMaxCaptureRate
    boolean MediaSessionMgr_defaultsSetOpusMaxPlaybackRate(long) -> MediaSessionMgr_defaultsSetOpusMaxPlaybackRate
    boolean MediaSessionMgr_defaultsSetMaxFds(int) -> MediaSessionMgr_defaultsSetMaxFds
    void delete_MediaContent(long) -> delete_MediaContent
    java.lang.String MediaContent_getType(long,org.doubango.tinyWRAP.MediaContent) -> MediaContent_getType
    long MediaContent_getDataLength(long,org.doubango.tinyWRAP.MediaContent) -> MediaContent_getDataLength
    long MediaContent_getData(long,org.doubango.tinyWRAP.MediaContent,java.nio.ByteBuffer,long) -> MediaContent_getData
    long MediaContent_parse__SWIG_0(java.nio.ByteBuffer,long,java.lang.String) -> MediaContent_parse__SWIG_0
    long MediaContent_parse__SWIG_1(java.nio.ByteBuffer,long) -> MediaContent_parse__SWIG_1
    long MediaContent_getPayloadLength(long,org.doubango.tinyWRAP.MediaContent) -> MediaContent_getPayloadLength
    long MediaContent_getPayload(long,org.doubango.tinyWRAP.MediaContent,java.nio.ByteBuffer,long) -> MediaContent_getPayload
    void delete_MediaContentCPIM(long) -> delete_MediaContentCPIM
    long MediaContentCPIM_getPayloadLength(long,org.doubango.tinyWRAP.MediaContentCPIM) -> MediaContentCPIM_getPayloadLength
    long MediaContentCPIM_getPayload(long,org.doubango.tinyWRAP.MediaContentCPIM,java.nio.ByteBuffer,long) -> MediaContentCPIM_getPayload
    java.lang.String MediaContentCPIM_getHeaderValue(long,org.doubango.tinyWRAP.MediaContentCPIM,java.lang.String) -> MediaContentCPIM_getHeaderValue
    long new_SipUri__SWIG_0(java.lang.String,java.lang.String) -> new_SipUri__SWIG_0
    long new_SipUri__SWIG_1(java.lang.String) -> new_SipUri__SWIG_1
    void delete_SipUri(long) -> delete_SipUri
    boolean SipUri_isValid__SWIG_0(java.lang.String) -> SipUri_isValid__SWIG_0
    boolean SipUri_isValid__SWIG_1(long,org.doubango.tinyWRAP.SipUri) -> SipUri_isValid__SWIG_1
    java.lang.String SipUri_getScheme(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getScheme
    java.lang.String SipUri_getHost(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getHost
    int SipUri_getPort(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getPort
    java.lang.String SipUri_getUserName(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getUserName
    java.lang.String SipUri_getPassword(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getPassword
    java.lang.String SipUri_getDisplayName(long,org.doubango.tinyWRAP.SipUri) -> SipUri_getDisplayName
    java.lang.String SipUri_getParamValue(long,org.doubango.tinyWRAP.SipUri,java.lang.String) -> SipUri_getParamValue
    void SipUri_setDisplayName(long,org.doubango.tinyWRAP.SipUri,java.lang.String) -> SipUri_setDisplayName
    long new_SdpMessage() -> new_SdpMessage
    void delete_SdpMessage(long) -> delete_SdpMessage
    java.lang.String SdpMessage_getSdpHeaderValue__SWIG_0(long,org.doubango.tinyWRAP.SdpMessage,java.lang.String,char,long) -> SdpMessage_getSdpHeaderValue__SWIG_0
    java.lang.String SdpMessage_getSdpHeaderValue__SWIG_1(long,org.doubango.tinyWRAP.SdpMessage,java.lang.String,char) -> SdpMessage_getSdpHeaderValue__SWIG_1
    java.lang.String SdpMessage_getSdpHeaderAValue(long,org.doubango.tinyWRAP.SdpMessage,java.lang.String,java.lang.String) -> SdpMessage_getSdpHeaderAValue
    long new_SipMessage() -> new_SipMessage
    void delete_SipMessage(long) -> delete_SipMessage
    boolean SipMessage_isResponse(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_isResponse
    int SipMessage_getRequestType(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_getRequestType
    short SipMessage_getResponseCode(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_getResponseCode
    java.lang.String SipMessage_getResponsePhrase(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_getResponsePhrase
    java.lang.String SipMessage_getSipHeaderValue__SWIG_0(long,org.doubango.tinyWRAP.SipMessage,java.lang.String,long) -> SipMessage_getSipHeaderValue__SWIG_0
    java.lang.String SipMessage_getSipHeaderValue__SWIG_1(long,org.doubango.tinyWRAP.SipMessage,java.lang.String) -> SipMessage_getSipHeaderValue__SWIG_1
    java.lang.String SipMessage_getSipHeaderParamValue__SWIG_0(long,org.doubango.tinyWRAP.SipMessage,java.lang.String,java.lang.String,long) -> SipMessage_getSipHeaderParamValue__SWIG_0
    java.lang.String SipMessage_getSipHeaderParamValue__SWIG_1(long,org.doubango.tinyWRAP.SipMessage,java.lang.String,java.lang.String) -> SipMessage_getSipHeaderParamValue__SWIG_1
    long SipMessage_getSipContentLength(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_getSipContentLength
    long SipMessage_getSipContent(long,org.doubango.tinyWRAP.SipMessage,java.nio.ByteBuffer,long) -> SipMessage_getSipContent
    long SipMessage_getSdpMessage(long,org.doubango.tinyWRAP.SipMessage) -> SipMessage_getSdpMessage
    void delete_SipEvent(long) -> delete_SipEvent
    short SipEvent_getCode(long,org.doubango.tinyWRAP.SipEvent) -> SipEvent_getCode
    java.lang.String SipEvent_getPhrase(long,org.doubango.tinyWRAP.SipEvent) -> SipEvent_getPhrase
    long SipEvent_getBaseSession(long,org.doubango.tinyWRAP.SipEvent) -> SipEvent_getBaseSession
    long SipEvent_getSipMessage(long,org.doubango.tinyWRAP.SipEvent) -> SipEvent_getSipMessage
    void delete_DialogEvent(long) -> delete_DialogEvent
    void delete_StackEvent(long) -> delete_StackEvent
    void delete_InviteEvent(long) -> delete_InviteEvent
    int InviteEvent_getType(long,org.doubango.tinyWRAP.InviteEvent) -> InviteEvent_getType
    int InviteEvent_getMediaType(long,org.doubango.tinyWRAP.InviteEvent) -> InviteEvent_getMediaType
    long InviteEvent_getSession(long,org.doubango.tinyWRAP.InviteEvent) -> InviteEvent_getSession
    long InviteEvent_takeCallSessionOwnership(long,org.doubango.tinyWRAP.InviteEvent) -> InviteEvent_takeCallSessionOwnership
    long InviteEvent_takeMsrpSessionOwnership(long,org.doubango.tinyWRAP.InviteEvent) -> InviteEvent_takeMsrpSessionOwnership
    void delete_MessagingEvent(long) -> delete_MessagingEvent
    int MessagingEvent_getType(long,org.doubango.tinyWRAP.MessagingEvent) -> MessagingEvent_getType
    long MessagingEvent_getSession(long,org.doubango.tinyWRAP.MessagingEvent) -> MessagingEvent_getSession
    long MessagingEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.MessagingEvent) -> MessagingEvent_takeSessionOwnership
    void delete_InfoEvent(long) -> delete_InfoEvent
    int InfoEvent_getType(long,org.doubango.tinyWRAP.InfoEvent) -> InfoEvent_getType
    long InfoEvent_getSession(long,org.doubango.tinyWRAP.InfoEvent) -> InfoEvent_getSession
    long InfoEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.InfoEvent) -> InfoEvent_takeSessionOwnership
    void delete_OptionsEvent(long) -> delete_OptionsEvent
    int OptionsEvent_getType(long,org.doubango.tinyWRAP.OptionsEvent) -> OptionsEvent_getType
    long OptionsEvent_getSession(long,org.doubango.tinyWRAP.OptionsEvent) -> OptionsEvent_getSession
    long OptionsEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.OptionsEvent) -> OptionsEvent_takeSessionOwnership
    void delete_PublicationEvent(long) -> delete_PublicationEvent
    int PublicationEvent_getType(long,org.doubango.tinyWRAP.PublicationEvent) -> PublicationEvent_getType
    long PublicationEvent_getSession(long,org.doubango.tinyWRAP.PublicationEvent) -> PublicationEvent_getSession
    long PublicationEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.PublicationEvent) -> PublicationEvent_takeSessionOwnership
    void delete_RegistrationEvent(long) -> delete_RegistrationEvent
    int RegistrationEvent_getType(long,org.doubango.tinyWRAP.RegistrationEvent) -> RegistrationEvent_getType
    long RegistrationEvent_getSession(long,org.doubango.tinyWRAP.RegistrationEvent) -> RegistrationEvent_getSession
    long RegistrationEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.RegistrationEvent) -> RegistrationEvent_takeSessionOwnership
    void delete_SubscriptionEvent(long) -> delete_SubscriptionEvent
    int SubscriptionEvent_getType(long,org.doubango.tinyWRAP.SubscriptionEvent) -> SubscriptionEvent_getType
    long SubscriptionEvent_getSession(long,org.doubango.tinyWRAP.SubscriptionEvent) -> SubscriptionEvent_getSession
    long SubscriptionEvent_takeSessionOwnership(long,org.doubango.tinyWRAP.SubscriptionEvent) -> SubscriptionEvent_takeSessionOwnership
    void delete_T140CallbackData(long) -> delete_T140CallbackData
    int T140CallbackData_getType(long,org.doubango.tinyWRAP.T140CallbackData) -> T140CallbackData_getType
    long T140CallbackData_getSize(long,org.doubango.tinyWRAP.T140CallbackData) -> T140CallbackData_getSize
    long T140CallbackData_getData(long,org.doubango.tinyWRAP.T140CallbackData,java.nio.ByteBuffer,long) -> T140CallbackData_getData
    long new_T140Callback() -> new_T140Callback
    void delete_T140Callback(long) -> delete_T140Callback
    int T140Callback_ondata(long,org.doubango.tinyWRAP.T140Callback,long,org.doubango.tinyWRAP.T140CallbackData) -> T140Callback_ondata
    int T140Callback_ondataSwigExplicitT140Callback(long,org.doubango.tinyWRAP.T140Callback,long,org.doubango.tinyWRAP.T140CallbackData) -> T140Callback_ondataSwigExplicitT140Callback
    void T140Callback_director_connect(org.doubango.tinyWRAP.T140Callback,long,boolean,boolean) -> T140Callback_director_connect
    void T140Callback_change_ownership(org.doubango.tinyWRAP.T140Callback,long,boolean) -> T140Callback_change_ownership
    long new_SipSession(long,org.doubango.tinyWRAP.SipStack) -> new_SipSession
    void delete_SipSession(long) -> delete_SipSession
    boolean SipSession_haveOwnership(long,org.doubango.tinyWRAP.SipSession) -> SipSession_haveOwnership
    boolean SipSession_addHeader(long,org.doubango.tinyWRAP.SipSession,java.lang.String,java.lang.String) -> SipSession_addHeader
    boolean SipSession_removeHeader(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_removeHeader
    boolean SipSession_addCaps__SWIG_0(long,org.doubango.tinyWRAP.SipSession,java.lang.String,java.lang.String) -> SipSession_addCaps__SWIG_0
    boolean SipSession_addCaps__SWIG_1(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_addCaps__SWIG_1
    boolean SipSession_removeCaps(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_removeCaps
    boolean SipSession_setExpires(long,org.doubango.tinyWRAP.SipSession,long) -> SipSession_setExpires
    boolean SipSession_setFromUri__SWIG_0(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_setFromUri__SWIG_0
    boolean SipSession_setFromUri__SWIG_1(long,org.doubango.tinyWRAP.SipSession,long,org.doubango.tinyWRAP.SipUri) -> SipSession_setFromUri__SWIG_1
    boolean SipSession_setToUri__SWIG_0(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_setToUri__SWIG_0
    boolean SipSession_setToUri__SWIG_1(long,org.doubango.tinyWRAP.SipSession,long,org.doubango.tinyWRAP.SipUri) -> SipSession_setToUri__SWIG_1
    boolean SipSession_setSilentHangup(long,org.doubango.tinyWRAP.SipSession,boolean) -> SipSession_setSilentHangup
    boolean SipSession_addSigCompCompartment(long,org.doubango.tinyWRAP.SipSession,java.lang.String) -> SipSession_addSigCompCompartment
    boolean SipSession_removeSigCompCompartment(long,org.doubango.tinyWRAP.SipSession) -> SipSession_removeSigCompCompartment
    long SipSession_getId(long,org.doubango.tinyWRAP.SipSession) -> SipSession_getId
    long new_InviteSession(long,org.doubango.tinyWRAP.SipStack) -> new_InviteSession
    void delete_InviteSession(long) -> delete_InviteSession
    boolean InviteSession_accept__SWIG_0(long,org.doubango.tinyWRAP.InviteSession,long,org.doubango.tinyWRAP.ActionConfig) -> InviteSession_accept__SWIG_0
    boolean InviteSession_accept__SWIG_1(long,org.doubango.tinyWRAP.InviteSession) -> InviteSession_accept__SWIG_1
    boolean InviteSession_hangup__SWIG_0(long,org.doubango.tinyWRAP.InviteSession,long,org.doubango.tinyWRAP.ActionConfig) -> InviteSession_hangup__SWIG_0
    boolean InviteSession_hangup__SWIG_1(long,org.doubango.tinyWRAP.InviteSession) -> InviteSession_hangup__SWIG_1
    boolean InviteSession_reject__SWIG_0(long,org.doubango.tinyWRAP.InviteSession,long,org.doubango.tinyWRAP.ActionConfig) -> InviteSession_reject__SWIG_0
    boolean InviteSession_reject__SWIG_1(long,org.doubango.tinyWRAP.InviteSession) -> InviteSession_reject__SWIG_1
    boolean InviteSession_sendInfo__SWIG_0(long,org.doubango.tinyWRAP.InviteSession,java.nio.ByteBuffer,long,long,org.doubango.tinyWRAP.ActionConfig) -> InviteSession_sendInfo__SWIG_0
    boolean InviteSession_sendInfo__SWIG_1(long,org.doubango.tinyWRAP.InviteSession,java.nio.ByteBuffer,long) -> InviteSession_sendInfo__SWIG_1
    long InviteSession_getMediaMgr(long,org.doubango.tinyWRAP.InviteSession) -> InviteSession_getMediaMgr
    long new_CallSession(long,org.doubango.tinyWRAP.SipStack) -> new_CallSession
    void delete_CallSession(long) -> delete_CallSession
    boolean CallSession_callAudio__SWIG_0(long,org.doubango.tinyWRAP.CallSession,java.lang.String,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callAudio__SWIG_0
    boolean CallSession_callAudio__SWIG_1(long,org.doubango.tinyWRAP.CallSession,java.lang.String) -> CallSession_callAudio__SWIG_1
    boolean CallSession_callAudio__SWIG_2(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callAudio__SWIG_2
    boolean CallSession_callAudio__SWIG_3(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri) -> CallSession_callAudio__SWIG_3
    boolean CallSession_callAudioVideo__SWIG_0(long,org.doubango.tinyWRAP.CallSession,java.lang.String,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callAudioVideo__SWIG_0
    boolean CallSession_callAudioVideo__SWIG_1(long,org.doubango.tinyWRAP.CallSession,java.lang.String) -> CallSession_callAudioVideo__SWIG_1
    boolean CallSession_callAudioVideo__SWIG_2(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callAudioVideo__SWIG_2
    boolean CallSession_callAudioVideo__SWIG_3(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri) -> CallSession_callAudioVideo__SWIG_3
    boolean CallSession_callVideo__SWIG_0(long,org.doubango.tinyWRAP.CallSession,java.lang.String,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callVideo__SWIG_0
    boolean CallSession_callVideo__SWIG_1(long,org.doubango.tinyWRAP.CallSession,java.lang.String) -> CallSession_callVideo__SWIG_1
    boolean CallSession_callVideo__SWIG_2(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_callVideo__SWIG_2
    boolean CallSession_callVideo__SWIG_3(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri) -> CallSession_callVideo__SWIG_3
    boolean CallSession_call__SWIG_0(long,org.doubango.tinyWRAP.CallSession,java.lang.String,int,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_call__SWIG_0
    boolean CallSession_call__SWIG_1(long,org.doubango.tinyWRAP.CallSession,java.lang.String,int) -> CallSession_call__SWIG_1
    boolean CallSession_call__SWIG_2(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri,int,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_call__SWIG_2
    boolean CallSession_call__SWIG_3(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.SipUri,int) -> CallSession_call__SWIG_3
    boolean CallSession_setSessionTimer(long,org.doubango.tinyWRAP.CallSession,long,java.lang.String) -> CallSession_setSessionTimer
    boolean CallSession_set100rel(long,org.doubango.tinyWRAP.CallSession,boolean) -> CallSession_set100rel
    boolean CallSession_setRtcp(long,org.doubango.tinyWRAP.CallSession,boolean) -> CallSession_setRtcp
    boolean CallSession_setRtcpMux(long,org.doubango.tinyWRAP.CallSession,boolean) -> CallSession_setRtcpMux
    boolean CallSession_setSRtpMode(long,org.doubango.tinyWRAP.CallSession,int) -> CallSession_setSRtpMode
    boolean CallSession_setAvpfMode(long,org.doubango.tinyWRAP.CallSession,int) -> CallSession_setAvpfMode
    boolean CallSession_setICE(long,org.doubango.tinyWRAP.CallSession,boolean) -> CallSession_setICE
    boolean CallSession_setQoS(long,org.doubango.tinyWRAP.CallSession,int,int) -> CallSession_setQoS
    boolean CallSession_hold__SWIG_0(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_hold__SWIG_0
    boolean CallSession_hold__SWIG_1(long,org.doubango.tinyWRAP.CallSession) -> CallSession_hold__SWIG_1
    boolean CallSession_resume__SWIG_0(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_resume__SWIG_0
    boolean CallSession_resume__SWIG_1(long,org.doubango.tinyWRAP.CallSession) -> CallSession_resume__SWIG_1
    boolean CallSession_transfer__SWIG_0(long,org.doubango.tinyWRAP.CallSession,java.lang.String,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_transfer__SWIG_0
    boolean CallSession_transfer__SWIG_1(long,org.doubango.tinyWRAP.CallSession,java.lang.String) -> CallSession_transfer__SWIG_1
    boolean CallSession_acceptTransfer__SWIG_0(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_acceptTransfer__SWIG_0
    boolean CallSession_acceptTransfer__SWIG_1(long,org.doubango.tinyWRAP.CallSession) -> CallSession_acceptTransfer__SWIG_1
    boolean CallSession_rejectTransfer__SWIG_0(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.ActionConfig) -> CallSession_rejectTransfer__SWIG_0
    boolean CallSession_rejectTransfer__SWIG_1(long,org.doubango.tinyWRAP.CallSession) -> CallSession_rejectTransfer__SWIG_1
    boolean CallSession_sendDTMF(long,org.doubango.tinyWRAP.CallSession,int) -> CallSession_sendDTMF
    long CallSession_getSessionTransferId(long,org.doubango.tinyWRAP.CallSession) -> CallSession_getSessionTransferId
    boolean CallSession_sendT140Data__SWIG_0(long,org.doubango.tinyWRAP.CallSession,int,java.nio.ByteBuffer,long) -> CallSession_sendT140Data__SWIG_0
    boolean CallSession_sendT140Data__SWIG_1(long,org.doubango.tinyWRAP.CallSession,int,java.nio.ByteBuffer) -> CallSession_sendT140Data__SWIG_1
    boolean CallSession_sendT140Data__SWIG_2(long,org.doubango.tinyWRAP.CallSession,int) -> CallSession_sendT140Data__SWIG_2
    boolean CallSession_setT140Callback(long,org.doubango.tinyWRAP.CallSession,long,org.doubango.tinyWRAP.T140Callback) -> CallSession_setT140Callback
    long new_MsrpSession(long,org.doubango.tinyWRAP.SipStack,long,org.doubango.tinyWRAP.MsrpCallback) -> new_MsrpSession
    void delete_MsrpSession(long) -> delete_MsrpSession
    boolean MsrpSession_setCallback(long,org.doubango.tinyWRAP.MsrpSession,long,org.doubango.tinyWRAP.MsrpCallback) -> MsrpSession_setCallback
    boolean MsrpSession_callMsrp__SWIG_0(long,org.doubango.tinyWRAP.MsrpSession,java.lang.String,long,org.doubango.tinyWRAP.ActionConfig) -> MsrpSession_callMsrp__SWIG_0
    boolean MsrpSession_callMsrp__SWIG_1(long,org.doubango.tinyWRAP.MsrpSession,java.lang.String) -> MsrpSession_callMsrp__SWIG_1
    boolean MsrpSession_callMsrp__SWIG_2(long,org.doubango.tinyWRAP.MsrpSession,long,org.doubango.tinyWRAP.SipUri,long,org.doubango.tinyWRAP.ActionConfig) -> MsrpSession_callMsrp__SWIG_2
    boolean MsrpSession_callMsrp__SWIG_3(long,org.doubango.tinyWRAP.MsrpSession,long,org.doubango.tinyWRAP.SipUri) -> MsrpSession_callMsrp__SWIG_3
    boolean MsrpSession_sendMessage__SWIG_0(long,org.doubango.tinyWRAP.MsrpSession,java.nio.ByteBuffer,long,long,org.doubango.tinyWRAP.ActionConfig) -> MsrpSession_sendMessage__SWIG_0
    boolean MsrpSession_sendMessage__SWIG_1(long,org.doubango.tinyWRAP.MsrpSession,java.nio.ByteBuffer,long) -> MsrpSession_sendMessage__SWIG_1
    boolean MsrpSession_sendFile__SWIG_0(long,org.doubango.tinyWRAP.MsrpSession,long,org.doubango.tinyWRAP.ActionConfig) -> MsrpSession_sendFile__SWIG_0
    boolean MsrpSession_sendFile__SWIG_1(long,org.doubango.tinyWRAP.MsrpSession) -> MsrpSession_sendFile__SWIG_1
    long new_MessagingSession(long,org.doubango.tinyWRAP.SipStack) -> new_MessagingSession
    void delete_MessagingSession(long) -> delete_MessagingSession
    boolean MessagingSession_send__SWIG_0(long,org.doubango.tinyWRAP.MessagingSession,java.nio.ByteBuffer,long,long,org.doubango.tinyWRAP.ActionConfig) -> MessagingSession_send__SWIG_0
    boolean MessagingSession_send__SWIG_1(long,org.doubango.tinyWRAP.MessagingSession,java.nio.ByteBuffer,long) -> MessagingSession_send__SWIG_1
    boolean MessagingSession_accept__SWIG_0(long,org.doubango.tinyWRAP.MessagingSession,long,org.doubango.tinyWRAP.ActionConfig) -> MessagingSession_accept__SWIG_0
    boolean MessagingSession_accept__SWIG_1(long,org.doubango.tinyWRAP.MessagingSession) -> MessagingSession_accept__SWIG_1
    boolean MessagingSession_reject__SWIG_0(long,org.doubango.tinyWRAP.MessagingSession,long,org.doubango.tinyWRAP.ActionConfig) -> MessagingSession_reject__SWIG_0
    boolean MessagingSession_reject__SWIG_1(long,org.doubango.tinyWRAP.MessagingSession) -> MessagingSession_reject__SWIG_1
    long new_InfoSession(long,org.doubango.tinyWRAP.SipStack) -> new_InfoSession
    void delete_InfoSession(long) -> delete_InfoSession
    boolean InfoSession_send__SWIG_0(long,org.doubango.tinyWRAP.InfoSession,java.nio.ByteBuffer,long,long,org.doubango.tinyWRAP.ActionConfig) -> InfoSession_send__SWIG_0
    boolean InfoSession_send__SWIG_1(long,org.doubango.tinyWRAP.InfoSession,java.nio.ByteBuffer,long) -> InfoSession_send__SWIG_1
    boolean InfoSession_accept__SWIG_0(long,org.doubango.tinyWRAP.InfoSession,long,org.doubango.tinyWRAP.ActionConfig) -> InfoSession_accept__SWIG_0
    boolean InfoSession_accept__SWIG_1(long,org.doubango.tinyWRAP.InfoSession) -> InfoSession_accept__SWIG_1
    boolean InfoSession_reject__SWIG_0(long,org.doubango.tinyWRAP.InfoSession,long,org.doubango.tinyWRAP.ActionConfig) -> InfoSession_reject__SWIG_0
    boolean InfoSession_reject__SWIG_1(long,org.doubango.tinyWRAP.InfoSession) -> InfoSession_reject__SWIG_1
    long new_OptionsSession(long,org.doubango.tinyWRAP.SipStack) -> new_OptionsSession
    void delete_OptionsSession(long) -> delete_OptionsSession
    boolean OptionsSession_send__SWIG_0(long,org.doubango.tinyWRAP.OptionsSession,long,org.doubango.tinyWRAP.ActionConfig) -> OptionsSession_send__SWIG_0
    boolean OptionsSession_send__SWIG_1(long,org.doubango.tinyWRAP.OptionsSession) -> OptionsSession_send__SWIG_1
    boolean OptionsSession_accept__SWIG_0(long,org.doubango.tinyWRAP.OptionsSession,long,org.doubango.tinyWRAP.ActionConfig) -> OptionsSession_accept__SWIG_0
    boolean OptionsSession_accept__SWIG_1(long,org.doubango.tinyWRAP.OptionsSession) -> OptionsSession_accept__SWIG_1
    boolean OptionsSession_reject__SWIG_0(long,org.doubango.tinyWRAP.OptionsSession,long,org.doubango.tinyWRAP.ActionConfig) -> OptionsSession_reject__SWIG_0
    boolean OptionsSession_reject__SWIG_1(long,org.doubango.tinyWRAP.OptionsSession) -> OptionsSession_reject__SWIG_1
    long new_PublicationSession(long,org.doubango.tinyWRAP.SipStack) -> new_PublicationSession
    void delete_PublicationSession(long) -> delete_PublicationSession
    boolean PublicationSession_publish__SWIG_0(long,org.doubango.tinyWRAP.PublicationSession,java.nio.ByteBuffer,long,long,org.doubango.tinyWRAP.ActionConfig) -> PublicationSession_publish__SWIG_0
    boolean PublicationSession_publish__SWIG_1(long,org.doubango.tinyWRAP.PublicationSession,java.nio.ByteBuffer,long) -> PublicationSession_publish__SWIG_1
    boolean PublicationSession_unPublish__SWIG_0(long,org.doubango.tinyWRAP.PublicationSession,long,org.doubango.tinyWRAP.ActionConfig) -> PublicationSession_unPublish__SWIG_0
    boolean PublicationSession_unPublish__SWIG_1(long,org.doubango.tinyWRAP.PublicationSession) -> PublicationSession_unPublish__SWIG_1
    long new_RegistrationSession(long,org.doubango.tinyWRAP.SipStack) -> new_RegistrationSession
    void delete_RegistrationSession(long) -> delete_RegistrationSession
    boolean RegistrationSession_register___SWIG_0(long,org.doubango.tinyWRAP.RegistrationSession,long,org.doubango.tinyWRAP.ActionConfig) -> RegistrationSession_register___SWIG_0
    boolean RegistrationSession_register___SWIG_1(long,org.doubango.tinyWRAP.RegistrationSession) -> RegistrationSession_register___SWIG_1
    boolean RegistrationSession_unRegister__SWIG_0(long,org.doubango.tinyWRAP.RegistrationSession,long,org.doubango.tinyWRAP.ActionConfig) -> RegistrationSession_unRegister__SWIG_0
    boolean RegistrationSession_unRegister__SWIG_1(long,org.doubango.tinyWRAP.RegistrationSession) -> RegistrationSession_unRegister__SWIG_1
    boolean RegistrationSession_accept__SWIG_0(long,org.doubango.tinyWRAP.RegistrationSession,long,org.doubango.tinyWRAP.ActionConfig) -> RegistrationSession_accept__SWIG_0
    boolean RegistrationSession_accept__SWIG_1(long,org.doubango.tinyWRAP.RegistrationSession) -> RegistrationSession_accept__SWIG_1
    boolean RegistrationSession_reject__SWIG_0(long,org.doubango.tinyWRAP.RegistrationSession,long,org.doubango.tinyWRAP.ActionConfig) -> RegistrationSession_reject__SWIG_0
    boolean RegistrationSession_reject__SWIG_1(long,org.doubango.tinyWRAP.RegistrationSession) -> RegistrationSession_reject__SWIG_1
    long new_SubscriptionSession(long,org.doubango.tinyWRAP.SipStack) -> new_SubscriptionSession
    void delete_SubscriptionSession(long) -> delete_SubscriptionSession
    boolean SubscriptionSession_subscribe(long,org.doubango.tinyWRAP.SubscriptionSession) -> SubscriptionSession_subscribe
    boolean SubscriptionSession_unSubscribe(long,org.doubango.tinyWRAP.SubscriptionSession) -> SubscriptionSession_unSubscribe
    void delete_ProxyPluginMgr(long) -> delete_ProxyPluginMgr
    long ProxyPluginMgr_createInstance(long,org.doubango.tinyWRAP.ProxyPluginMgrCallback) -> ProxyPluginMgr_createInstance
    long ProxyPluginMgr_getInstance() -> ProxyPluginMgr_getInstance
    long ProxyPluginMgr_findPlugin(long,org.doubango.tinyWRAP.ProxyPluginMgr,java.math.BigInteger) -> ProxyPluginMgr_findPlugin
    long ProxyPluginMgr_findAudioConsumer(long,org.doubango.tinyWRAP.ProxyPluginMgr,java.math.BigInteger) -> ProxyPluginMgr_findAudioConsumer
    long ProxyPluginMgr_findVideoConsumer(long,org.doubango.tinyWRAP.ProxyPluginMgr,java.math.BigInteger) -> ProxyPluginMgr_findVideoConsumer
    long ProxyPluginMgr_findAudioProducer(long,org.doubango.tinyWRAP.ProxyPluginMgr,java.math.BigInteger) -> ProxyPluginMgr_findAudioProducer
    long ProxyPluginMgr_findVideoProducer(long,org.doubango.tinyWRAP.ProxyPluginMgr,java.math.BigInteger) -> ProxyPluginMgr_findVideoProducer
    long new_ProxyPluginMgrCallback() -> new_ProxyPluginMgrCallback
    void delete_ProxyPluginMgrCallback(long) -> delete_ProxyPluginMgrCallback
    int ProxyPluginMgrCallback_OnPluginCreated(long,org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> ProxyPluginMgrCallback_OnPluginCreated
    int ProxyPluginMgrCallback_OnPluginCreatedSwigExplicitProxyPluginMgrCallback(long,org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> ProxyPluginMgrCallback_OnPluginCreatedSwigExplicitProxyPluginMgrCallback
    int ProxyPluginMgrCallback_OnPluginDestroyed(long,org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> ProxyPluginMgrCallback_OnPluginDestroyed
    int ProxyPluginMgrCallback_OnPluginDestroyedSwigExplicitProxyPluginMgrCallback(long,org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> ProxyPluginMgrCallback_OnPluginDestroyedSwigExplicitProxyPluginMgrCallback
    void ProxyPluginMgrCallback_director_connect(org.doubango.tinyWRAP.ProxyPluginMgrCallback,long,boolean,boolean) -> ProxyPluginMgrCallback_director_connect
    void ProxyPluginMgrCallback_change_ownership(org.doubango.tinyWRAP.ProxyPluginMgrCallback,long,boolean) -> ProxyPluginMgrCallback_change_ownership
    void delete_ProxyPlugin(long) -> delete_ProxyPlugin
    int ProxyPlugin_getType(long,org.doubango.tinyWRAP.ProxyPlugin) -> ProxyPlugin_getType
    java.math.BigInteger ProxyPlugin_getId(long,org.doubango.tinyWRAP.ProxyPlugin) -> ProxyPlugin_getId
    long new_ProxyAudioConsumerCallback() -> new_ProxyAudioConsumerCallback
    void delete_ProxyAudioConsumerCallback(long) -> delete_ProxyAudioConsumerCallback
    int ProxyAudioConsumerCallback_prepare(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback,int,int,int) -> ProxyAudioConsumerCallback_prepare
    int ProxyAudioConsumerCallback_prepareSwigExplicitProxyAudioConsumerCallback(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback,int,int,int) -> ProxyAudioConsumerCallback_prepareSwigExplicitProxyAudioConsumerCallback
    int ProxyAudioConsumerCallback_start(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_start
    int ProxyAudioConsumerCallback_startSwigExplicitProxyAudioConsumerCallback(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_startSwigExplicitProxyAudioConsumerCallback
    int ProxyAudioConsumerCallback_pause(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_pause
    int ProxyAudioConsumerCallback_pauseSwigExplicitProxyAudioConsumerCallback(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_pauseSwigExplicitProxyAudioConsumerCallback
    int ProxyAudioConsumerCallback_stop(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_stop
    int ProxyAudioConsumerCallback_stopSwigExplicitProxyAudioConsumerCallback(long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumerCallback_stopSwigExplicitProxyAudioConsumerCallback
    void ProxyAudioConsumerCallback_director_connect(org.doubango.tinyWRAP.ProxyAudioConsumerCallback,long,boolean,boolean) -> ProxyAudioConsumerCallback_director_connect
    void ProxyAudioConsumerCallback_change_ownership(org.doubango.tinyWRAP.ProxyAudioConsumerCallback,long,boolean) -> ProxyAudioConsumerCallback_change_ownership
    void delete_ProxyAudioConsumer(long) -> delete_ProxyAudioConsumer
    boolean ProxyAudioConsumer_setActualSndCardPlaybackParams(long,org.doubango.tinyWRAP.ProxyAudioConsumer,int,int,int) -> ProxyAudioConsumer_setActualSndCardPlaybackParams
    boolean ProxyAudioConsumer_queryForResampler(long,org.doubango.tinyWRAP.ProxyAudioConsumer,int,int,int,int,int) -> ProxyAudioConsumer_queryForResampler
    boolean ProxyAudioConsumer_setPullBuffer(long,org.doubango.tinyWRAP.ProxyAudioConsumer,java.nio.ByteBuffer,long) -> ProxyAudioConsumer_setPullBuffer
    long ProxyAudioConsumer_pull__SWIG_0(long,org.doubango.tinyWRAP.ProxyAudioConsumer,java.nio.ByteBuffer,long) -> ProxyAudioConsumer_pull__SWIG_0
    long ProxyAudioConsumer_pull__SWIG_1(long,org.doubango.tinyWRAP.ProxyAudioConsumer,java.nio.ByteBuffer) -> ProxyAudioConsumer_pull__SWIG_1
    long ProxyAudioConsumer_pull__SWIG_2(long,org.doubango.tinyWRAP.ProxyAudioConsumer) -> ProxyAudioConsumer_pull__SWIG_2
    boolean ProxyAudioConsumer_setGain(long,org.doubango.tinyWRAP.ProxyAudioConsumer,long) -> ProxyAudioConsumer_setGain
    long ProxyAudioConsumer_getGain(long,org.doubango.tinyWRAP.ProxyAudioConsumer) -> ProxyAudioConsumer_getGain
    boolean ProxyAudioConsumer_reset(long,org.doubango.tinyWRAP.ProxyAudioConsumer) -> ProxyAudioConsumer_reset
    void ProxyAudioConsumer_setCallback(long,org.doubango.tinyWRAP.ProxyAudioConsumer,long,org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> ProxyAudioConsumer_setCallback
    java.math.BigInteger ProxyAudioConsumer_getMediaSessionId(long,org.doubango.tinyWRAP.ProxyAudioConsumer) -> ProxyAudioConsumer_getMediaSessionId
    boolean ProxyAudioConsumer_registerPlugin() -> ProxyAudioConsumer_registerPlugin
    long new_ProxyVideoConsumerCallback() -> new_ProxyVideoConsumerCallback
    void delete_ProxyVideoConsumerCallback(long) -> delete_ProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_prepare(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,int,int,int) -> ProxyVideoConsumerCallback_prepare
    int ProxyVideoConsumerCallback_prepareSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,int,int,int) -> ProxyVideoConsumerCallback_prepareSwigExplicitProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_consume(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,org.doubango.tinyWRAP.ProxyVideoFrame) -> ProxyVideoConsumerCallback_consume
    int ProxyVideoConsumerCallback_consumeSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,org.doubango.tinyWRAP.ProxyVideoFrame) -> ProxyVideoConsumerCallback_consumeSwigExplicitProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_bufferCopied(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,long) -> ProxyVideoConsumerCallback_bufferCopied
    int ProxyVideoConsumerCallback_bufferCopiedSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,long) -> ProxyVideoConsumerCallback_bufferCopiedSwigExplicitProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_start(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_start
    int ProxyVideoConsumerCallback_startSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_startSwigExplicitProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_pause(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_pause
    int ProxyVideoConsumerCallback_pauseSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_pauseSwigExplicitProxyVideoConsumerCallback
    int ProxyVideoConsumerCallback_stop(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_stop
    int ProxyVideoConsumerCallback_stopSwigExplicitProxyVideoConsumerCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumerCallback_stopSwigExplicitProxyVideoConsumerCallback
    void ProxyVideoConsumerCallback_director_connect(org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,boolean,boolean) -> ProxyVideoConsumerCallback_director_connect
    void ProxyVideoConsumerCallback_change_ownership(org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,boolean) -> ProxyVideoConsumerCallback_change_ownership
    void delete_ProxyVideoConsumer(long) -> delete_ProxyVideoConsumer
    boolean ProxyVideoConsumer_setDisplaySize(long,org.doubango.tinyWRAP.ProxyVideoConsumer,long,long) -> ProxyVideoConsumer_setDisplaySize
    long ProxyVideoConsumer_getDisplayWidth(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getDisplayWidth
    long ProxyVideoConsumer_getDisplayHeight(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getDisplayHeight
    long ProxyVideoConsumer_getDecodedWidth(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getDecodedWidth
    long ProxyVideoConsumer_getDecodedHeight(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getDecodedHeight
    void ProxyVideoConsumer_setCallback(long,org.doubango.tinyWRAP.ProxyVideoConsumer,long,org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> ProxyVideoConsumer_setCallback
    boolean ProxyVideoConsumer_setAutoResizeDisplay(long,org.doubango.tinyWRAP.ProxyVideoConsumer,boolean) -> ProxyVideoConsumer_setAutoResizeDisplay
    boolean ProxyVideoConsumer_getAutoResizeDisplay(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getAutoResizeDisplay
    boolean ProxyVideoConsumer_setConsumeBuffer(long,org.doubango.tinyWRAP.ProxyVideoConsumer,java.nio.ByteBuffer,long) -> ProxyVideoConsumer_setConsumeBuffer
    long ProxyVideoConsumer_pull(long,org.doubango.tinyWRAP.ProxyVideoConsumer,java.nio.ByteBuffer,long) -> ProxyVideoConsumer_pull
    boolean ProxyVideoConsumer_reset(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_reset
    java.math.BigInteger ProxyVideoConsumer_getMediaSessionId(long,org.doubango.tinyWRAP.ProxyVideoConsumer) -> ProxyVideoConsumer_getMediaSessionId
    boolean ProxyVideoConsumer_registerPlugin() -> ProxyVideoConsumer_registerPlugin
    void ProxyVideoConsumer_setDefaultChroma(int) -> ProxyVideoConsumer_setDefaultChroma
    void ProxyVideoConsumer_setDefaultAutoResizeDisplay(boolean) -> ProxyVideoConsumer_setDefaultAutoResizeDisplay
    void delete_ProxyVideoFrame(long) -> delete_ProxyVideoFrame
    long ProxyVideoFrame_getSize(long,org.doubango.tinyWRAP.ProxyVideoFrame) -> ProxyVideoFrame_getSize
    long ProxyVideoFrame_getContent(long,org.doubango.tinyWRAP.ProxyVideoFrame,java.nio.ByteBuffer,long) -> ProxyVideoFrame_getContent
    long ProxyVideoFrame_getFrameWidth(long,org.doubango.tinyWRAP.ProxyVideoFrame) -> ProxyVideoFrame_getFrameWidth
    long ProxyVideoFrame_getFrameHeight(long,org.doubango.tinyWRAP.ProxyVideoFrame) -> ProxyVideoFrame_getFrameHeight
    long new_ProxyAudioProducerCallback() -> new_ProxyAudioProducerCallback
    void delete_ProxyAudioProducerCallback(long) -> delete_ProxyAudioProducerCallback
    int ProxyAudioProducerCallback_prepare(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback,int,int,int) -> ProxyAudioProducerCallback_prepare
    int ProxyAudioProducerCallback_prepareSwigExplicitProxyAudioProducerCallback(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback,int,int,int) -> ProxyAudioProducerCallback_prepareSwigExplicitProxyAudioProducerCallback
    int ProxyAudioProducerCallback_start(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_start
    int ProxyAudioProducerCallback_startSwigExplicitProxyAudioProducerCallback(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_startSwigExplicitProxyAudioProducerCallback
    int ProxyAudioProducerCallback_pause(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_pause
    int ProxyAudioProducerCallback_pauseSwigExplicitProxyAudioProducerCallback(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_pauseSwigExplicitProxyAudioProducerCallback
    int ProxyAudioProducerCallback_stop(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_stop
    int ProxyAudioProducerCallback_stopSwigExplicitProxyAudioProducerCallback(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_stopSwigExplicitProxyAudioProducerCallback
    int ProxyAudioProducerCallback_fillPushBuffer(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_fillPushBuffer
    int ProxyAudioProducerCallback_fillPushBufferSwigExplicitProxyAudioProducerCallback(long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducerCallback_fillPushBufferSwigExplicitProxyAudioProducerCallback
    void ProxyAudioProducerCallback_director_connect(org.doubango.tinyWRAP.ProxyAudioProducerCallback,long,boolean,boolean) -> ProxyAudioProducerCallback_director_connect
    void ProxyAudioProducerCallback_change_ownership(org.doubango.tinyWRAP.ProxyAudioProducerCallback,long,boolean) -> ProxyAudioProducerCallback_change_ownership
    void delete_ProxyAudioProducer(long) -> delete_ProxyAudioProducer
    boolean ProxyAudioProducer_setActualSndCardRecordParams(long,org.doubango.tinyWRAP.ProxyAudioProducer,int,int,int) -> ProxyAudioProducer_setActualSndCardRecordParams
    boolean ProxyAudioProducer_setPushBuffer__SWIG_0(long,org.doubango.tinyWRAP.ProxyAudioProducer,java.nio.ByteBuffer,long,boolean) -> ProxyAudioProducer_setPushBuffer__SWIG_0
    boolean ProxyAudioProducer_setPushBuffer__SWIG_1(long,org.doubango.tinyWRAP.ProxyAudioProducer,java.nio.ByteBuffer,long) -> ProxyAudioProducer_setPushBuffer__SWIG_1
    int ProxyAudioProducer_push__SWIG_0(long,org.doubango.tinyWRAP.ProxyAudioProducer,java.nio.ByteBuffer,long) -> ProxyAudioProducer_push__SWIG_0
    int ProxyAudioProducer_push__SWIG_1(long,org.doubango.tinyWRAP.ProxyAudioProducer,java.nio.ByteBuffer) -> ProxyAudioProducer_push__SWIG_1
    int ProxyAudioProducer_push__SWIG_2(long,org.doubango.tinyWRAP.ProxyAudioProducer) -> ProxyAudioProducer_push__SWIG_2
    boolean ProxyAudioProducer_setGain(long,org.doubango.tinyWRAP.ProxyAudioProducer,long) -> ProxyAudioProducer_setGain
    long ProxyAudioProducer_getGain(long,org.doubango.tinyWRAP.ProxyAudioProducer) -> ProxyAudioProducer_getGain
    void ProxyAudioProducer_setCallback(long,org.doubango.tinyWRAP.ProxyAudioProducer,long,org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> ProxyAudioProducer_setCallback
    java.math.BigInteger ProxyAudioProducer_getMediaSessionId(long,org.doubango.tinyWRAP.ProxyAudioProducer) -> ProxyAudioProducer_getMediaSessionId
    boolean ProxyAudioProducer_registerPlugin() -> ProxyAudioProducer_registerPlugin
    long new_ProxyVideoProducerCallback() -> new_ProxyVideoProducerCallback
    void delete_ProxyVideoProducerCallback(long) -> delete_ProxyVideoProducerCallback
    int ProxyVideoProducerCallback_prepare(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback,int,int,int) -> ProxyVideoProducerCallback_prepare
    int ProxyVideoProducerCallback_prepareSwigExplicitProxyVideoProducerCallback(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback,int,int,int) -> ProxyVideoProducerCallback_prepareSwigExplicitProxyVideoProducerCallback
    int ProxyVideoProducerCallback_start(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_start
    int ProxyVideoProducerCallback_startSwigExplicitProxyVideoProducerCallback(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_startSwigExplicitProxyVideoProducerCallback
    int ProxyVideoProducerCallback_pause(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_pause
    int ProxyVideoProducerCallback_pauseSwigExplicitProxyVideoProducerCallback(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_pauseSwigExplicitProxyVideoProducerCallback
    int ProxyVideoProducerCallback_stop(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_stop
    int ProxyVideoProducerCallback_stopSwigExplicitProxyVideoProducerCallback(long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducerCallback_stopSwigExplicitProxyVideoProducerCallback
    void ProxyVideoProducerCallback_director_connect(org.doubango.tinyWRAP.ProxyVideoProducerCallback,long,boolean,boolean) -> ProxyVideoProducerCallback_director_connect
    void ProxyVideoProducerCallback_change_ownership(org.doubango.tinyWRAP.ProxyVideoProducerCallback,long,boolean) -> ProxyVideoProducerCallback_change_ownership
    void delete_ProxyVideoProducer(long) -> delete_ProxyVideoProducer
    int ProxyVideoProducer_getRotation(long,org.doubango.tinyWRAP.ProxyVideoProducer) -> ProxyVideoProducer_getRotation
    boolean ProxyVideoProducer_setRotation(long,org.doubango.tinyWRAP.ProxyVideoProducer,int) -> ProxyVideoProducer_setRotation
    boolean ProxyVideoProducer_setActualCameraOutputSize(long,org.doubango.tinyWRAP.ProxyVideoProducer,long,long) -> ProxyVideoProducer_setActualCameraOutputSize
    int ProxyVideoProducer_push(long,org.doubango.tinyWRAP.ProxyVideoProducer,java.nio.ByteBuffer,long) -> ProxyVideoProducer_push
    void ProxyVideoProducer_setCallback(long,org.doubango.tinyWRAP.ProxyVideoProducer,long,org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> ProxyVideoProducer_setCallback
    java.math.BigInteger ProxyVideoProducer_getMediaSessionId(long,org.doubango.tinyWRAP.ProxyVideoProducer) -> ProxyVideoProducer_getMediaSessionId
    boolean ProxyVideoProducer_registerPlugin() -> ProxyVideoProducer_registerPlugin
    void ProxyVideoProducer_setDefaultChroma(int) -> ProxyVideoProducer_setDefaultChroma
    long new_SipCallback() -> new_SipCallback
    void delete_SipCallback(long) -> delete_SipCallback
    int SipCallback_OnDialogEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.DialogEvent) -> SipCallback_OnDialogEvent
    int SipCallback_OnDialogEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.DialogEvent) -> SipCallback_OnDialogEventSwigExplicitSipCallback
    int SipCallback_OnStackEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.StackEvent) -> SipCallback_OnStackEvent
    int SipCallback_OnStackEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.StackEvent) -> SipCallback_OnStackEventSwigExplicitSipCallback
    int SipCallback_OnInviteEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.InviteEvent) -> SipCallback_OnInviteEvent
    int SipCallback_OnInviteEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.InviteEvent) -> SipCallback_OnInviteEventSwigExplicitSipCallback
    int SipCallback_OnMessagingEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.MessagingEvent) -> SipCallback_OnMessagingEvent
    int SipCallback_OnMessagingEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.MessagingEvent) -> SipCallback_OnMessagingEventSwigExplicitSipCallback
    int SipCallback_OnInfoEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.InfoEvent) -> SipCallback_OnInfoEvent
    int SipCallback_OnInfoEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.InfoEvent) -> SipCallback_OnInfoEventSwigExplicitSipCallback
    int SipCallback_OnOptionsEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.OptionsEvent) -> SipCallback_OnOptionsEvent
    int SipCallback_OnOptionsEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.OptionsEvent) -> SipCallback_OnOptionsEventSwigExplicitSipCallback
    int SipCallback_OnPublicationEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.PublicationEvent) -> SipCallback_OnPublicationEvent
    int SipCallback_OnPublicationEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.PublicationEvent) -> SipCallback_OnPublicationEventSwigExplicitSipCallback
    int SipCallback_OnRegistrationEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.RegistrationEvent) -> SipCallback_OnRegistrationEvent
    int SipCallback_OnRegistrationEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.RegistrationEvent) -> SipCallback_OnRegistrationEventSwigExplicitSipCallback
    int SipCallback_OnSubscriptionEvent(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.SubscriptionEvent) -> SipCallback_OnSubscriptionEvent
    int SipCallback_OnSubscriptionEventSwigExplicitSipCallback(long,org.doubango.tinyWRAP.SipCallback,long,org.doubango.tinyWRAP.SubscriptionEvent) -> SipCallback_OnSubscriptionEventSwigExplicitSipCallback
    void SipCallback_director_connect(org.doubango.tinyWRAP.SipCallback,long,boolean,boolean) -> SipCallback_director_connect
    void SipCallback_change_ownership(org.doubango.tinyWRAP.SipCallback,long,boolean) -> SipCallback_change_ownership
    long new_SafeObject() -> new_SafeObject
    void delete_SafeObject(long) -> delete_SafeObject
    int SafeObject_Lock(long,org.doubango.tinyWRAP.SafeObject) -> SafeObject_Lock
    int SafeObject_UnLock(long,org.doubango.tinyWRAP.SafeObject) -> SafeObject_UnLock
    long new_SipStack(long,org.doubango.tinyWRAP.SipCallback,java.lang.String,java.lang.String,java.lang.String) -> new_SipStack
    void delete_SipStack(long) -> delete_SipStack
    boolean SipStack_start(long,org.doubango.tinyWRAP.SipStack) -> SipStack_start
    boolean SipStack_setDebugCallback(long,org.doubango.tinyWRAP.SipStack,long,org.doubango.tinyWRAP.DDebugCallback) -> SipStack_setDebugCallback
    boolean SipStack_setDisplayName(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setDisplayName
    boolean SipStack_setRealm(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setRealm
    boolean SipStack_setIMPI(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setIMPI
    boolean SipStack_setIMPU(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setIMPU
    boolean SipStack_setPassword(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setPassword
    boolean SipStack_setAMF(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setAMF
    boolean SipStack_setOperatorId(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setOperatorId
    boolean SipStack_setProxyCSCF(long,org.doubango.tinyWRAP.SipStack,java.lang.String,int,java.lang.String,java.lang.String) -> SipStack_setProxyCSCF
    boolean SipStack_setLocalIP__SWIG_0(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String) -> SipStack_setLocalIP__SWIG_0
    boolean SipStack_setLocalIP__SWIG_1(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_setLocalIP__SWIG_1
    boolean SipStack_setLocalPort__SWIG_0(long,org.doubango.tinyWRAP.SipStack,int,java.lang.String) -> SipStack_setLocalPort__SWIG_0
    boolean SipStack_setLocalPort__SWIG_1(long,org.doubango.tinyWRAP.SipStack,int) -> SipStack_setLocalPort__SWIG_1
    boolean SipStack_setEarlyIMS(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setEarlyIMS
    boolean SipStack_addHeader(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String) -> SipStack_addHeader
    boolean SipStack_removeHeader(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_removeHeader
    boolean SipStack_addDnsServer(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_addDnsServer
    boolean SipStack_setDnsDiscovery(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setDnsDiscovery
    boolean SipStack_setAoR(long,org.doubango.tinyWRAP.SipStack,java.lang.String,int) -> SipStack_setAoR
    boolean SipStack_setSigCompParams(long,org.doubango.tinyWRAP.SipStack,long,long,long,boolean) -> SipStack_setSigCompParams
    boolean SipStack_addSigCompCompartment(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_addSigCompCompartment
    boolean SipStack_removeSigCompCompartment(long,org.doubango.tinyWRAP.SipStack,java.lang.String) -> SipStack_removeSigCompCompartment
    boolean SipStack_setSTUNEnabledForICE(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setSTUNEnabledForICE
    boolean SipStack_setSTUNServer(long,org.doubango.tinyWRAP.SipStack,java.lang.String,int) -> SipStack_setSTUNServer
    boolean SipStack_setSTUNCred(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String) -> SipStack_setSTUNCred
    boolean SipStack_setSTUNEnabled(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setSTUNEnabled
    boolean SipStack_setTLSSecAgree(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setTLSSecAgree
    boolean SipStack_setSSLCertificates__SWIG_0(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String,boolean) -> SipStack_setSSLCertificates__SWIG_0
    boolean SipStack_setSSLCertificates__SWIG_1(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String) -> SipStack_setSSLCertificates__SWIG_1
    boolean SipStack_setSSLCretificates__SWIG_0(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String,boolean) -> SipStack_setSSLCretificates__SWIG_0
    boolean SipStack_setSSLCretificates__SWIG_1(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String) -> SipStack_setSSLCretificates__SWIG_1
    boolean SipStack_setIPSecSecAgree(long,org.doubango.tinyWRAP.SipStack,boolean) -> SipStack_setIPSecSecAgree
    boolean SipStack_setIPSecParameters(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> SipStack_setIPSecParameters
    java.lang.String SipStack_dnsENUM(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,java.lang.String) -> SipStack_dnsENUM
    java.lang.String SipStack_dnsNaptrSrv(long,org.doubango.tinyWRAP.SipStack,java.lang.String,java.lang.String,int[]) -> SipStack_dnsNaptrSrv
    java.lang.String SipStack_dnsSrv(long,org.doubango.tinyWRAP.SipStack,java.lang.String,int[]) -> SipStack_dnsSrv
    boolean SipStack_setMaxFDs(long,org.doubango.tinyWRAP.SipStack,long) -> SipStack_setMaxFDs
    java.lang.String SipStack_getLocalIPnPort(long,org.doubango.tinyWRAP.SipStack,java.lang.String,int[]) -> SipStack_getLocalIPnPort
    java.lang.String SipStack_getPreferredIdentity(long,org.doubango.tinyWRAP.SipStack) -> SipStack_getPreferredIdentity
    boolean SipStack_isValid(long,org.doubango.tinyWRAP.SipStack) -> SipStack_isValid
    boolean SipStack_stop(long,org.doubango.tinyWRAP.SipStack) -> SipStack_stop
    boolean SipStack_initialize() -> SipStack_initialize
    boolean SipStack_deInitialize() -> SipStack_deInitialize
    void SipStack_setCodecs(int) -> SipStack_setCodecs
    void SipStack_setCodecs_2(long) -> SipStack_setCodecs_2
    boolean SipStack_setCodecPriority(int,int) -> SipStack_setCodecPriority
    boolean SipStack_setCodecPriority_2(int,int) -> SipStack_setCodecPriority_2
    boolean SipStack_isCodecSupported(int) -> SipStack_isCodecSupported
    boolean SipStack_isIPSecSupported() -> SipStack_isIPSecSupported
    long new_XcapSelector(long,org.doubango.tinyWRAP.XcapStack) -> new_XcapSelector
    void delete_XcapSelector(long) -> delete_XcapSelector
    long XcapSelector_setAUID(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String) -> XcapSelector_setAUID
    long XcapSelector_setName(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String) -> XcapSelector_setName
    long XcapSelector_setAttribute(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String,java.lang.String,java.lang.String) -> XcapSelector_setAttribute
    long XcapSelector_setPos(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String,long) -> XcapSelector_setPos
    long XcapSelector_setPosAttribute(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String,long,java.lang.String,java.lang.String) -> XcapSelector_setPosAttribute
    long XcapSelector_setNamespace(long,org.doubango.tinyWRAP.XcapSelector,java.lang.String,java.lang.String) -> XcapSelector_setNamespace
    java.lang.String XcapSelector_getString(long,org.doubango.tinyWRAP.XcapSelector) -> XcapSelector_getString
    void XcapSelector_reset(long,org.doubango.tinyWRAP.XcapSelector) -> XcapSelector_reset
    long new_XcapMessage() -> new_XcapMessage
    void delete_XcapMessage(long) -> delete_XcapMessage
    short XcapMessage_getCode(long,org.doubango.tinyWRAP.XcapMessage) -> XcapMessage_getCode
    java.lang.String XcapMessage_getPhrase(long,org.doubango.tinyWRAP.XcapMessage) -> XcapMessage_getPhrase
    java.lang.String XcapMessage_getXcapHeaderValue__SWIG_0(long,org.doubango.tinyWRAP.XcapMessage,java.lang.String,long) -> XcapMessage_getXcapHeaderValue__SWIG_0
    java.lang.String XcapMessage_getXcapHeaderValue__SWIG_1(long,org.doubango.tinyWRAP.XcapMessage,java.lang.String) -> XcapMessage_getXcapHeaderValue__SWIG_1
    java.lang.String XcapMessage_getXcapHeaderParamValue__SWIG_0(long,org.doubango.tinyWRAP.XcapMessage,java.lang.String,java.lang.String,long) -> XcapMessage_getXcapHeaderParamValue__SWIG_0
    java.lang.String XcapMessage_getXcapHeaderParamValue__SWIG_1(long,org.doubango.tinyWRAP.XcapMessage,java.lang.String,java.lang.String) -> XcapMessage_getXcapHeaderParamValue__SWIG_1
    long XcapMessage_getXcapContentLength(long,org.doubango.tinyWRAP.XcapMessage) -> XcapMessage_getXcapContentLength
    long XcapMessage_getXcapContent(long,org.doubango.tinyWRAP.XcapMessage,java.nio.ByteBuffer,long) -> XcapMessage_getXcapContent
    void delete_XcapEvent(long) -> delete_XcapEvent
    int XcapEvent_getType(long,org.doubango.tinyWRAP.XcapEvent) -> XcapEvent_getType
    long XcapEvent_getXcapMessage(long,org.doubango.tinyWRAP.XcapEvent) -> XcapEvent_getXcapMessage
    long new_XcapCallback() -> new_XcapCallback
    void delete_XcapCallback(long) -> delete_XcapCallback
    int XcapCallback_onEvent(long,org.doubango.tinyWRAP.XcapCallback,long,org.doubango.tinyWRAP.XcapEvent) -> XcapCallback_onEvent
    int XcapCallback_onEventSwigExplicitXcapCallback(long,org.doubango.tinyWRAP.XcapCallback,long,org.doubango.tinyWRAP.XcapEvent) -> XcapCallback_onEventSwigExplicitXcapCallback
    void XcapCallback_director_connect(org.doubango.tinyWRAP.XcapCallback,long,boolean,boolean) -> XcapCallback_director_connect
    void XcapCallback_change_ownership(org.doubango.tinyWRAP.XcapCallback,long,boolean) -> XcapCallback_change_ownership
    long new_XcapStack(long,org.doubango.tinyWRAP.XcapCallback,java.lang.String,java.lang.String,java.lang.String) -> new_XcapStack
    void delete_XcapStack(long) -> delete_XcapStack
    boolean XcapStack_registerAUID(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> XcapStack_registerAUID
    boolean XcapStack_start(long,org.doubango.tinyWRAP.XcapStack) -> XcapStack_start
    boolean XcapStack_setCredentials(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.lang.String) -> XcapStack_setCredentials
    boolean XcapStack_setXcapRoot(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_setXcapRoot
    boolean XcapStack_setLocalIP(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_setLocalIP
    boolean XcapStack_setLocalPort(long,org.doubango.tinyWRAP.XcapStack,long) -> XcapStack_setLocalPort
    boolean XcapStack_addHeader(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.lang.String) -> XcapStack_addHeader
    boolean XcapStack_removeHeader(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_removeHeader
    boolean XcapStack_setTimeout(long,org.doubango.tinyWRAP.XcapStack,long) -> XcapStack_setTimeout
    boolean XcapStack_getDocument(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_getDocument
    boolean XcapStack_getElement(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_getElement
    boolean XcapStack_getAttribute(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_getAttribute
    boolean XcapStack_deleteDocument(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_deleteDocument
    boolean XcapStack_deleteElement(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_deleteElement
    boolean XcapStack_deleteAttribute(long,org.doubango.tinyWRAP.XcapStack,java.lang.String) -> XcapStack_deleteAttribute
    boolean XcapStack_putDocument(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.nio.ByteBuffer,long,java.lang.String) -> XcapStack_putDocument
    boolean XcapStack_putElement(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.nio.ByteBuffer,long) -> XcapStack_putElement
    boolean XcapStack_putAttribute(long,org.doubango.tinyWRAP.XcapStack,java.lang.String,java.nio.ByteBuffer,long) -> XcapStack_putAttribute
    boolean XcapStack_stop(long,org.doubango.tinyWRAP.XcapStack) -> XcapStack_stop
    long new_RPMessage() -> new_RPMessage
    void delete_RPMessage(long) -> delete_RPMessage
    int RPMessage_getType(long,org.doubango.tinyWRAP.RPMessage) -> RPMessage_getType
    long RPMessage_getPayloadLength(long,org.doubango.tinyWRAP.RPMessage) -> RPMessage_getPayloadLength
    long RPMessage_getPayload(long,org.doubango.tinyWRAP.RPMessage,java.nio.ByteBuffer,long) -> RPMessage_getPayload
    long new_SMSData() -> new_SMSData
    void delete_SMSData(long) -> delete_SMSData
    int SMSData_getType(long,org.doubango.tinyWRAP.SMSData) -> SMSData_getType
    int SMSData_getMR(long,org.doubango.tinyWRAP.SMSData) -> SMSData_getMR
    long SMSData_getPayloadLength(long,org.doubango.tinyWRAP.SMSData) -> SMSData_getPayloadLength
    long SMSData_getPayload(long,org.doubango.tinyWRAP.SMSData,java.nio.ByteBuffer,long) -> SMSData_getPayload
    java.lang.String SMSData_getOA(long,org.doubango.tinyWRAP.SMSData) -> SMSData_getOA
    java.lang.String SMSData_getDA(long,org.doubango.tinyWRAP.SMSData) -> SMSData_getDA
    long SMSEncoder_encodeSubmit(int,java.lang.String,java.lang.String,java.lang.String) -> SMSEncoder_encodeSubmit
    long SMSEncoder_encodeDeliver(int,java.lang.String,java.lang.String,java.lang.String) -> SMSEncoder_encodeDeliver
    long SMSEncoder_encodeACK(int,java.lang.String,java.lang.String,boolean) -> SMSEncoder_encodeACK
    long SMSEncoder_encodeError(int,java.lang.String,java.lang.String,boolean) -> SMSEncoder_encodeError
    long SMSEncoder_decode(java.nio.ByteBuffer,long,boolean) -> SMSEncoder_decode
    void delete_SMSEncoder(long) -> delete_SMSEncoder
    long new_MsrpMessage() -> new_MsrpMessage
    void delete_MsrpMessage(long) -> delete_MsrpMessage
    boolean MsrpMessage_isRequest(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_isRequest
    short MsrpMessage_getCode(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_getCode
    java.lang.String MsrpMessage_getPhrase(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_getPhrase
    int MsrpMessage_getRequestType(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_getRequestType
    void MsrpMessage_getByteRange(long,org.doubango.tinyWRAP.MsrpMessage,long[],long[],long[]) -> MsrpMessage_getByteRange
    boolean MsrpMessage_isLastChunck(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_isLastChunck
    boolean MsrpMessage_isFirstChunck(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_isFirstChunck
    boolean MsrpMessage_isSuccessReport(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_isSuccessReport
    java.lang.String MsrpMessage_getMsrpHeaderValue(long,org.doubango.tinyWRAP.MsrpMessage,java.lang.String) -> MsrpMessage_getMsrpHeaderValue
    java.lang.String MsrpMessage_getMsrpHeaderParamValue(long,org.doubango.tinyWRAP.MsrpMessage,java.lang.String,java.lang.String) -> MsrpMessage_getMsrpHeaderParamValue
    long MsrpMessage_getMsrpContentLength(long,org.doubango.tinyWRAP.MsrpMessage) -> MsrpMessage_getMsrpContentLength
    long MsrpMessage_getMsrpContent(long,org.doubango.tinyWRAP.MsrpMessage,java.nio.ByteBuffer,long) -> MsrpMessage_getMsrpContent
    void delete_MsrpEvent(long) -> delete_MsrpEvent
    int MsrpEvent_getType(long,org.doubango.tinyWRAP.MsrpEvent) -> MsrpEvent_getType
    long MsrpEvent_getSipSession(long,org.doubango.tinyWRAP.MsrpEvent) -> MsrpEvent_getSipSession
    long MsrpEvent_getMessage(long,org.doubango.tinyWRAP.MsrpEvent) -> MsrpEvent_getMessage
    long new_MsrpCallback() -> new_MsrpCallback
    void delete_MsrpCallback(long) -> delete_MsrpCallback
    int MsrpCallback_OnEvent(long,org.doubango.tinyWRAP.MsrpCallback,long,org.doubango.tinyWRAP.MsrpEvent) -> MsrpCallback_OnEvent
    int MsrpCallback_OnEventSwigExplicitMsrpCallback(long,org.doubango.tinyWRAP.MsrpCallback,long,org.doubango.tinyWRAP.MsrpEvent) -> MsrpCallback_OnEventSwigExplicitMsrpCallback
    void MsrpCallback_director_connect(org.doubango.tinyWRAP.MsrpCallback,long,boolean,boolean) -> MsrpCallback_director_connect
    void MsrpCallback_change_ownership(org.doubango.tinyWRAP.MsrpCallback,long,boolean) -> MsrpCallback_change_ownership
    long MediaContentCPIM_SWIGUpcast(long) -> MediaContentCPIM_SWIGUpcast
    long DialogEvent_SWIGUpcast(long) -> DialogEvent_SWIGUpcast
    long StackEvent_SWIGUpcast(long) -> StackEvent_SWIGUpcast
    long InviteEvent_SWIGUpcast(long) -> InviteEvent_SWIGUpcast
    long MessagingEvent_SWIGUpcast(long) -> MessagingEvent_SWIGUpcast
    long InfoEvent_SWIGUpcast(long) -> InfoEvent_SWIGUpcast
    long OptionsEvent_SWIGUpcast(long) -> OptionsEvent_SWIGUpcast
    long PublicationEvent_SWIGUpcast(long) -> PublicationEvent_SWIGUpcast
    long RegistrationEvent_SWIGUpcast(long) -> RegistrationEvent_SWIGUpcast
    long SubscriptionEvent_SWIGUpcast(long) -> SubscriptionEvent_SWIGUpcast
    long InviteSession_SWIGUpcast(long) -> InviteSession_SWIGUpcast
    long CallSession_SWIGUpcast(long) -> CallSession_SWIGUpcast
    long MsrpSession_SWIGUpcast(long) -> MsrpSession_SWIGUpcast
    long MessagingSession_SWIGUpcast(long) -> MessagingSession_SWIGUpcast
    long InfoSession_SWIGUpcast(long) -> InfoSession_SWIGUpcast
    long OptionsSession_SWIGUpcast(long) -> OptionsSession_SWIGUpcast
    long PublicationSession_SWIGUpcast(long) -> PublicationSession_SWIGUpcast
    long RegistrationSession_SWIGUpcast(long) -> RegistrationSession_SWIGUpcast
    long SubscriptionSession_SWIGUpcast(long) -> SubscriptionSession_SWIGUpcast
    long ProxyAudioConsumer_SWIGUpcast(long) -> ProxyAudioConsumer_SWIGUpcast
    long ProxyVideoConsumer_SWIGUpcast(long) -> ProxyVideoConsumer_SWIGUpcast
    long ProxyAudioProducer_SWIGUpcast(long) -> ProxyAudioProducer_SWIGUpcast
    long ProxyVideoProducer_SWIGUpcast(long) -> ProxyVideoProducer_SWIGUpcast
    long SipStack_SWIGUpcast(long) -> SipStack_SWIGUpcast
    int SwigDirector_DDebugCallback_OnDebugInfo(org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> SwigDirector_DDebugCallback_OnDebugInfo
    int SwigDirector_DDebugCallback_OnDebugWarn(org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> SwigDirector_DDebugCallback_OnDebugWarn
    int SwigDirector_DDebugCallback_OnDebugError(org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> SwigDirector_DDebugCallback_OnDebugError
    int SwigDirector_DDebugCallback_OnDebugFatal(org.doubango.tinyWRAP.DDebugCallback,java.lang.String) -> SwigDirector_DDebugCallback_OnDebugFatal
    int SwigDirector_T140Callback_ondata(org.doubango.tinyWRAP.T140Callback,long) -> SwigDirector_T140Callback_ondata
    int SwigDirector_ProxyPluginMgrCallback_OnPluginCreated(org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> SwigDirector_ProxyPluginMgrCallback_OnPluginCreated
    int SwigDirector_ProxyPluginMgrCallback_OnPluginDestroyed(org.doubango.tinyWRAP.ProxyPluginMgrCallback,java.math.BigInteger,int) -> SwigDirector_ProxyPluginMgrCallback_OnPluginDestroyed
    int SwigDirector_ProxyAudioConsumerCallback_prepare(org.doubango.tinyWRAP.ProxyAudioConsumerCallback,int,int,int) -> SwigDirector_ProxyAudioConsumerCallback_prepare
    int SwigDirector_ProxyAudioConsumerCallback_start(org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> SwigDirector_ProxyAudioConsumerCallback_start
    int SwigDirector_ProxyAudioConsumerCallback_pause(org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> SwigDirector_ProxyAudioConsumerCallback_pause
    int SwigDirector_ProxyAudioConsumerCallback_stop(org.doubango.tinyWRAP.ProxyAudioConsumerCallback) -> SwigDirector_ProxyAudioConsumerCallback_stop
    int SwigDirector_ProxyVideoConsumerCallback_prepare(org.doubango.tinyWRAP.ProxyVideoConsumerCallback,int,int,int) -> SwigDirector_ProxyVideoConsumerCallback_prepare
    int SwigDirector_ProxyVideoConsumerCallback_consume(org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long) -> SwigDirector_ProxyVideoConsumerCallback_consume
    int SwigDirector_ProxyVideoConsumerCallback_bufferCopied(org.doubango.tinyWRAP.ProxyVideoConsumerCallback,long,long) -> SwigDirector_ProxyVideoConsumerCallback_bufferCopied
    int SwigDirector_ProxyVideoConsumerCallback_start(org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> SwigDirector_ProxyVideoConsumerCallback_start
    int SwigDirector_ProxyVideoConsumerCallback_pause(org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> SwigDirector_ProxyVideoConsumerCallback_pause
    int SwigDirector_ProxyVideoConsumerCallback_stop(org.doubango.tinyWRAP.ProxyVideoConsumerCallback) -> SwigDirector_ProxyVideoConsumerCallback_stop
    int SwigDirector_ProxyAudioProducerCallback_prepare(org.doubango.tinyWRAP.ProxyAudioProducerCallback,int,int,int) -> SwigDirector_ProxyAudioProducerCallback_prepare
    int SwigDirector_ProxyAudioProducerCallback_start(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> SwigDirector_ProxyAudioProducerCallback_start
    int SwigDirector_ProxyAudioProducerCallback_pause(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> SwigDirector_ProxyAudioProducerCallback_pause
    int SwigDirector_ProxyAudioProducerCallback_stop(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> SwigDirector_ProxyAudioProducerCallback_stop
    int SwigDirector_ProxyAudioProducerCallback_fillPushBuffer(org.doubango.tinyWRAP.ProxyAudioProducerCallback) -> SwigDirector_ProxyAudioProducerCallback_fillPushBuffer
    int SwigDirector_ProxyVideoProducerCallback_prepare(org.doubango.tinyWRAP.ProxyVideoProducerCallback,int,int,int) -> SwigDirector_ProxyVideoProducerCallback_prepare
    int SwigDirector_ProxyVideoProducerCallback_start(org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> SwigDirector_ProxyVideoProducerCallback_start
    int SwigDirector_ProxyVideoProducerCallback_pause(org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> SwigDirector_ProxyVideoProducerCallback_pause
    int SwigDirector_ProxyVideoProducerCallback_stop(org.doubango.tinyWRAP.ProxyVideoProducerCallback) -> SwigDirector_ProxyVideoProducerCallback_stop
    int SwigDirector_SipCallback_OnDialogEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnDialogEvent
    int SwigDirector_SipCallback_OnStackEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnStackEvent
    int SwigDirector_SipCallback_OnInviteEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnInviteEvent
    int SwigDirector_SipCallback_OnMessagingEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnMessagingEvent
    int SwigDirector_SipCallback_OnInfoEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnInfoEvent
    int SwigDirector_SipCallback_OnOptionsEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnOptionsEvent
    int SwigDirector_SipCallback_OnPublicationEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnPublicationEvent
    int SwigDirector_SipCallback_OnRegistrationEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnRegistrationEvent
    int SwigDirector_SipCallback_OnSubscriptionEvent(org.doubango.tinyWRAP.SipCallback,long) -> SwigDirector_SipCallback_OnSubscriptionEvent
    int SwigDirector_XcapCallback_onEvent(org.doubango.tinyWRAP.XcapCallback,long) -> SwigDirector_XcapCallback_onEvent
    int SwigDirector_MsrpCallback_OnEvent(org.doubango.tinyWRAP.MsrpCallback,long) -> SwigDirector_MsrpCallback_OnEvent
    void swig_module_init() -> swig_module_init
org.doubango.tinyWRAP.tmedia_bandwidth_level_t -> org.doubango.tinyWRAP.tmedia_bandwidth_level_t:
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t tmedia_bl_low -> tmedia_bl_low
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t tmedia_bl_medium -> tmedia_bl_medium
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t tmedia_bl_hight -> tmedia_bl_hight
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t tmedia_bl_unrestricted -> tmedia_bl_unrestricted
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_bandwidth_level_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_bandwidth_level_t$SwigNext -> org.doubango.tinyWRAP.tmedia_bandwidth_level_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_chroma_t -> org.doubango.tinyWRAP.tmedia_chroma_t:
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_none -> tmedia_chroma_none
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_rgb24 -> tmedia_chroma_rgb24
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_bgr24 -> tmedia_chroma_bgr24
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_rgb32 -> tmedia_chroma_rgb32
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_rgb565le -> tmedia_chroma_rgb565le
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_rgb565be -> tmedia_chroma_rgb565be
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_nv12 -> tmedia_chroma_nv12
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_nv21 -> tmedia_chroma_nv21
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_yuv422p -> tmedia_chroma_yuv422p
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_uyvy422 -> tmedia_chroma_uyvy422
    org.doubango.tinyWRAP.tmedia_chroma_t tmedia_chroma_yuv420p -> tmedia_chroma_yuv420p
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_chroma_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_chroma_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_chroma_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_chroma_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_chroma_t$SwigNext -> org.doubango.tinyWRAP.tmedia_chroma_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_codec_id_t -> org.doubango.tinyWRAP.tmedia_codec_id_t:
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_none -> tmedia_codec_id_none
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_amr_nb_oa -> tmedia_codec_id_amr_nb_oa
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_amr_nb_be -> tmedia_codec_id_amr_nb_be
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_amr_wb_oa -> tmedia_codec_id_amr_wb_oa
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_amr_wb_be -> tmedia_codec_id_amr_wb_be
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_gsm -> tmedia_codec_id_gsm
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_pcma -> tmedia_codec_id_pcma
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_pcmu -> tmedia_codec_id_pcmu
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_ilbc -> tmedia_codec_id_ilbc
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_speex_nb -> tmedia_codec_id_speex_nb
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_speex_wb -> tmedia_codec_id_speex_wb
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_speex_uwb -> tmedia_codec_id_speex_uwb
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_bv16 -> tmedia_codec_id_bv16
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_bv32 -> tmedia_codec_id_bv32
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_opus -> tmedia_codec_id_opus
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_g729ab -> tmedia_codec_id_g729ab
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_g722 -> tmedia_codec_id_g722
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h261 -> tmedia_codec_id_h261
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h263 -> tmedia_codec_id_h263
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h263p -> tmedia_codec_id_h263p
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h263pp -> tmedia_codec_id_h263pp
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_bp -> tmedia_codec_id_h264_bp
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_mp -> tmedia_codec_id_h264_mp
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_hp -> tmedia_codec_id_h264_hp
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_bp10 -> tmedia_codec_id_h264_bp10
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_bp20 -> tmedia_codec_id_h264_bp20
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_bp30 -> tmedia_codec_id_h264_bp30
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_h264_svc -> tmedia_codec_id_h264_svc
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_theora -> tmedia_codec_id_theora
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_mp4ves_es -> tmedia_codec_id_mp4ves_es
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_vp8 -> tmedia_codec_id_vp8
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_t140 -> tmedia_codec_id_t140
    org.doubango.tinyWRAP.tmedia_codec_id_t tmedia_codec_id_red -> tmedia_codec_id_red
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_codec_id_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_codec_id_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_codec_id_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_codec_id_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_codec_id_t$SwigNext -> org.doubango.tinyWRAP.tmedia_codec_id_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_mode_t -> org.doubango.tinyWRAP.tmedia_mode_t:
    org.doubango.tinyWRAP.tmedia_mode_t tmedia_mode_none -> tmedia_mode_none
    org.doubango.tinyWRAP.tmedia_mode_t tmedia_mode_optional -> tmedia_mode_optional
    org.doubango.tinyWRAP.tmedia_mode_t tmedia_mode_mandatory -> tmedia_mode_mandatory
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_mode_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_mode_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_mode_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_mode_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_mode_t$SwigNext -> org.doubango.tinyWRAP.tmedia_mode_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_pref_video_size_t -> org.doubango.tinyWRAP.tmedia_pref_video_size_t:
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_sqcif -> tmedia_pref_video_size_sqcif
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_qcif -> tmedia_pref_video_size_qcif
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_qvga -> tmedia_pref_video_size_qvga
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_cif -> tmedia_pref_video_size_cif
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_hvga -> tmedia_pref_video_size_hvga
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_vga -> tmedia_pref_video_size_vga
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_4cif -> tmedia_pref_video_size_4cif
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_svga -> tmedia_pref_video_size_svga
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_480p -> tmedia_pref_video_size_480p
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_720p -> tmedia_pref_video_size_720p
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_16cif -> tmedia_pref_video_size_16cif
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_1080p -> tmedia_pref_video_size_1080p
    org.doubango.tinyWRAP.tmedia_pref_video_size_t tmedia_pref_video_size_2160p -> tmedia_pref_video_size_2160p
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_pref_video_size_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_pref_video_size_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_pref_video_size_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_pref_video_size_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_pref_video_size_t$SwigNext -> org.doubango.tinyWRAP.tmedia_pref_video_size_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_profile_t -> org.doubango.tinyWRAP.tmedia_profile_t:
    org.doubango.tinyWRAP.tmedia_profile_t tmedia_profile_default -> tmedia_profile_default
    org.doubango.tinyWRAP.tmedia_profile_t tmedia_profile_rtcweb -> tmedia_profile_rtcweb
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_profile_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_profile_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_profile_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_profile_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_profile_t$SwigNext -> org.doubango.tinyWRAP.tmedia_profile_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_qos_strength_t -> org.doubango.tinyWRAP.tmedia_qos_strength_t:
    org.doubango.tinyWRAP.tmedia_qos_strength_t tmedia_qos_strength_none -> tmedia_qos_strength_none
    org.doubango.tinyWRAP.tmedia_qos_strength_t tmedia_qos_strength_failure -> tmedia_qos_strength_failure
    org.doubango.tinyWRAP.tmedia_qos_strength_t tmedia_qos_strength_unknown -> tmedia_qos_strength_unknown
    org.doubango.tinyWRAP.tmedia_qos_strength_t tmedia_qos_strength_optional -> tmedia_qos_strength_optional
    org.doubango.tinyWRAP.tmedia_qos_strength_t tmedia_qos_strength_mandatory -> tmedia_qos_strength_mandatory
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_qos_strength_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_qos_strength_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_qos_strength_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_qos_strength_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_qos_strength_t$SwigNext -> org.doubango.tinyWRAP.tmedia_qos_strength_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_qos_stype_t -> org.doubango.tinyWRAP.tmedia_qos_stype_t:
    org.doubango.tinyWRAP.tmedia_qos_stype_t tmedia_qos_stype_none -> tmedia_qos_stype_none
    org.doubango.tinyWRAP.tmedia_qos_stype_t tmedia_qos_stype_segmented -> tmedia_qos_stype_segmented
    org.doubango.tinyWRAP.tmedia_qos_stype_t tmedia_qos_stype_e2e -> tmedia_qos_stype_e2e
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_qos_stype_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_qos_stype_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_qos_stype_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_qos_stype_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_qos_stype_t$SwigNext -> org.doubango.tinyWRAP.tmedia_qos_stype_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_srtp_mode_t -> org.doubango.tinyWRAP.tmedia_srtp_mode_t:
    org.doubango.tinyWRAP.tmedia_srtp_mode_t tmedia_srtp_mode_none -> tmedia_srtp_mode_none
    org.doubango.tinyWRAP.tmedia_srtp_mode_t tmedia_srtp_mode_optional -> tmedia_srtp_mode_optional
    org.doubango.tinyWRAP.tmedia_srtp_mode_t tmedia_srtp_mode_mandatory -> tmedia_srtp_mode_mandatory
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_srtp_mode_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_srtp_mode_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_srtp_mode_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_srtp_mode_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_srtp_mode_t$SwigNext -> org.doubango.tinyWRAP.tmedia_srtp_mode_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_srtp_type_t -> org.doubango.tinyWRAP.tmedia_srtp_type_t:
    org.doubango.tinyWRAP.tmedia_srtp_type_t tmedia_srtp_type_none -> tmedia_srtp_type_none
    org.doubango.tinyWRAP.tmedia_srtp_type_t tmedia_srtp_type_sdes -> tmedia_srtp_type_sdes
    org.doubango.tinyWRAP.tmedia_srtp_type_t tmedia_srtp_type_dtls -> tmedia_srtp_type_dtls
    org.doubango.tinyWRAP.tmedia_srtp_type_t tmedia_srtp_type_sdes_dtls -> tmedia_srtp_type_sdes_dtls
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_srtp_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_srtp_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_srtp_type_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_srtp_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_srtp_type_t$SwigNext -> org.doubango.tinyWRAP.tmedia_srtp_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmedia_t140_data_type_t -> org.doubango.tinyWRAP.tmedia_t140_data_type_t:
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_utf8 -> tmedia_t140_data_type_utf8
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_zero_width_no_break_space -> tmedia_t140_data_type_zero_width_no_break_space
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_backspace -> tmedia_t140_data_type_backspace
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_esc -> tmedia_t140_data_type_esc
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_cr -> tmedia_t140_data_type_cr
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_lf -> tmedia_t140_data_type_lf
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_cr_lf -> tmedia_t140_data_type_cr_lf
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_interrupt2 -> tmedia_t140_data_type_interrupt2
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_bell -> tmedia_t140_data_type_bell
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_sos -> tmedia_t140_data_type_sos
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_string_term -> tmedia_t140_data_type_string_term
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_graphic_start -> tmedia_t140_data_type_graphic_start
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_graphic_end -> tmedia_t140_data_type_graphic_end
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_loss_char_char -> tmedia_t140_data_type_loss_char_char
    org.doubango.tinyWRAP.tmedia_t140_data_type_t tmedia_t140_data_type_loss_utf8 -> tmedia_t140_data_type_loss_utf8
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmedia_t140_data_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmedia_t140_data_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmedia_t140_data_type_t[] values() -> values
    org.doubango.tinyWRAP.tmedia_t140_data_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmedia_t140_data_type_t$SwigNext -> org.doubango.tinyWRAP.tmedia_t140_data_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmsrp_event_type_t -> org.doubango.tinyWRAP.tmsrp_event_type_t:
    org.doubango.tinyWRAP.tmsrp_event_type_t tmsrp_event_type_none -> tmsrp_event_type_none
    org.doubango.tinyWRAP.tmsrp_event_type_t tmsrp_event_type_connected -> tmsrp_event_type_connected
    org.doubango.tinyWRAP.tmsrp_event_type_t tmsrp_event_type_disconnected -> tmsrp_event_type_disconnected
    org.doubango.tinyWRAP.tmsrp_event_type_t tmsrp_event_type_message -> tmsrp_event_type_message
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmsrp_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmsrp_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmsrp_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tmsrp_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmsrp_event_type_t$SwigNext -> org.doubango.tinyWRAP.tmsrp_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tmsrp_request_type_t -> org.doubango.tinyWRAP.tmsrp_request_type_t:
    org.doubango.tinyWRAP.tmsrp_request_type_t tmsrp_NONE -> tmsrp_NONE
    org.doubango.tinyWRAP.tmsrp_request_type_t tmsrp_SEND -> tmsrp_SEND
    org.doubango.tinyWRAP.tmsrp_request_type_t tmsrp_REPORT -> tmsrp_REPORT
    org.doubango.tinyWRAP.tmsrp_request_type_t tmsrp_AUTH -> tmsrp_AUTH
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tmsrp_request_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tmsrp_request_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tmsrp_request_type_t[] values() -> values
    org.doubango.tinyWRAP.tmsrp_request_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tmsrp_request_type_t$SwigNext -> org.doubango.tinyWRAP.tmsrp_request_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_event_type_t -> org.doubango.tinyWRAP.tsip_event_type_t:
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_invite -> tsip_event_invite
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_message -> tsip_event_message
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_info -> tsip_event_info
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_options -> tsip_event_options
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_publish -> tsip_event_publish
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_register -> tsip_event_register
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_subscribe -> tsip_event_subscribe
    org.doubango.tinyWRAP.tsip_event_type_t tsip_event_dialog -> tsip_event_dialog
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_info_event_type_t -> org.doubango.tinyWRAP.tsip_info_event_type_t:
    org.doubango.tinyWRAP.tsip_info_event_type_t tsip_i_info -> tsip_i_info
    org.doubango.tinyWRAP.tsip_info_event_type_t tsip_ao_info -> tsip_ao_info
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_info_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_info_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_info_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_info_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_info_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_info_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_invite_event_type_t -> org.doubango.tinyWRAP.tsip_invite_event_type_t:
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_newcall -> tsip_i_newcall
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_request -> tsip_i_request
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_ao_request -> tsip_ao_request
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_o_ect_trying -> tsip_o_ect_trying
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_o_ect_accepted -> tsip_o_ect_accepted
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_o_ect_completed -> tsip_o_ect_completed
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_o_ect_failed -> tsip_o_ect_failed
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_o_ect_notify -> tsip_o_ect_notify
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_ect_requested -> tsip_i_ect_requested
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_ect_newcall -> tsip_i_ect_newcall
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_ect_completed -> tsip_i_ect_completed
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_ect_failed -> tsip_i_ect_failed
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_i_ect_notify -> tsip_i_ect_notify
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_early_media -> tsip_m_early_media
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_updating -> tsip_m_updating
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_updated -> tsip_m_updated
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_local_hold_ok -> tsip_m_local_hold_ok
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_local_hold_nok -> tsip_m_local_hold_nok
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_local_resume_ok -> tsip_m_local_resume_ok
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_local_resume_nok -> tsip_m_local_resume_nok
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_remote_hold -> tsip_m_remote_hold
    org.doubango.tinyWRAP.tsip_invite_event_type_t tsip_m_remote_resume -> tsip_m_remote_resume
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_invite_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_invite_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_invite_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_invite_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_invite_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_invite_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_message_event_type_t -> org.doubango.tinyWRAP.tsip_message_event_type_t:
    org.doubango.tinyWRAP.tsip_message_event_type_t tsip_i_message -> tsip_i_message
    org.doubango.tinyWRAP.tsip_message_event_type_t tsip_ao_message -> tsip_ao_message
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_message_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_message_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_message_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_message_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_message_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_message_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_options_event_type_t -> org.doubango.tinyWRAP.tsip_options_event_type_t:
    org.doubango.tinyWRAP.tsip_options_event_type_t tsip_i_options -> tsip_i_options
    org.doubango.tinyWRAP.tsip_options_event_type_t tsip_ao_options -> tsip_ao_options
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_options_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_options_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_options_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_options_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_options_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_options_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_publish_event_type_t -> org.doubango.tinyWRAP.tsip_publish_event_type_t:
    org.doubango.tinyWRAP.tsip_publish_event_type_t tsip_i_publish -> tsip_i_publish
    org.doubango.tinyWRAP.tsip_publish_event_type_t tsip_ao_publish -> tsip_ao_publish
    org.doubango.tinyWRAP.tsip_publish_event_type_t tsip_i_unpublish -> tsip_i_unpublish
    org.doubango.tinyWRAP.tsip_publish_event_type_t tsip_ao_unpublish -> tsip_ao_unpublish
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_publish_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_publish_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_publish_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_publish_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_publish_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_publish_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_register_event_type_t -> org.doubango.tinyWRAP.tsip_register_event_type_t:
    org.doubango.tinyWRAP.tsip_register_event_type_t tsip_i_newreg -> tsip_i_newreg
    org.doubango.tinyWRAP.tsip_register_event_type_t tsip_i_register -> tsip_i_register
    org.doubango.tinyWRAP.tsip_register_event_type_t tsip_ao_register -> tsip_ao_register
    org.doubango.tinyWRAP.tsip_register_event_type_t tsip_i_unregister -> tsip_i_unregister
    org.doubango.tinyWRAP.tsip_register_event_type_t tsip_ao_unregister -> tsip_ao_unregister
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_register_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_register_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_register_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_register_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_register_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_register_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_request_type_t -> org.doubango.tinyWRAP.tsip_request_type_t:
    org.doubango.tinyWRAP.tsip_request_type_t tsip_NONE -> tsip_NONE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_ACK -> tsip_ACK
    org.doubango.tinyWRAP.tsip_request_type_t tsip_BYE -> tsip_BYE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_CANCEL -> tsip_CANCEL
    org.doubango.tinyWRAP.tsip_request_type_t tsip_INVITE -> tsip_INVITE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_OPTIONS -> tsip_OPTIONS
    org.doubango.tinyWRAP.tsip_request_type_t tsip_REGISTER -> tsip_REGISTER
    org.doubango.tinyWRAP.tsip_request_type_t tsip_SUBSCRIBE -> tsip_SUBSCRIBE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_NOTIFY -> tsip_NOTIFY
    org.doubango.tinyWRAP.tsip_request_type_t tsip_REFER -> tsip_REFER
    org.doubango.tinyWRAP.tsip_request_type_t tsip_INFO -> tsip_INFO
    org.doubango.tinyWRAP.tsip_request_type_t tsip_UPDATE -> tsip_UPDATE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_MESSAGE -> tsip_MESSAGE
    org.doubango.tinyWRAP.tsip_request_type_t tsip_PUBLISH -> tsip_PUBLISH
    org.doubango.tinyWRAP.tsip_request_type_t tsip_PRACK -> tsip_PRACK
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_request_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_request_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_request_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_request_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_request_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_request_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_stack_mode_t -> org.doubango.tinyWRAP.tsip_stack_mode_t:
    org.doubango.tinyWRAP.tsip_stack_mode_t tsip_stack_mode_ua -> tsip_stack_mode_ua
    org.doubango.tinyWRAP.tsip_stack_mode_t tsip_stack_mode_p2p -> tsip_stack_mode_p2p
    org.doubango.tinyWRAP.tsip_stack_mode_t tsip_stack_mode_mediaproxy -> tsip_stack_mode_mediaproxy
    org.doubango.tinyWRAP.tsip_stack_mode_t tsip_stack_mode_mcu -> tsip_stack_mode_mcu
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_stack_mode_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_stack_mode_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_stack_mode_t[] values() -> values
    org.doubango.tinyWRAP.tsip_stack_mode_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_stack_mode_t$SwigNext -> org.doubango.tinyWRAP.tsip_stack_mode_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.tsip_subscribe_event_type_t -> org.doubango.tinyWRAP.tsip_subscribe_event_type_t:
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_i_subscribe -> tsip_i_subscribe
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_ao_subscribe -> tsip_ao_subscribe
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_i_unsubscribe -> tsip_i_unsubscribe
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_ao_unsubscribe -> tsip_ao_unsubscribe
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_i_notify -> tsip_i_notify
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t tsip_ao_notify -> tsip_ao_notify
    int swigValue -> swigValue
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t[] values() -> values
    org.doubango.tinyWRAP.tsip_subscribe_event_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.tsip_subscribe_event_type_t$SwigNext -> org.doubango.tinyWRAP.tsip_subscribe_event_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.twrap_media_type_t -> org.doubango.tinyWRAP.twrap_media_type_t:
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_none -> twrap_media_none
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_audio -> twrap_media_audio
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_video -> twrap_media_video
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_msrp -> twrap_media_msrp
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_t140 -> twrap_media_t140
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_audio_t140 -> twrap_media_audio_t140
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_video_t140 -> twrap_media_video_t140
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_audiovideo -> twrap_media_audiovideo
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_audio_video -> twrap_media_audio_video
    org.doubango.tinyWRAP.twrap_media_type_t twrap_media_audio_video_t140 -> twrap_media_audio_video_t140
    int swigValue -> swigValue
    org.doubango.tinyWRAP.twrap_media_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.twrap_media_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.twrap_media_type_t[] values() -> values
    org.doubango.tinyWRAP.twrap_media_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.twrap_media_type_t$SwigNext -> org.doubango.tinyWRAP.twrap_media_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.twrap_proxy_plugin_type_t -> org.doubango.tinyWRAP.twrap_proxy_plugin_type_t:
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t twrap_proxy_plugin_audio_producer -> twrap_proxy_plugin_audio_producer
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t twrap_proxy_plugin_video_producer -> twrap_proxy_plugin_video_producer
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t twrap_proxy_plugin_audio_consumer -> twrap_proxy_plugin_audio_consumer
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t twrap_proxy_plugin_video_consumer -> twrap_proxy_plugin_video_consumer
    int swigValue -> swigValue
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t[] values() -> values
    org.doubango.tinyWRAP.twrap_proxy_plugin_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.twrap_proxy_plugin_type_t$SwigNext -> org.doubango.tinyWRAP.twrap_proxy_plugin_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.twrap_rpmessage_type_t -> org.doubango.tinyWRAP.twrap_rpmessage_type_t:
    org.doubango.tinyWRAP.twrap_rpmessage_type_t twrap_rpmessage_type_sms_none -> twrap_rpmessage_type_sms_none
    org.doubango.tinyWRAP.twrap_rpmessage_type_t twrap_rpmessage_type_sms_submit -> twrap_rpmessage_type_sms_submit
    org.doubango.tinyWRAP.twrap_rpmessage_type_t twrap_rpmessage_type_sms_deliver -> twrap_rpmessage_type_sms_deliver
    org.doubango.tinyWRAP.twrap_rpmessage_type_t twrap_rpmessage_type_sms_ack -> twrap_rpmessage_type_sms_ack
    org.doubango.tinyWRAP.twrap_rpmessage_type_t twrap_rpmessage_type_sms_error -> twrap_rpmessage_type_sms_error
    int swigValue -> swigValue
    org.doubango.tinyWRAP.twrap_rpmessage_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.twrap_rpmessage_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.twrap_rpmessage_type_t[] values() -> values
    org.doubango.tinyWRAP.twrap_rpmessage_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.twrap_rpmessage_type_t$SwigNext -> org.doubango.tinyWRAP.twrap_rpmessage_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.tinyWRAP.twrap_sms_type_t -> org.doubango.tinyWRAP.twrap_sms_type_t:
    org.doubango.tinyWRAP.twrap_sms_type_t twrap_sms_type_none -> twrap_sms_type_none
    org.doubango.tinyWRAP.twrap_sms_type_t twrap_sms_type_rpdata -> twrap_sms_type_rpdata
    org.doubango.tinyWRAP.twrap_sms_type_t twrap_sms_type_smma -> twrap_sms_type_smma
    org.doubango.tinyWRAP.twrap_sms_type_t twrap_sms_type_ack -> twrap_sms_type_ack
    org.doubango.tinyWRAP.twrap_sms_type_t twrap_sms_type_error -> twrap_sms_type_error
    int swigValue -> swigValue
    org.doubango.tinyWRAP.twrap_sms_type_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.tinyWRAP.twrap_sms_type_t swigToEnum(int) -> swigToEnum
    org.doubango.tinyWRAP.twrap_sms_type_t[] values() -> values
    org.doubango.tinyWRAP.twrap_sms_type_t valueOf(java.lang.String) -> valueOf
org.doubango.tinyWRAP.twrap_sms_type_t$SwigNext -> org.doubango.tinyWRAP.twrap_sms_type_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.utils.AndroidUtils -> org.doubango.utils.AndroidUtils:
    long swigCPtr -> swigCPtr
    boolean swigCMemOwn -> swigCMemOwn
    long getCPtr(org.doubango.utils.AndroidUtils) -> getCPtr
    void finalize() -> finalize
    void delete() -> delete
    java.math.BigInteger getCpuFamily() -> getCpuFamily
    java.math.BigInteger getCpuFeatures() -> getCpuFeatures
org.doubango.utils.CpuFamily_t -> org.doubango.utils.CpuFamily_t:
    org.doubango.utils.CpuFamily_t UNKNOWN -> UNKNOWN
    org.doubango.utils.CpuFamily_t ARM -> ARM
    org.doubango.utils.CpuFamily_t X86 -> X86
    int swigValue -> swigValue
    org.doubango.utils.CpuFamily_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.utils.CpuFamily_t swigToEnum(int) -> swigToEnum
    org.doubango.utils.CpuFamily_t[] values() -> values
    org.doubango.utils.CpuFamily_t valueOf(java.lang.String) -> valueOf
org.doubango.utils.CpuFamily_t$SwigNext -> org.doubango.utils.CpuFamily_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.utils.CpuFeatures_t -> org.doubango.utils.CpuFeatures_t:
    org.doubango.utils.CpuFeatures_t ARMv7 -> ARMv7
    org.doubango.utils.CpuFeatures_t VFPv3 -> VFPv3
    org.doubango.utils.CpuFeatures_t NEON -> NEON
    int swigValue -> swigValue
    org.doubango.utils.CpuFeatures_t[] ENUM$VALUES -> ENUM$VALUES
    int swigValue() -> swigValue
    org.doubango.utils.CpuFeatures_t swigToEnum(int) -> swigToEnum
    org.doubango.utils.CpuFeatures_t[] values() -> values
    org.doubango.utils.CpuFeatures_t valueOf(java.lang.String) -> valueOf
org.doubango.utils.CpuFeatures_t$SwigNext -> org.doubango.utils.CpuFeatures_t$SwigNext:
    int next -> next
    int access$0() -> access$0
    void access$1(int) -> access$1
org.doubango.utils.utils -> org.doubango.utils.utils:
org.doubango.utils.utilsJNI -> org.doubango.utils.utilsJNI:
    long new_AndroidUtils() -> new_AndroidUtils
    void delete_AndroidUtils(long) -> delete_AndroidUtils
    java.math.BigInteger AndroidUtils_getCpuFamily() -> AndroidUtils_getCpuFamily
    java.math.BigInteger AndroidUtils_getCpuFeatures() -> AndroidUtils_getCpuFeatures
org.jdom.Attribute -> org.a.a:
    java.lang.String name -> a
    org.jdom.Namespace namespace -> b
    java.lang.String value -> c
    int type -> d
    org.jdom.Element parent -> e
    org.jdom.Element getParent() -> a
    org.jdom.Attribute setParent(org.jdom.Element) -> a
    java.lang.String getName() -> b
    java.lang.String getQualifiedName() -> c
    java.lang.String getNamespaceURI() -> d
    org.jdom.Namespace getNamespace() -> e
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
org.jdom.AttributeList -> org.a.b:
    org.jdom.Attribute[] elementData -> a
    int size -> b
    org.jdom.Element parent -> c
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    void add(int,org.jdom.Attribute) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void ensureCapacity(int) -> a
    java.lang.Object get(int) -> get
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object set(int,org.jdom.Attribute) -> b
    int indexOfDuplicate(org.jdom.Attribute) -> a
    int size() -> size
    java.lang.String toString() -> toString
org.jdom.CDATA -> org.a.c:
    org.jdom.Text setText(java.lang.String) -> a
    java.lang.String toString() -> toString
org.jdom.Comment -> org.a.d:
    java.lang.String text -> a
    java.lang.String getText() -> a
    java.lang.String toString() -> toString
org.jdom.Content -> org.a.e:
    org.jdom.Parent parent -> b
    org.jdom.Parent getParent() -> b
    org.jdom.Content setParent(org.jdom.Parent) -> a
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jdom.ContentList -> org.a.f:
    org.jdom.Content[] elementData -> a
    int size -> b
    org.jdom.Parent parent -> c
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    void ensureCapacity(int) -> a
    java.lang.Object get(int) -> get
    java.util.List getView(org.jdom.filter.Filter) -> a
    int indexOfFirstElement() -> a
    int indexOfDocType() -> b
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    int size() -> size
    java.lang.String toString() -> toString
    int access$000(org.jdom.ContentList) -> a
    org.jdom.Content[] access$100(org.jdom.ContentList) -> b
    int access$200(org.jdom.ContentList) -> c
org.jdom.ContentList$FilterList -> org.a.g:
    org.jdom.filter.Filter filter -> a
    int count -> b
    int expected -> c
    org.jdom.ContentList this$0 -> d
    void add(int,java.lang.Object) -> add
    java.lang.Object get(int) -> get
    java.util.Iterator iterator() -> iterator
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    java.lang.Object remove(int) -> remove
    java.lang.Object set(int,java.lang.Object) -> set
    int size() -> size
    int getAdjustedIndex(int) -> a
org.jdom.ContentList$FilterListIterator -> org.a.h:
    org.jdom.filter.Filter filter -> a
    boolean forward -> b
    boolean canremove -> c
    boolean canset -> d
    int cursor -> e
    int tmpcursor -> f
    int index -> g
    int expected -> h
    int fsize -> i
    org.jdom.ContentList this$0 -> j
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void remove() -> remove
    void set(java.lang.Object) -> set
    void checkConcurrentModification() -> a
org.jdom.DefaultJDOMFactory -> org.a.i:
    org.jdom.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom.Namespace) -> a
    org.jdom.Attribute attribute(java.lang.String,java.lang.String,int) -> a
    org.jdom.CDATA cdata(java.lang.String) -> a
    org.jdom.Text text(java.lang.String) -> b
    org.jdom.Comment comment(java.lang.String) -> c
    org.jdom.DocType docType(java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom.Document document$3782d51e() -> a
    org.jdom.Element element(java.lang.String,org.jdom.Namespace) -> a
    org.jdom.Element element(java.lang.String) -> d
    org.jdom.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String) -> a
    org.jdom.EntityRef entityRef(java.lang.String) -> e
    org.jdom.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String) -> b
    void addContent(org.jdom.Parent,org.jdom.Content) -> a
    void setAttribute(org.jdom.Element,org.jdom.Attribute) -> a
org.jdom.DocType -> org.a.j:
    java.lang.String elementName -> a
    java.lang.String publicID -> c
    java.lang.String systemID -> d
    java.lang.String internalSubset -> e
    java.lang.String getElementName() -> a
    java.lang.String getPublicID() -> c
    java.lang.String getSystemID() -> d
    void setInternalSubset(java.lang.String) -> a
    java.lang.String getInternalSubset() -> e
    java.lang.String toString() -> toString
org.jdom.Document -> org.a.k:
    org.jdom.ContentList content -> a
    java.lang.String baseURI -> b
    java.util.HashMap propertyMap -> c
    boolean hasRootElement() -> a
    org.jdom.Element getRootElement() -> c
    org.jdom.Document setRootElement(org.jdom.Element) -> a
    org.jdom.DocType getDocType() -> d
    org.jdom.Document addContent(org.jdom.Content) -> a
    void setBaseURI(java.lang.String) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
    org.jdom.Parent getParent() -> b
org.jdom.Element -> org.a.l:
    java.lang.String name -> a
    org.jdom.Namespace namespace -> c
    java.util.List additionalNamespaces -> d
    org.jdom.AttributeList attributes -> e
    org.jdom.ContentList content -> f
    java.lang.String getName() -> a
    org.jdom.Namespace getNamespace() -> c
    java.lang.String getQualifiedName() -> d
    void addNamespaceDeclaration(org.jdom.Namespace) -> a
    java.util.List getAdditionalNamespaces() -> e
    java.lang.String getText() -> f
    org.jdom.Element addContent(org.jdom.Content) -> a
    boolean isAncestor(org.jdom.Element) -> a
    java.util.List getAttributes() -> g
    org.jdom.Element setAttribute(org.jdom.Attribute) -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    java.util.List getChildren() -> h
    org.jdom.Element getChild(java.lang.String,org.jdom.Namespace) -> a
org.jdom.EntityRef -> org.a.m:
    java.lang.String name -> a
    java.lang.String publicID -> c
    java.lang.String systemID -> d
    java.lang.String toString() -> toString
org.jdom.IllegalAddException -> org.a.n:
org.jdom.IllegalDataException -> org.a.o:
org.jdom.IllegalNameException -> org.a.p:
org.jdom.IllegalTargetException -> org.a.q:
org.jdom.JDOMException -> org.a.r:
    java.lang.Throwable cause -> a
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String getMessage() -> getMessage
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable getNestedException(java.lang.Throwable) -> a
    java.lang.Throwable getNestedException(java.lang.Throwable,java.lang.String,java.lang.String) -> a
    java.lang.Throwable getNestedExceptionFromField(java.lang.Throwable,java.lang.String,java.lang.String) -> b
org.jdom.JDOMFactory -> org.a.s:
    org.jdom.Attribute attribute(java.lang.String,java.lang.String,int,org.jdom.Namespace) -> a
    org.jdom.Attribute attribute(java.lang.String,java.lang.String,int) -> a
    org.jdom.CDATA cdata(java.lang.String) -> a
    org.jdom.Text text(java.lang.String) -> b
    org.jdom.Comment comment(java.lang.String) -> c
    org.jdom.DocType docType(java.lang.String,java.lang.String,java.lang.String) -> a
    org.jdom.Document document$3782d51e() -> a
    org.jdom.Element element(java.lang.String,org.jdom.Namespace) -> a
    org.jdom.Element element(java.lang.String) -> d
    org.jdom.ProcessingInstruction processingInstruction(java.lang.String,java.lang.String) -> a
    org.jdom.EntityRef entityRef(java.lang.String) -> e
    org.jdom.EntityRef entityRef(java.lang.String,java.lang.String,java.lang.String) -> b
    void addContent(org.jdom.Parent,org.jdom.Content) -> a
    void setAttribute(org.jdom.Element,org.jdom.Attribute) -> a
org.jdom.Namespace -> org.a.t:
    java.util.HashMap namespaces -> c
    org.jdom.Namespace NO_NAMESPACE -> a
    org.jdom.Namespace XML_NAMESPACE -> b
    java.lang.String prefix -> d
    java.lang.String uri -> e
    org.jdom.Namespace getNamespace(java.lang.String,java.lang.String) -> a
    java.lang.String getPrefix() -> a
    java.lang.String getURI() -> b
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.jdom.NamespaceKey -> org.a.u:
    java.lang.String prefix -> a
    java.lang.String uri -> b
    int hash -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.jdom.Parent -> org.a.v:
    org.jdom.Parent getParent() -> b
org.jdom.ProcessingInstruction -> org.a.w:
    java.lang.String target -> a
    java.lang.String rawData -> c
    java.util.Map mapData -> d
    java.lang.String getTarget() -> a
    java.lang.String getData() -> c
    java.util.Map parseData(java.lang.String) -> a
    int[] extractQuotedString(java.lang.String) -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.jdom.Text -> org.a.x:
    java.lang.String value -> a
    java.lang.String getText() -> a
    org.jdom.Text setText(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.jdom.Verifier -> org.a.y:
    java.lang.String checkCharacterData(java.lang.String) -> a
    java.lang.String checkNamespaceCollision(org.jdom.Namespace,org.jdom.Namespace) -> a
    java.lang.String checkNamespaceCollision(org.jdom.Attribute,org.jdom.Element) -> a
    java.lang.String checkNamespaceCollision(org.jdom.Namespace,org.jdom.Element) -> a
    java.lang.String checkNamespaceCollision(org.jdom.Namespace,java.util.List) -> a
    java.lang.String checkPublicID(java.lang.String) -> b
    java.lang.String checkSystemLiteral(java.lang.String) -> c
    java.lang.String checkXMLName(java.lang.String) -> d
    boolean isXMLNameCharacter(char) -> a
    boolean isXMLLetter(char) -> d
    boolean isXMLDigit(char) -> b
    boolean isXMLWhitespace(char) -> c
org.jdom.filter.AbstractFilter -> org.a.a.a:
org.jdom.filter.ElementFilter -> org.a.a.b:
    java.lang.String name -> a
    org.jdom.Namespace namespace -> b
    boolean matches(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jdom.filter.Filter -> org.a.a.c:
    boolean matches(java.lang.Object) -> a
org.jdom.input.BuilderErrorHandler -> org.a.b.a:
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
org.jdom.input.JAXPParserFactory -> org.a.b.b:
org.jdom.input.JDOMParseException -> org.a.b.c:
    org.jdom.Document partialDocument -> a
org.jdom.input.SAXBuilder -> org.a.b.d:
    boolean validate -> b
    boolean expand -> c
    java.lang.String saxDriverClass -> d
    org.xml.sax.ErrorHandler saxErrorHandler -> e
    org.xml.sax.EntityResolver saxEntityResolver -> f
    org.xml.sax.DTDHandler saxDTDHandler -> g
    org.xml.sax.XMLFilter saxXMLFilter -> h
    org.jdom.JDOMFactory factory -> i
    boolean ignoringWhite -> j
    boolean ignoringBoundaryWhite -> k
    java.util.HashMap features -> l
    java.util.HashMap properties -> m
    boolean fastReconfigure -> n
    boolean skipNextLexicalReportingConfig -> o
    boolean skipNextEntityExpandConfig -> p
    boolean reuseParser -> q
    org.xml.sax.XMLReader saxParser -> r
    java.lang.Class class$java$util$Map -> a
    org.jdom.Document build(org.xml.sax.InputSource) -> a
    org.xml.sax.XMLReader createParser() -> a
    void configureParser(org.xml.sax.XMLReader,org.jdom.input.SAXHandler) -> a
    void setFeaturesAndProperties(org.xml.sax.XMLReader,boolean) -> a
    void internalSetFeature(org.xml.sax.XMLReader,java.lang.String,boolean,java.lang.String) -> a
    java.lang.Class class$(java.lang.String) -> a
org.jdom.input.SAXHandler -> org.a.b.e:
    java.util.Map attrNameToTypeMap -> a
    org.jdom.Document document -> b
    org.jdom.Element currentElement -> c
    boolean atRoot -> d
    boolean inDTD -> e
    boolean inInternalSubset -> f
    boolean previousCDATA -> g
    boolean inCDATA -> h
    boolean expand -> i
    boolean suppress -> j
    int entityDepth -> k
    java.util.List declaredNamespaces -> l
    java.lang.StringBuffer internalSubset -> m
    org.jdom.input.TextBuffer textBuffer -> n
    java.util.Map externalEntities -> o
    org.jdom.JDOMFactory factory -> p
    boolean ignoringWhite -> q
    boolean ignoringBoundaryWhite -> r
    org.xml.sax.Locator locator -> s
    org.jdom.Document getDocument() -> a
    void setExpandEntities(boolean) -> a
    void setIgnoringElementContentWhitespace(boolean) -> b
    void setIgnoringBoundaryWhitespace(boolean) -> c
    void startDocument() -> startDocument
    void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String) -> externalEntityDecl
    void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> attributeDecl
    void elementDecl(java.lang.String,java.lang.String) -> elementDecl
    void internalEntityDecl(java.lang.String,java.lang.String) -> internalEntityDecl
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void skippedEntity(java.lang.String) -> skippedEntity
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void characters(char[],int,int) -> characters
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void flushCharacters() -> b
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void startDTD(java.lang.String,java.lang.String,java.lang.String) -> startDTD
    void endDTD() -> endDTD
    void startEntity(java.lang.String) -> startEntity
    void endEntity(java.lang.String) -> endEntity
    void startCDATA() -> startCDATA
    void endCDATA() -> endCDATA
    void comment(char[],int,int) -> comment
    void notationDecl(java.lang.String,java.lang.String,java.lang.String) -> notationDecl
    void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> unparsedEntityDecl
    void appendExternalId(java.lang.String,java.lang.String) -> a
    org.jdom.Element getCurrentElement() -> c
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
org.jdom.input.TextBuffer -> org.a.b.f:
    java.lang.String prefixString -> a
    char[] array -> b
    int arraySize -> c
    void append(char[],int,int) -> a
    void clear() -> a
    boolean isAllWhitespace() -> b
    java.lang.String toString() -> toString
    void ensureCapacity(int) -> a
org.jdom.output.EscapeStrategy -> org.a.c.a:
org.jdom.output.Format -> org.a.c.b:
    java.lang.String indent -> a
    java.lang.String lineSeparator -> b
    java.lang.String encoding -> c
    boolean omitDeclaration -> d
    boolean omitEncoding -> e
    boolean expandEmptyElements -> f
    boolean ignoreTrAXEscapingPIs -> g
    org.jdom.output.Format$TextMode mode -> h
    org.jdom.output.EscapeStrategy escapeStrategy -> i
    java.lang.Class class$java$lang$String -> j
    org.jdom.output.Format getRawFormat() -> a
    java.lang.Object clone() -> clone
    java.lang.Class class$(java.lang.String) -> a
org.jdom.output.Format$DefaultEscapeStrategy -> org.a.c.c:
    int bits -> c
    java.lang.Object encoder -> a
    java.lang.reflect.Method canEncode -> b
    org.jdom.output.Format this$0 -> d
org.jdom.output.Format$TextMode -> org.a.c.d:
    org.jdom.output.Format$TextMode PRESERVE -> a
    org.jdom.output.Format$TextMode TRIM -> b
    org.jdom.output.Format$TextMode NORMALIZE -> c
    org.jdom.output.Format$TextMode TRIM_FULL_WHITE -> d
    java.lang.String name -> e
    java.lang.String toString() -> toString
org.jdom.output.XMLOutputter -> org.a.c.e:
    org.jdom.output.Format userFormat -> c
    org.jdom.output.Format preserveFormat -> a
    org.jdom.output.Format currentFormat -> b
    boolean escapeOutput -> d
    java.lang.String outputString(org.jdom.DocType) -> a
    java.lang.String outputString(org.jdom.Comment) -> a
    java.lang.String outputString(org.jdom.ProcessingInstruction) -> a
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.simpleframework.xml.Attribute -> org.b.a.a:
    java.lang.String name() -> a
    boolean required() -> b
org.simpleframework.xml.Default -> org.b.a.b:
    org.simpleframework.xml.DefaultType value() -> a
    boolean required() -> b
org.simpleframework.xml.DefaultType -> org.b.a.c:
    org.simpleframework.xml.DefaultType FIELD -> a
    org.simpleframework.xml.DefaultType PROPERTY -> b
    org.simpleframework.xml.DefaultType[] $VALUES -> c
    org.simpleframework.xml.DefaultType[] values() -> values
    org.simpleframework.xml.DefaultType valueOf(java.lang.String) -> valueOf
org.simpleframework.xml.Element -> org.b.a.d:
    java.lang.String name() -> a
    boolean data() -> b
    boolean required() -> c
org.simpleframework.xml.ElementArray -> org.b.a.e:
    java.lang.String name() -> a
    boolean data() -> b
    boolean required() -> c
    boolean empty() -> d
org.simpleframework.xml.ElementList -> org.b.a.f:
    java.lang.String name() -> a
    boolean data() -> b
    boolean required() -> c
    boolean inline() -> d
    boolean empty() -> e
org.simpleframework.xml.ElementMap -> org.b.a.g:
    java.lang.String name() -> a
    java.lang.Class keyType() -> b
    java.lang.Class valueType() -> c
    boolean required() -> d
    boolean data() -> e
    boolean inline() -> f
    boolean empty() -> g
org.simpleframework.xml.Namespace -> org.b.a.h:
    java.lang.String reference() -> a
    java.lang.String prefix() -> b
org.simpleframework.xml.NamespaceList -> org.b.a.i:
    org.simpleframework.xml.Namespace[] value() -> a
org.simpleframework.xml.Order -> org.b.a.j:
    java.lang.String[] elements() -> a
    java.lang.String[] attributes() -> b
org.simpleframework.xml.Root -> org.b.a.k:
    java.lang.String name() -> a
    boolean strict() -> b
org.simpleframework.xml.Serializer -> org.b.a.l:
    java.lang.Object read(java.lang.Class,java.io.File) -> a
    void write(java.lang.Object,java.io.File) -> a
org.simpleframework.xml.Text -> org.b.a.m:
    boolean data() -> a
    boolean required() -> b
org.simpleframework.xml.Transient -> org.b.a.n:
org.simpleframework.xml.Version -> org.b.a.o:
    double revision() -> a
    boolean required() -> b
org.simpleframework.xml.core.AnnotationFactory -> org.b.a.a.a:
    boolean required -> a
    java.lang.annotation.Annotation getInstance(java.lang.Class) -> a
    java.lang.annotation.Annotation getInstance(java.lang.ClassLoader,java.lang.Class) -> a
org.simpleframework.xml.core.AnnotationHandler -> org.b.a.a.b:
    org.simpleframework.xml.core.Comparer comparer -> a
    java.lang.Class type -> b
    boolean required -> c
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    java.lang.String toString() -> toString
    void attributes(java.lang.StringBuilder) -> a
org.simpleframework.xml.core.ArrayFactory -> org.b.a.a.c:
    java.lang.Object getInstance() -> a
    org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Class getComponentType() -> c
org.simpleframework.xml.core.ArrayInstance -> org.b.a.a.d:
    org.simpleframework.xml.strategy.Value value -> a
    java.lang.Class type -> b
    int length -> c
    java.lang.Object getInstance() -> a
    java.lang.Object setInstance(java.lang.Object) -> a
    java.lang.Class getType() -> b
    boolean isReference() -> c
org.simpleframework.xml.core.AttributeException -> org.b.a.a.e:
org.simpleframework.xml.core.AttributeLabel -> org.b.a.a.f:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.core.Signature detail -> b
    org.simpleframework.xml.Attribute label -> c
    java.lang.Class type -> d
    java.lang.String name -> e
    java.lang.String empty -> f
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getEmpty$7830217f() -> m
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.String getName() -> b
    java.lang.String getOverride() -> c
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.Class getType() -> e
    java.lang.String getEntry() -> f
    org.simpleframework.xml.strategy.Type getDependent() -> g
    boolean isAttribute() -> h
    boolean isRequired() -> i
    boolean isCollection() -> j
    boolean isData() -> k
    boolean isInline() -> l
    java.lang.String toString() -> toString
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
org.simpleframework.xml.core.AttributeParameter -> org.b.a.a.g:
    java.lang.reflect.Constructor factory -> a
    org.simpleframework.xml.core.AttributeParameter$Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    java.lang.String name -> d
    java.lang.Class type -> e
    int index -> f
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.AttributeParameter$Contact -> org.b.a.a.h:
    java.lang.String getName() -> a
org.simpleframework.xml.core.Builder -> org.b.a.a.i:
    java.util.List list -> a
    java.lang.reflect.Constructor factory -> b
    org.simpleframework.xml.core.Index index -> c
    boolean isDefault() -> a
    org.simpleframework.xml.core.Parameter getParameter(java.lang.String) -> a
    java.lang.Object getInstance(org.simpleframework.xml.core.Criteria) -> a
    int score(org.simpleframework.xml.core.Criteria) -> b
    java.lang.String toString() -> toString
org.simpleframework.xml.core.CacheLabel -> org.b.a.a.j:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.core.Contact contact -> b
    java.lang.Class type -> c
    java.lang.String entry -> d
    java.lang.String override -> e
    java.lang.String name -> f
    org.simpleframework.xml.core.Label label -> g
    org.simpleframework.xml.strategy.Type depend -> h
    boolean data -> i
    boolean attribute -> j
    boolean required -> k
    boolean collection -> l
    boolean inline -> m
    org.simpleframework.xml.core.Contact getContact() -> d
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.String getEntry() -> f
    java.lang.String getName() -> b
    java.lang.String getOverride() -> c
    java.lang.Class getType() -> e
    boolean isData() -> k
    boolean isInline() -> l
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    java.lang.String toString() -> toString
org.simpleframework.xml.core.Caller -> org.b.a.a.k:
    org.simpleframework.xml.core.Function commit -> a
    org.simpleframework.xml.core.Function validate -> b
    org.simpleframework.xml.core.Function persist -> c
    org.simpleframework.xml.core.Function complete -> d
    org.simpleframework.xml.core.Function replace -> e
    org.simpleframework.xml.core.Function resolve -> f
    org.simpleframework.xml.core.Context context -> g
    java.lang.Object replace(java.lang.Object) -> a
    java.lang.Object resolve(java.lang.Object) -> b
    void commit(java.lang.Object) -> c
    void validate(java.lang.Object) -> d
    void persist(java.lang.Object) -> e
    void complete(java.lang.Object) -> f
org.simpleframework.xml.core.ClassCreator -> org.b.a.a.l:
    java.util.List list -> a
    org.simpleframework.xml.core.Builder primary -> b
    org.simpleframework.xml.core.Index index -> c
    java.lang.Class type -> d
    boolean isDefault() -> a
    java.lang.Object getInstance(org.simpleframework.xml.core.Criteria) -> a
    org.simpleframework.xml.core.Parameter getParameter(java.lang.String) -> a
    java.util.List getParameters() -> b
    java.util.List getBuilders() -> c
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ClassInstance -> org.b.a.a.m:
    org.simpleframework.xml.core.Instantiator creator -> a
    java.lang.Object value -> b
    java.lang.Class type -> c
    java.lang.Object getInstance() -> a
    java.lang.Object setInstance(java.lang.Object) -> a
    java.lang.Class getType() -> b
    boolean isReference() -> c
org.simpleframework.xml.core.ClassScanner -> org.b.a.a.n:
    org.simpleframework.xml.core.NamespaceDecorator decorator -> a
    org.simpleframework.xml.core.ConstructorScanner scanner -> b
    org.simpleframework.xml.Namespace namespace -> c
    org.simpleframework.xml.core.Function commit -> d
    org.simpleframework.xml.core.Function validate -> e
    org.simpleframework.xml.core.Function persist -> f
    org.simpleframework.xml.core.Function complete -> g
    org.simpleframework.xml.core.Function replace -> h
    org.simpleframework.xml.core.Function resolve -> i
    org.simpleframework.xml.Default access -> j
    org.simpleframework.xml.Order order -> k
    org.simpleframework.xml.Root root -> l
    org.simpleframework.xml.core.Creator getCreator() -> a
    org.simpleframework.xml.core.Decorator getDecorator() -> b
    org.simpleframework.xml.Default getDefault() -> c
    org.simpleframework.xml.Order getOrder() -> d
    org.simpleframework.xml.Root getRoot() -> e
    org.simpleframework.xml.core.Function getCommit() -> f
    org.simpleframework.xml.core.Function getValidate() -> g
    org.simpleframework.xml.core.Function getPersist() -> h
    org.simpleframework.xml.core.Function getComplete() -> i
    org.simpleframework.xml.core.Function getReplace() -> j
    org.simpleframework.xml.core.Function getResolve() -> k
    boolean isStrict() -> l
    void scan(java.lang.Class) -> a
    org.simpleframework.xml.core.Function getFunction(java.lang.reflect.Method) -> a
org.simpleframework.xml.core.ClassSchema -> org.b.a.a.o:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.core.LabelMap attributes -> b
    org.simpleframework.xml.core.LabelMap elements -> c
    org.simpleframework.xml.Version revision -> d
    org.simpleframework.xml.core.Creator factory -> e
    org.simpleframework.xml.core.Caller caller -> f
    org.simpleframework.xml.core.Label version -> g
    org.simpleframework.xml.core.Label text -> h
    java.lang.Class type -> i
    boolean primitive -> j
    boolean isPrimitive() -> a
    org.simpleframework.xml.core.Creator getCreator() -> b
    org.simpleframework.xml.core.Label getVersion() -> c
    org.simpleframework.xml.Version getRevision() -> d
    org.simpleframework.xml.core.Caller getCaller() -> e
    org.simpleframework.xml.core.LabelMap getAttributes() -> f
    org.simpleframework.xml.core.LabelMap getElements() -> g
    org.simpleframework.xml.core.Label getText() -> h
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ClassType -> org.b.a.a.p:
    java.lang.Class type -> a
    java.lang.Class getType() -> a_
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    java.lang.String toString() -> toString
org.simpleframework.xml.core.CollectionFactory -> org.b.a.a.q:
    java.lang.Object getInstance() -> a
    org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Class getConversion(java.lang.Class) -> b
org.simpleframework.xml.core.Collector -> org.b.a.a.r:
    org.simpleframework.xml.core.Collector$Registry registry -> a
    org.simpleframework.xml.core.Context context -> b
    org.simpleframework.xml.core.Variable get(java.lang.String) -> a
    org.simpleframework.xml.core.Variable remove(java.lang.String) -> b
    void set(org.simpleframework.xml.core.Label,java.lang.Object) -> a
    void commit(java.lang.Object) -> a
org.simpleframework.xml.core.Collector$Registry -> org.b.a.a.s:
    org.simpleframework.xml.core.Collector this$0 -> a
org.simpleframework.xml.core.Commit -> org.b.a.a.t:
org.simpleframework.xml.core.Comparer -> org.b.a.a.u:
    java.lang.String[] ignore -> a
    boolean equals(java.lang.annotation.Annotation,java.lang.annotation.Annotation) -> a
org.simpleframework.xml.core.Complete -> org.b.a.a.v:
org.simpleframework.xml.core.Composite -> org.b.a.a.w:
    org.simpleframework.xml.core.ObjectFactory factory -> a
    org.simpleframework.xml.core.Primitive primitive -> b
    org.simpleframework.xml.core.Criteria criteria -> c
    org.simpleframework.xml.core.Revision revision -> d
    org.simpleframework.xml.core.Context context -> e
    org.simpleframework.xml.strategy.Type type -> f
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object readResolve(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Caller) -> a
    void read(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Schema) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label) -> a
    void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
    void writeAttribute(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label) -> a
org.simpleframework.xml.core.CompositeArray -> org.b.a.a.x:
    org.simpleframework.xml.core.ArrayFactory factory -> a
    org.simpleframework.xml.core.Traverser root -> b
    java.lang.String parent -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeInlineList -> org.b.a.a.y:
    org.simpleframework.xml.core.CollectionFactory factory -> a
    org.simpleframework.xml.core.Traverser root -> b
    java.lang.String name -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.util.Collection) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeInlineMap -> org.b.a.a.z:
    org.simpleframework.xml.core.MapFactory factory -> a
    org.simpleframework.xml.core.Converter value -> b
    org.simpleframework.xml.core.Converter key -> c
    org.simpleframework.xml.stream.Style style -> d
    org.simpleframework.xml.core.Entry entry -> e
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.util.Map) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeKey -> org.b.a.a.aa:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.core.Traverser root -> b
    org.simpleframework.xml.stream.Style style -> c
    org.simpleframework.xml.core.Entry entry -> d
    org.simpleframework.xml.strategy.Type type -> e
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeList -> org.b.a.a.ab:
    org.simpleframework.xml.core.CollectionFactory factory -> a
    org.simpleframework.xml.core.Traverser root -> b
    java.lang.String name -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object populate(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> b
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeMap -> org.b.a.a.ac:
    org.simpleframework.xml.core.MapFactory factory -> a
    org.simpleframework.xml.core.Converter value -> b
    org.simpleframework.xml.core.Converter key -> c
    org.simpleframework.xml.stream.Style style -> d
    org.simpleframework.xml.core.Entry entry -> e
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object populate(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> b
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.CompositeValue -> org.b.a.a.ad:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.core.Traverser root -> b
    org.simpleframework.xml.stream.Style style -> c
    org.simpleframework.xml.core.Entry entry -> d
    org.simpleframework.xml.strategy.Type type -> e
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.ConstructorCache -> org.b.a.a.ae:
org.simpleframework.xml.core.ConstructorException -> org.b.a.a.af:
org.simpleframework.xml.core.ConstructorScanner -> org.b.a.a.ag:
    java.util.List list -> a
    org.simpleframework.xml.core.Builder primary -> b
    org.simpleframework.xml.core.Index index -> c
    java.lang.Class type -> d
    org.simpleframework.xml.core.Creator getCreator() -> a
    void scan(java.lang.Class) -> a
    org.simpleframework.xml.core.Parameter create(java.lang.reflect.Constructor,java.lang.annotation.Annotation,int) -> a
org.simpleframework.xml.core.Contact -> org.b.a.a.ah:
    java.lang.String getName() -> a
    java.lang.Class getDependent() -> b
    java.lang.Class[] getDependents() -> c
    java.lang.annotation.Annotation getAnnotation() -> d
    void set(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    boolean isReadOnly() -> e
org.simpleframework.xml.core.ContactList -> org.b.a.a.ai:
org.simpleframework.xml.core.ContactMap -> org.b.a.a.aj:
    java.util.Iterator iterator() -> iterator
org.simpleframework.xml.core.Context -> org.b.a.a.ak:
    boolean isStrict() -> a
    org.simpleframework.xml.stream.Style getStyle() -> b
    org.simpleframework.xml.core.Session getSession() -> c
    org.simpleframework.xml.core.Support getSupport() -> d
    boolean isFloat(org.simpleframework.xml.strategy.Type) -> a
    boolean isPrimitive(java.lang.Class) -> a
    boolean isPrimitive(org.simpleframework.xml.strategy.Type) -> b
    org.simpleframework.xml.core.Instance getInstance(java.lang.Class) -> b
    java.lang.String getName(java.lang.Class) -> c
    org.simpleframework.xml.core.Caller getCaller(java.lang.Class) -> d
    org.simpleframework.xml.Version getVersion(java.lang.Class) -> e
    org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class) -> f
    org.simpleframework.xml.core.Schema getSchema(java.lang.Class) -> g
    org.simpleframework.xml.strategy.Value getOverride(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.stream.InputNode) -> a
    boolean setOverride(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.OutputNode) -> a
    java.lang.Object getAttribute(java.lang.Object) -> a
    java.lang.String getProperty(java.lang.String) -> a
org.simpleframework.xml.core.ConversionInstance -> org.b.a.a.al:
    org.simpleframework.xml.core.Context context -> a
    java.lang.Class convert -> b
    org.simpleframework.xml.strategy.Value value -> c
    java.lang.Object getInstance() -> a
    java.lang.Object setInstance(java.lang.Object) -> a
    java.lang.Class getType() -> b
    boolean isReference() -> c
org.simpleframework.xml.core.Converter -> org.b.a.a.am:
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.Creator -> org.b.a.a.an:
    boolean isDefault() -> a
    java.lang.Object getInstance(org.simpleframework.xml.core.Criteria) -> a
    org.simpleframework.xml.core.Parameter getParameter(java.lang.String) -> a
    java.util.List getParameters() -> b
    java.util.List getBuilders() -> c
org.simpleframework.xml.core.Criteria -> org.b.a.a.ao:
    org.simpleframework.xml.core.Variable get(java.lang.String) -> a
    org.simpleframework.xml.core.Variable remove(java.lang.String) -> b
    void set(org.simpleframework.xml.core.Label,java.lang.Object) -> a
    void commit(java.lang.Object) -> a
org.simpleframework.xml.core.Decorator -> org.b.a.a.ap:
    void decorate(org.simpleframework.xml.stream.OutputNode) -> a
    void decorate(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.core.Decorator) -> a
org.simpleframework.xml.core.DefaultStyle -> org.b.a.a.aq:
    java.lang.String getAttribute(java.lang.String) -> a
    java.lang.String getElement(java.lang.String) -> b
org.simpleframework.xml.core.ElementArrayLabel -> org.b.a.a.ar:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.ElementArray label -> b
    org.simpleframework.xml.core.Signature detail -> c
    java.lang.Class type -> d
    java.lang.String entry -> e
    java.lang.String name -> f
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    java.lang.String getEntry() -> f
    java.lang.String getName() -> b
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.Class getType() -> e
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.String getOverride() -> c
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isData() -> k
    boolean isInline() -> l
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ElementArrayParameter -> org.b.a.a.as:
    java.lang.reflect.Constructor factory -> a
    org.simpleframework.xml.core.ElementArrayParameter$Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    java.lang.String name -> d
    java.lang.Class type -> e
    int index -> f
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.ElementArrayParameter$Contact -> org.b.a.a.at:
    java.lang.String getName() -> a
org.simpleframework.xml.core.ElementException -> org.b.a.a.au:
org.simpleframework.xml.core.ElementLabel -> org.b.a.a.av:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.core.Signature detail -> b
    org.simpleframework.xml.Element label -> c
    java.lang.Class type -> d
    java.lang.String name -> e
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    java.lang.String getName() -> b
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.String getOverride() -> c
    java.lang.Class getType() -> e
    java.lang.String getEntry() -> f
    org.simpleframework.xml.strategy.Type getDependent() -> g
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isData() -> k
    boolean isInline() -> l
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ElementListLabel -> org.b.a.a.aw:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.ElementList label -> b
    org.simpleframework.xml.core.Signature detail -> c
    java.lang.Class type -> d
    java.lang.Class item -> e
    java.lang.String entry -> f
    java.lang.String name -> g
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.String getEntry() -> f
    java.lang.String getName() -> b
    java.lang.Class getType() -> e
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.String getOverride() -> c
    boolean isData() -> k
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isInline() -> l
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ElementListParameter -> org.b.a.a.ax:
    java.lang.reflect.Constructor factory -> a
    org.simpleframework.xml.core.ElementListParameter$Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    java.lang.String name -> d
    java.lang.Class type -> e
    int index -> f
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.ElementListParameter$Contact -> org.b.a.a.ay:
    java.lang.String getName() -> a
org.simpleframework.xml.core.ElementMapLabel -> org.b.a.a.az:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.ElementMap label -> b
    org.simpleframework.xml.core.Signature detail -> c
    org.simpleframework.xml.core.Entry entry -> d
    java.lang.Class type -> e
    java.lang.Class[] items -> f
    java.lang.String parent -> g
    java.lang.String name -> h
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.String getEntry() -> f
    java.lang.String getName() -> b
    java.lang.Class getType() -> e
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.String getOverride() -> c
    boolean isData() -> k
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isInline() -> l
    java.lang.String toString() -> toString
org.simpleframework.xml.core.ElementMapParameter -> org.b.a.a.ba:
    java.lang.reflect.Constructor factory -> a
    org.simpleframework.xml.core.ElementMapParameter$Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    java.lang.String name -> d
    java.lang.Class type -> e
    int index -> f
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.ElementMapParameter$Contact -> org.b.a.a.bb:
    java.lang.String getName() -> a
org.simpleframework.xml.core.ElementParameter -> org.b.a.a.bc:
    java.lang.reflect.Constructor factory -> a
    org.simpleframework.xml.core.ElementParameter$Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    java.lang.String name -> d
    java.lang.Class type -> e
    int index -> f
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.annotation.Annotation getAnnotation() -> c
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.ElementParameter$Contact -> org.b.a.a.bd:
    java.lang.String getName() -> a
org.simpleframework.xml.core.EmptyMatcher -> org.b.a.a.be:
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.core.Entry -> org.b.a.a.bf:
    org.simpleframework.xml.ElementMap label -> a
    org.simpleframework.xml.core.Contact contact -> b
    java.lang.Class valueType -> c
    java.lang.Class keyType -> d
    java.lang.String entry -> e
    java.lang.String value -> f
    java.lang.String key -> g
    boolean attribute -> h
    boolean isAttribute() -> a
    boolean isInline() -> b
    org.simpleframework.xml.core.Converter getKey(org.simpleframework.xml.core.Context) -> a
    org.simpleframework.xml.core.Converter getValue(org.simpleframework.xml.core.Context) -> b
    java.lang.Class getDependent(int) -> a
    java.lang.String getKey() -> c
    java.lang.String getValue() -> d
    java.lang.String getEntry() -> e
    boolean isEmpty(java.lang.String) -> a
org.simpleframework.xml.core.Factory -> org.b.a.a.bg:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.core.Support support -> b
    org.simpleframework.xml.strategy.Type type -> c
    java.lang.Class getType() -> b
    java.lang.Object getInstance() -> a
    org.simpleframework.xml.strategy.Value getOverride(org.simpleframework.xml.stream.InputNode) -> b
    boolean setOverride(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.OutputNode) -> a
    boolean isInstantiable(java.lang.Class) -> a
org.simpleframework.xml.core.FieldContact -> org.b.a.a.bh:
    java.lang.annotation.Annotation label -> a
    java.lang.reflect.Field field -> b
    java.lang.String name -> c
    int modifier -> d
    boolean isReadOnly() -> e
    java.lang.Class getType() -> a_
    java.lang.Class getDependent() -> b
    java.lang.Class[] getDependents() -> c
    java.lang.String getName() -> a
    java.lang.annotation.Annotation getAnnotation() -> d
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    void set(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.String toString() -> toString
org.simpleframework.xml.core.FieldScanner -> org.b.a.a.bi:
    org.simpleframework.xml.core.AnnotationFactory factory -> a
    org.simpleframework.xml.core.Hierarchy hierarchy -> b
    org.simpleframework.xml.DefaultType access -> c
    org.simpleframework.xml.core.ContactMap done -> d
    void process(java.lang.reflect.Field,java.lang.annotation.Annotation) -> a
org.simpleframework.xml.core.Function -> org.b.a.a.bj:
    java.lang.reflect.Method method -> a
    boolean contextual -> b
    java.lang.Object call(org.simpleframework.xml.core.Context,java.lang.Object) -> a
org.simpleframework.xml.core.GetPart -> org.b.a.a.bk:
    java.lang.annotation.Annotation label -> a
    org.simpleframework.xml.core.MethodType type -> b
    java.lang.reflect.Method method -> c
    java.lang.String name -> d
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.Class getDependent() -> c
    java.lang.Class[] getDependents() -> d
    java.lang.annotation.Annotation getAnnotation() -> e
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    org.simpleframework.xml.core.MethodType getMethodType() -> f
    java.lang.reflect.Method getMethod() -> g
    java.lang.String toString() -> toString
org.simpleframework.xml.core.Hierarchy -> org.b.a.a.bl:
    void scan(java.lang.Class) -> a
org.simpleframework.xml.core.Index -> org.b.a.a.bm:
    java.lang.Class type -> a
    java.util.List getParameters() -> a
    java.lang.Class getType() -> b
org.simpleframework.xml.core.Instance -> org.b.a.a.bn:
    java.lang.Object getInstance() -> a
    java.lang.Object setInstance(java.lang.Object) -> a
    boolean isReference() -> c
    java.lang.Class getType() -> b
org.simpleframework.xml.core.InstantiationException -> org.b.a.a.bo:
org.simpleframework.xml.core.Instantiator -> org.b.a.a.bp:
    org.simpleframework.xml.core.ConstructorCache cache -> a
    java.lang.Object getObject(java.lang.Class) -> a
org.simpleframework.xml.core.Label -> org.b.a.a.bq:
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.String getName() -> b
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.String getEntry() -> f
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.Class getType() -> e
    java.lang.String getOverride() -> c
    boolean isData() -> k
    boolean isRequired() -> i
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isInline() -> l
org.simpleframework.xml.core.LabelFactory -> org.b.a.a.br:
    org.simpleframework.xml.core.Label getInstance(org.simpleframework.xml.core.Contact,java.lang.annotation.Annotation) -> a
org.simpleframework.xml.core.LabelFactory$Entry -> org.b.a.a.bs:
    java.lang.Class argument -> a
    java.lang.Class label -> b
org.simpleframework.xml.core.LabelMap -> org.b.a.a.bt:
    org.simpleframework.xml.core.Scanner source -> a
    java.util.Iterator iterator() -> iterator
    org.simpleframework.xml.core.Label take(java.lang.String) -> a
    org.simpleframework.xml.core.LabelMap clone(org.simpleframework.xml.core.Context) -> a
    boolean isStrict(org.simpleframework.xml.core.Context) -> b
org.simpleframework.xml.core.MapFactory -> org.b.a.a.bu:
    java.lang.Object getInstance() -> a
    org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Class getConversion(java.lang.Class) -> b
org.simpleframework.xml.core.MethodContact -> org.b.a.a.bv:
    java.lang.annotation.Annotation label -> a
    org.simpleframework.xml.core.MethodPart set -> b
    java.lang.Class[] items -> c
    java.lang.Class item -> d
    java.lang.Class type -> e
    java.lang.reflect.Method get -> f
    java.lang.String name -> g
    boolean isReadOnly() -> e
    java.lang.annotation.Annotation getAnnotation() -> d
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    java.lang.Class getType() -> a_
    java.lang.Class getDependent() -> b
    java.lang.Class[] getDependents() -> c
    java.lang.String getName() -> a
    void set(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.String toString() -> toString
org.simpleframework.xml.core.MethodException -> org.b.a.a.bw:
org.simpleframework.xml.core.MethodName -> org.b.a.a.bx:
    org.simpleframework.xml.core.MethodType type -> a
    java.lang.reflect.Method method -> b
    java.lang.String name -> c
    java.lang.String getName() -> a
    org.simpleframework.xml.core.MethodType getType() -> b
    java.lang.reflect.Method getMethod() -> c
org.simpleframework.xml.core.MethodPart -> org.b.a.a.by:
    java.lang.String getName() -> a
    java.lang.annotation.Annotation getAnnotation() -> e
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    java.lang.Class getType() -> b
    java.lang.Class getDependent() -> c
    java.lang.Class[] getDependents() -> d
    java.lang.reflect.Method getMethod() -> g
    org.simpleframework.xml.core.MethodType getMethodType() -> f
org.simpleframework.xml.core.MethodPartFactory -> org.b.a.a.bz:
    org.simpleframework.xml.core.AnnotationFactory factory -> a
    org.simpleframework.xml.core.MethodPart getInstance(java.lang.reflect.Method) -> a
    org.simpleframework.xml.core.MethodPart getInstance(java.lang.reflect.Method,java.lang.annotation.Annotation) -> a
    org.simpleframework.xml.core.MethodType getMethodType(java.lang.reflect.Method) -> c
    java.lang.Class getType(java.lang.reflect.Method) -> b
    java.lang.Class getReturnType(java.lang.reflect.Method) -> d
    org.simpleframework.xml.core.MethodName getRead(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType) -> a
    java.lang.String getTypeName(java.lang.String,org.simpleframework.xml.core.MethodType) -> a
org.simpleframework.xml.core.MethodScanner -> org.b.a.a.ca:
    org.simpleframework.xml.core.MethodPartFactory factory -> a
    org.simpleframework.xml.core.Hierarchy hierarchy -> b
    org.simpleframework.xml.DefaultType access -> c
    org.simpleframework.xml.core.MethodScanner$PartMap write -> d
    org.simpleframework.xml.core.MethodScanner$PartMap read -> e
    java.lang.Class type -> f
    void process(java.lang.reflect.Method,java.lang.annotation.Annotation) -> a
    void process(org.simpleframework.xml.core.MethodPart,org.simpleframework.xml.core.MethodScanner$PartMap) -> a
    void remove(org.simpleframework.xml.core.MethodPart,org.simpleframework.xml.core.MethodScanner$PartMap) -> b
org.simpleframework.xml.core.MethodScanner$PartMap -> org.b.a.a.cb:
    org.simpleframework.xml.core.MethodScanner this$0 -> a
    java.util.Iterator iterator() -> iterator
    org.simpleframework.xml.core.MethodPart take(java.lang.String) -> a
org.simpleframework.xml.core.MethodType -> org.b.a.a.cc:
    org.simpleframework.xml.core.MethodType GET -> a
    org.simpleframework.xml.core.MethodType IS -> b
    org.simpleframework.xml.core.MethodType SET -> c
    org.simpleframework.xml.core.MethodType NONE -> d
    int prefix -> e
    org.simpleframework.xml.core.MethodType[] $VALUES -> f
    org.simpleframework.xml.core.MethodType[] values() -> values
    org.simpleframework.xml.core.MethodType valueOf(java.lang.String) -> valueOf
    int getPrefix() -> a
org.simpleframework.xml.core.NamespaceDecorator -> org.b.a.a.cd:
    java.util.List scope -> a
    org.simpleframework.xml.Namespace primary -> b
    void set(org.simpleframework.xml.Namespace) -> a
    void add(org.simpleframework.xml.Namespace) -> b
    void decorate(org.simpleframework.xml.stream.OutputNode) -> a
    void decorate(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.core.Decorator) -> a
org.simpleframework.xml.core.ObjectFactory -> org.b.a.a.ce:
    org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode) -> a
org.simpleframework.xml.core.ObjectInstance -> org.b.a.a.cf:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.strategy.Value value -> b
    java.lang.Class type -> c
    java.lang.Object getInstance() -> a
    java.lang.Object setInstance(java.lang.Object) -> a
    boolean isReference() -> c
    java.lang.Class getType() -> b
org.simpleframework.xml.core.Parameter -> org.b.a.a.cg:
    java.lang.String getName() -> a
    java.lang.annotation.Annotation getAnnotation() -> c
    java.lang.Class getType() -> b
    boolean isRequired() -> d
    boolean isPrimitive() -> e
org.simpleframework.xml.core.ParameterContact -> org.b.a.a.ch:
    java.lang.reflect.Constructor factory -> a
    int index -> b
    java.lang.annotation.Annotation label -> c
    java.lang.annotation.Annotation getAnnotation() -> d
    java.lang.Class getType() -> a_
    java.lang.Class getDependent() -> b
    java.lang.Class[] getDependents() -> c
    java.lang.Object get(java.lang.Object) -> a
    void set(java.lang.Object,java.lang.Object) -> a
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    boolean isReadOnly() -> e
org.simpleframework.xml.core.ParameterFactory -> org.b.a.a.ci:
org.simpleframework.xml.core.ParameterFactory$Entry -> org.b.a.a.cj:
    java.lang.Class create -> a
    java.lang.Class type -> b
org.simpleframework.xml.core.Persist -> org.b.a.a.ck:
org.simpleframework.xml.core.PersistenceException -> org.b.a.a.cl:
org.simpleframework.xml.core.Persister -> org.b.a.a.cm:
    org.simpleframework.xml.strategy.Strategy strategy -> a
    org.simpleframework.xml.core.Support support -> b
    org.simpleframework.xml.stream.Format format -> c
    org.simpleframework.xml.stream.Style style -> d
    java.lang.Object read(java.lang.Class,java.io.File) -> a
    java.lang.Object read$3f410b03(java.lang.Class,java.io.File) -> b
    void write(java.lang.Object,java.io.File) -> a
org.simpleframework.xml.core.Primitive -> org.b.a.a.cn:
    org.simpleframework.xml.core.PrimitiveFactory factory -> a
    org.simpleframework.xml.core.Context context -> b
    java.lang.String empty -> c
    java.lang.Class type -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveArray -> org.b.a.a.co:
    org.simpleframework.xml.core.ArrayFactory factory -> a
    org.simpleframework.xml.core.Primitive root -> b
    java.lang.String parent -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveFactory -> org.b.a.a.cp:
    org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object getInstance(java.lang.String,java.lang.Class) -> a
    java.lang.String getText(java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveInlineList -> org.b.a.a.cq:
    org.simpleframework.xml.core.CollectionFactory factory -> a
    org.simpleframework.xml.core.Primitive root -> b
    java.lang.String parent -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.util.Collection) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveKey -> org.b.a.a.cr:
    org.simpleframework.xml.core.PrimitiveFactory factory -> a
    org.simpleframework.xml.core.Context context -> b
    org.simpleframework.xml.core.Primitive root -> c
    org.simpleframework.xml.stream.Style style -> d
    org.simpleframework.xml.core.Entry entry -> e
    org.simpleframework.xml.strategy.Type type -> f
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveList -> org.b.a.a.cs:
    org.simpleframework.xml.core.CollectionFactory factory -> a
    org.simpleframework.xml.core.Primitive root -> b
    java.lang.String parent -> c
    org.simpleframework.xml.strategy.Type entry -> d
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    java.lang.Object populate(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> b
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.PrimitiveValue -> org.b.a.a.ct:
    org.simpleframework.xml.core.PrimitiveFactory factory -> a
    org.simpleframework.xml.core.Context context -> b
    org.simpleframework.xml.core.Primitive root -> c
    org.simpleframework.xml.stream.Style style -> d
    org.simpleframework.xml.core.Entry entry -> e
    org.simpleframework.xml.strategy.Type type -> f
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.Reflector -> org.b.a.a.cu:
    java.lang.Class getDependent(java.lang.reflect.Field) -> a
    java.lang.Class[] getDependents(java.lang.reflect.Field) -> b
    java.lang.reflect.ParameterizedType getType(java.lang.reflect.Field) -> c
    java.lang.Class getReturnDependent(java.lang.reflect.Method) -> a
    java.lang.Class[] getReturnDependents(java.lang.reflect.Method) -> b
    java.lang.reflect.ParameterizedType getReturnType(java.lang.reflect.Method) -> e
    java.lang.Class getParameterDependent$15f6570d(java.lang.reflect.Method) -> c
    java.lang.Class[] getParameterDependents$63c17fe8(java.lang.reflect.Method) -> d
    java.lang.Class getParameterDependent(java.lang.reflect.Constructor,int) -> a
    java.lang.Class[] getParameterDependents(java.lang.reflect.Constructor,int) -> b
    java.lang.reflect.ParameterizedType getParameterType$799816ca(java.lang.reflect.Method) -> f
    java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Constructor,int) -> c
    java.lang.Class getClass(java.lang.reflect.ParameterizedType) -> a
    java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType) -> b
    java.lang.Class getClass(java.lang.reflect.Type) -> a
    java.lang.String getName(java.lang.String) -> a
org.simpleframework.xml.core.Repeater -> org.b.a.a.cv:
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
org.simpleframework.xml.core.Replace -> org.b.a.a.cw:
org.simpleframework.xml.core.Resolve -> org.b.a.a.cx:
org.simpleframework.xml.core.Revision -> org.b.a.a.cy:
    boolean equal -> a
    boolean compare(java.lang.Object,java.lang.Object) -> a
    boolean isEqual() -> a
org.simpleframework.xml.core.RootException -> org.b.a.a.cz:
org.simpleframework.xml.core.Scanner -> org.b.a.a.da:
    org.simpleframework.xml.core.ClassScanner scanner -> a
    org.simpleframework.xml.DefaultType access -> b
    org.simpleframework.xml.core.LabelMap attributes -> c
    org.simpleframework.xml.core.LabelMap elements -> d
    org.simpleframework.xml.core.Comparer comparer -> e
    org.simpleframework.xml.core.Label version -> f
    org.simpleframework.xml.core.Label text -> g
    java.lang.String name -> h
    java.lang.Class type -> i
    boolean primitive -> j
    boolean required -> k
    java.lang.Class getType() -> a
    org.simpleframework.xml.core.Creator getCreator() -> b
    org.simpleframework.xml.core.Decorator getDecorator() -> c
    org.simpleframework.xml.core.Caller getCaller(org.simpleframework.xml.core.Context) -> a
    org.simpleframework.xml.core.LabelMap getAttributes(org.simpleframework.xml.core.Context) -> b
    org.simpleframework.xml.core.LabelMap getElements(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.Version getRevision() -> d
    org.simpleframework.xml.core.Label getVersion() -> e
    org.simpleframework.xml.core.Label getText() -> f
    java.lang.String getName() -> g
    org.simpleframework.xml.core.Function getCommit() -> h
    org.simpleframework.xml.core.Function getValidate() -> i
    org.simpleframework.xml.core.Function getPersist() -> j
    org.simpleframework.xml.core.Function getComplete() -> k
    org.simpleframework.xml.core.Function getReplace() -> l
    org.simpleframework.xml.core.Function getResolve() -> m
    boolean isPrimitive() -> n
    boolean isStrict() -> o
    void validateElements(java.lang.Class,org.simpleframework.xml.Order) -> a
    void validateAttributes(java.lang.Class,org.simpleframework.xml.Order) -> b
    void validateConstructor(org.simpleframework.xml.core.Builder,org.simpleframework.xml.core.LabelMap) -> a
    void validateParameters(org.simpleframework.xml.core.Creator) -> a
    void order$1b2d8b98() -> p
    void field(java.lang.Class) -> a
    void method(java.lang.Class) -> b
    void scan(org.simpleframework.xml.core.Contact,java.lang.annotation.Annotation) -> a
    void process(org.simpleframework.xml.core.Contact,java.lang.annotation.Annotation,org.simpleframework.xml.core.LabelMap) -> a
org.simpleframework.xml.core.ScannerCache -> org.b.a.a.db:
org.simpleframework.xml.core.ScannerFactory -> org.b.a.a.dc:
    org.simpleframework.xml.core.ScannerCache cache -> a
    org.simpleframework.xml.core.Scanner getInstance(java.lang.Class) -> a
org.simpleframework.xml.core.Schema -> org.b.a.a.dd:
    boolean isPrimitive() -> a
    org.simpleframework.xml.core.Creator getCreator() -> b
    org.simpleframework.xml.core.Label getVersion() -> c
    org.simpleframework.xml.Version getRevision() -> d
    org.simpleframework.xml.core.Caller getCaller() -> e
    org.simpleframework.xml.core.LabelMap getAttributes() -> f
    org.simpleframework.xml.core.LabelMap getElements() -> g
    org.simpleframework.xml.core.Label getText() -> h
org.simpleframework.xml.core.Session -> org.b.a.a.de:
    java.util.Map map -> a
    java.util.Map getMap() -> a
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void putAll(java.util.Map) -> putAll
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    void clear() -> clear
org.simpleframework.xml.core.SetPart -> org.b.a.a.df:
    java.lang.annotation.Annotation label -> a
    org.simpleframework.xml.core.MethodType type -> b
    java.lang.reflect.Method method -> c
    java.lang.String name -> d
    java.lang.String getName() -> a
    java.lang.Class getType() -> b
    java.lang.Class getDependent() -> c
    java.lang.Class[] getDependents() -> d
    java.lang.annotation.Annotation getAnnotation() -> e
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
    org.simpleframework.xml.core.MethodType getMethodType() -> f
    java.lang.reflect.Method getMethod() -> g
    java.lang.String toString() -> toString
org.simpleframework.xml.core.Signature -> org.b.a.a.dg:
    java.lang.annotation.Annotation marker -> a
    org.simpleframework.xml.core.Contact contact -> b
    org.simpleframework.xml.core.Label label -> c
    org.simpleframework.xml.core.Contact getContact() -> a
    java.lang.String getEntry() -> b
    java.lang.String getName() -> c
    boolean isEmpty(java.lang.String) -> a
    java.lang.String toString() -> toString
org.simpleframework.xml.core.Source -> org.b.a.a.dh:
    org.simpleframework.xml.core.TemplateEngine engine -> a
    org.simpleframework.xml.strategy.Strategy strategy -> b
    org.simpleframework.xml.core.Support support -> c
    org.simpleframework.xml.core.Session session -> d
    org.simpleframework.xml.filter.Filter filter -> e
    org.simpleframework.xml.stream.Style style -> f
    boolean strict -> g
    boolean isStrict() -> a
    org.simpleframework.xml.core.Session getSession() -> c
    org.simpleframework.xml.core.Support getSupport() -> d
    org.simpleframework.xml.stream.Style getStyle() -> b
    boolean isFloat(org.simpleframework.xml.strategy.Type) -> a
    boolean isPrimitive(java.lang.Class) -> a
    boolean isPrimitive(org.simpleframework.xml.strategy.Type) -> b
    org.simpleframework.xml.core.Instance getInstance(java.lang.Class) -> b
    java.lang.String getName(java.lang.Class) -> c
    org.simpleframework.xml.Version getVersion(java.lang.Class) -> e
    org.simpleframework.xml.core.Scanner getScanner(java.lang.Class) -> h
    org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class) -> f
    org.simpleframework.xml.core.Caller getCaller(java.lang.Class) -> d
    org.simpleframework.xml.core.Schema getSchema(java.lang.Class) -> g
    java.lang.Object getAttribute(java.lang.Object) -> a
    org.simpleframework.xml.strategy.Value getOverride(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.stream.InputNode) -> a
    boolean setOverride(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.OutputNode) -> a
    java.lang.String getProperty(java.lang.String) -> a
org.simpleframework.xml.core.Support -> org.b.a.a.di:
    org.simpleframework.xml.core.ScannerFactory factory -> a
    org.simpleframework.xml.core.Instantiator creator -> b
    org.simpleframework.xml.transform.Transformer transform -> c
    org.simpleframework.xml.transform.Matcher matcher -> d
    org.simpleframework.xml.filter.Filter filter -> e
    java.lang.String replace(java.lang.String) -> a
    org.simpleframework.xml.core.Instance getInstance(java.lang.Class) -> a
    org.simpleframework.xml.core.Scanner getScanner(java.lang.Class) -> b
    java.lang.Object read(java.lang.String,java.lang.Class) -> a
    java.lang.String write(java.lang.Object,java.lang.Class) -> a
    boolean isPrimitive(java.lang.Class) -> c
org.simpleframework.xml.core.Template -> org.b.a.a.dj:
    java.lang.String cache -> a
    char[] buf -> b
    int count -> c
    void append(char) -> a
    void append(java.lang.String) -> a
    void append(org.simpleframework.xml.core.Template) -> a
    void ensureCapacity(int) -> a
    void clear() -> a
    int length() -> b
    java.lang.String toString() -> toString
org.simpleframework.xml.core.TemplateEngine -> org.b.a.a.dk:
    org.simpleframework.xml.core.Template source -> a
    org.simpleframework.xml.core.Template name -> b
    org.simpleframework.xml.core.Template text -> c
    org.simpleframework.xml.filter.Filter filter -> d
    int off -> e
    java.lang.String process(java.lang.String) -> a
    void clear() -> a
org.simpleframework.xml.core.TemplateFilter -> org.b.a.a.dl:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.filter.Filter filter -> b
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.core.TextException -> org.b.a.a.dm:
org.simpleframework.xml.core.TextLabel -> org.b.a.a.dn:
    org.simpleframework.xml.core.Signature detail -> a
    org.simpleframework.xml.core.Contact contact -> b
    org.simpleframework.xml.Text label -> c
    java.lang.Class type -> d
    java.lang.String empty -> e
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.String getEmpty$7830217f() -> m
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.String getName() -> b
    java.lang.String getOverride() -> c
    java.lang.Class getType() -> e
    java.lang.String getEntry() -> f
    org.simpleframework.xml.strategy.Type getDependent() -> g
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isData() -> k
    boolean isInline() -> l
    java.lang.String toString() -> toString
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
org.simpleframework.xml.core.Traverser -> org.b.a.a.do:
    org.simpleframework.xml.core.Context context -> a
    org.simpleframework.xml.stream.Style style -> b
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,java.lang.Class) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,java.lang.Class,java.lang.String) -> a
    org.simpleframework.xml.core.Composite getComposite(java.lang.Class) -> a
    org.simpleframework.xml.strategy.Type getType(java.lang.Class) -> b
    java.lang.String getName(java.lang.Class) -> c
org.simpleframework.xml.core.Validate -> org.b.a.a.dp:
org.simpleframework.xml.core.ValueRequiredException -> org.b.a.a.dq:
org.simpleframework.xml.core.Variable -> org.b.a.a.dr:
    java.lang.Object value -> a
    org.simpleframework.xml.core.Label label -> b
    java.lang.Object getValue() -> m
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
    org.simpleframework.xml.core.Contact getContact() -> d
    org.simpleframework.xml.strategy.Type getDependent() -> g
    java.lang.String getEntry() -> f
    java.lang.String getName() -> b
    java.lang.String getOverride() -> c
    java.lang.Class getType() -> e
    boolean isData() -> k
    boolean isInline() -> l
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    java.lang.String toString() -> toString
org.simpleframework.xml.core.Variable$Adapter -> org.b.a.a.ds:
    org.simpleframework.xml.core.Converter reader -> b
    java.lang.Object value -> c
    org.simpleframework.xml.core.Variable this$0 -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode) -> a
    java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object) -> a
    void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object) -> a
org.simpleframework.xml.core.VersionLabel -> org.b.a.a.dt:
    org.simpleframework.xml.core.Decorator decorator -> a
    org.simpleframework.xml.core.Signature detail -> b
    org.simpleframework.xml.Version label -> c
    java.lang.Class type -> d
    java.lang.String name -> e
    org.simpleframework.xml.core.Decorator getDecorator() -> a
    org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) -> a
    java.lang.String getName(org.simpleframework.xml.core.Context) -> b
    java.lang.String getName() -> b
    java.lang.String getOverride() -> c
    org.simpleframework.xml.core.Contact getContact() -> d
    java.lang.Class getType() -> e
    java.lang.String getEntry() -> f
    org.simpleframework.xml.strategy.Type getDependent() -> g
    boolean isAttribute() -> h
    boolean isCollection() -> j
    boolean isRequired() -> i
    boolean isData() -> k
    boolean isInline() -> l
    java.lang.String toString() -> toString
    java.lang.Object getEmpty(org.simpleframework.xml.core.Context) -> c
org.simpleframework.xml.filter.EnvironmentFilter -> org.b.a.b.a:
    org.simpleframework.xml.filter.Filter filter -> a
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.filter.Filter -> org.b.a.b.b:
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.filter.MapFilter -> org.b.a.b.c:
    org.simpleframework.xml.filter.Filter filter -> a
    java.util.Map map -> b
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.filter.PlatformFilter -> org.b.a.b.d:
org.simpleframework.xml.filter.StackFilter -> org.b.a.b.e:
    java.util.Stack stack -> a
    void push(org.simpleframework.xml.filter.Filter) -> a
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.filter.SystemFilter -> org.b.a.b.f:
    org.simpleframework.xml.filter.Filter filter -> a
    java.lang.String replace(java.lang.String) -> a
org.simpleframework.xml.strategy.ArrayValue -> org.b.a.c.a:
    java.lang.Object value -> a
    java.lang.Class type -> b
    int size -> c
    void setValue(java.lang.Object) -> a
    java.lang.Class getType() -> a
    int getLength() -> b
org.simpleframework.xml.strategy.Loader -> org.b.a.c.b:
    java.lang.Class load(java.lang.String) -> a
org.simpleframework.xml.strategy.ObjectValue -> org.b.a.c.c:
    java.lang.Object value -> a
    java.lang.Class type -> b
    void setValue(java.lang.Object) -> a
    java.lang.Class getType() -> a
    int getLength() -> b
org.simpleframework.xml.strategy.Strategy -> org.b.a.c.d:
    org.simpleframework.xml.strategy.Value read$2fd2dde1(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.stream.NodeMap) -> a
    boolean write$2c0157f3(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.NodeMap) -> a
org.simpleframework.xml.strategy.TreeStrategy -> org.b.a.c.e:
    org.simpleframework.xml.strategy.Loader loader -> a
    java.lang.String length -> b
    java.lang.String label -> c
    org.simpleframework.xml.strategy.Value read$2fd2dde1(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.stream.NodeMap) -> a
    boolean write$2c0157f3(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.NodeMap) -> a
org.simpleframework.xml.strategy.Type -> org.b.a.c.f:
    java.lang.Class getType() -> a_
    java.lang.annotation.Annotation getAnnotation(java.lang.Class) -> a
org.simpleframework.xml.strategy.Value -> org.b.a.c.g:
    void setValue(java.lang.Object) -> a
    java.lang.Class getType() -> a
    int getLength() -> b
org.simpleframework.xml.stream.Attribute -> org.b.a.d.a:
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    java.lang.String getReference() -> c
    java.lang.String getPrefix() -> d
    java.lang.Object getSource() -> e
    boolean isReserved() -> f
org.simpleframework.xml.stream.DocumentProvider -> org.b.a.d.b:
    javax.xml.parsers.DocumentBuilderFactory factory -> a
    org.simpleframework.xml.stream.EventReader provide(java.io.InputStream) -> a
org.simpleframework.xml.stream.DocumentReader -> org.b.a.d.c:
    org.simpleframework.xml.stream.NodeExtractor queue -> a
    org.simpleframework.xml.stream.NodeStack stack -> b
    org.simpleframework.xml.stream.EventNode peek -> c
    org.simpleframework.xml.stream.EventNode peek() -> a
    org.simpleframework.xml.stream.EventNode next() -> b
    org.simpleframework.xml.stream.DocumentReader$End end() -> c
org.simpleframework.xml.stream.DocumentReader$End -> org.b.a.d.d:
    boolean isEnd() -> a
org.simpleframework.xml.stream.DocumentReader$Entry -> org.b.a.d.e:
    org.w3c.dom.Node node -> a
    java.lang.String getName() -> a
    java.lang.String getValue() -> b
    java.lang.String getPrefix() -> d
    java.lang.String getReference() -> c
    boolean isReserved() -> f
    java.lang.Object getSource() -> e
org.simpleframework.xml.stream.DocumentReader$Start -> org.b.a.d.f:
    org.w3c.dom.Element element -> a
    java.lang.String getName() -> b
    org.w3c.dom.NamedNodeMap getAttributes() -> c
org.simpleframework.xml.stream.DocumentReader$Text -> org.b.a.d.g:
    org.w3c.dom.Node node -> a
    boolean isText() -> b_
    java.lang.String getValue() -> d
org.simpleframework.xml.stream.EventAttribute -> org.b.a.d.h:
    java.lang.String getPrefix() -> d
    java.lang.String getReference() -> c
    java.lang.Object getSource() -> e
    boolean isReserved() -> f
org.simpleframework.xml.stream.EventElement -> org.b.a.d.i:
    int getLine() -> e
    java.lang.String getValue() -> d
    boolean isEnd() -> a
    boolean isStart() -> f
    boolean isText() -> b_
org.simpleframework.xml.stream.EventNode -> org.b.a.d.j:
    int getLine() -> e
    java.lang.String getName() -> b
    java.lang.String getValue() -> d
    boolean isEnd() -> a
    boolean isStart() -> f
    boolean isText() -> b_
org.simpleframework.xml.stream.EventReader -> org.b.a.d.k:
    org.simpleframework.xml.stream.EventNode next() -> b
    org.simpleframework.xml.stream.EventNode peek() -> a
org.simpleframework.xml.stream.EventToken -> org.b.a.d.l:
    int getLine() -> e
    java.lang.String getName() -> b
    java.lang.String getValue() -> d
    java.util.Iterator iterator() -> iterator
    boolean isEnd() -> a
    boolean isStart() -> f
    boolean isText() -> b_
org.simpleframework.xml.stream.Format -> org.b.a.d.m:
    java.lang.String prolog -> a
    org.simpleframework.xml.stream.Style style -> b
    int indent -> c
    int getIndent() -> a
    java.lang.String getProlog() -> b
    org.simpleframework.xml.stream.Style getStyle() -> c
org.simpleframework.xml.stream.Formatter -> org.b.a.d.n:
    char[] NAMESPACE -> a
    char[] LESS -> b
    char[] GREATER -> c
    char[] DOUBLE -> d
    char[] SINGLE -> e
    char[] AND -> f
    char[] OPEN -> g
    char[] CLOSE -> h
    org.simpleframework.xml.stream.OutputBuffer buffer -> i
    org.simpleframework.xml.stream.Indenter indenter -> j
    java.io.Writer result -> k
    java.lang.String prolog -> l
    org.simpleframework.xml.stream.Formatter$Tag last -> m
    void writeProlog() -> a
    void writeComment(java.lang.String) -> a
    void writeStart(java.lang.String,java.lang.String) -> a
    void writeAttribute(java.lang.String,java.lang.String,java.lang.String) -> a
    void writeNamespace(java.lang.String,java.lang.String) -> b
    void writeText(java.lang.String,org.simpleframework.xml.stream.Mode) -> a
    void writeEnd(java.lang.String,java.lang.String) -> c
    void write(char) -> a
    void write(char[]) -> a
    void write(java.lang.String) -> b
    void write(java.lang.String,java.lang.String) -> d
    void append(char) -> b
    void append(char[]) -> b
    void append(java.lang.String) -> c
    void escape(java.lang.String) -> d
    void flush() -> b
    boolean isEmpty(java.lang.String) -> e
org.simpleframework.xml.stream.Formatter$Tag -> org.b.a.d.o:
    org.simpleframework.xml.stream.Formatter$Tag COMMENT -> a
    org.simpleframework.xml.stream.Formatter$Tag START -> b
    org.simpleframework.xml.stream.Formatter$Tag TEXT -> c
    org.simpleframework.xml.stream.Formatter$Tag END -> d
    org.simpleframework.xml.stream.Formatter$Tag[] $VALUES -> e
    org.simpleframework.xml.stream.Formatter$Tag[] values() -> values
    org.simpleframework.xml.stream.Formatter$Tag valueOf(java.lang.String) -> valueOf
org.simpleframework.xml.stream.Indenter -> org.b.a.d.p:
    org.simpleframework.xml.stream.Indenter$Cache cache -> a
    int indent -> b
    int count -> c
    int index -> d
    java.lang.String top() -> a
    java.lang.String push() -> b
    java.lang.String pop() -> c
    java.lang.String indent(int) -> a
org.simpleframework.xml.stream.Indenter$Cache -> org.b.a.d.q:
    java.lang.String[] list -> b
    int count -> c
    org.simpleframework.xml.stream.Indenter this$0 -> a
    int size() -> a
    void set(int,java.lang.String) -> a
    java.lang.String get(int) -> a
org.simpleframework.xml.stream.InputAttribute -> org.b.a.d.r:
    org.simpleframework.xml.stream.InputNode parent -> a
    java.lang.String reference -> b
    java.lang.String prefix -> c
    java.lang.String name -> d
    java.lang.String value -> e
    java.lang.Object source -> f
    org.simpleframework.xml.stream.InputNode getParent() -> a
    org.simpleframework.xml.stream.Position getPosition() -> b
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    boolean isElement() -> e
    org.simpleframework.xml.stream.InputNode getAttribute(java.lang.String) -> a
    org.simpleframework.xml.stream.NodeMap getAttributes() -> f
    org.simpleframework.xml.stream.InputNode getNext() -> g
    org.simpleframework.xml.stream.InputNode getNext(java.lang.String) -> b
    void skip() -> h
    boolean isEmpty() -> i
    java.lang.String toString() -> toString
org.simpleframework.xml.stream.InputElement -> org.b.a.d.s:
    org.simpleframework.xml.stream.InputNodeMap map -> a
    org.simpleframework.xml.stream.NodeReader reader -> b
    org.simpleframework.xml.stream.InputNode parent -> c
    org.simpleframework.xml.stream.EventNode node -> d
    org.simpleframework.xml.stream.InputNode getParent() -> a
    org.simpleframework.xml.stream.Position getPosition() -> b
    java.lang.String getName() -> c
    boolean isElement() -> e
    org.simpleframework.xml.stream.InputNode getAttribute(java.lang.String) -> a
    org.simpleframework.xml.stream.NodeMap getAttributes() -> f
    java.lang.String getValue() -> d
    org.simpleframework.xml.stream.InputNode getNext() -> g
    org.simpleframework.xml.stream.InputNode getNext(java.lang.String) -> b
    void skip() -> h
    boolean isEmpty() -> i
    java.lang.String toString() -> toString
org.simpleframework.xml.stream.InputNode -> org.b.a.d.t:
    boolean isElement() -> e
    org.simpleframework.xml.stream.Position getPosition() -> b
    org.simpleframework.xml.stream.InputNode getAttribute(java.lang.String) -> a
    org.simpleframework.xml.stream.NodeMap getAttributes() -> f
    org.simpleframework.xml.stream.InputNode getParent() -> a
    org.simpleframework.xml.stream.InputNode getNext() -> g
    org.simpleframework.xml.stream.InputNode getNext(java.lang.String) -> b
    void skip() -> h
    boolean isEmpty() -> i
org.simpleframework.xml.stream.InputNodeMap -> org.b.a.d.u:
    org.simpleframework.xml.stream.InputNode source -> a
    void build(org.simpleframework.xml.stream.EventNode) -> a
    org.simpleframework.xml.stream.InputNode get(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String) -> a
    org.simpleframework.xml.stream.Node remove(java.lang.String) -> b
    org.simpleframework.xml.stream.Node get(java.lang.String) -> c
org.simpleframework.xml.stream.InputPosition -> org.b.a.d.v:
    org.simpleframework.xml.stream.EventNode source -> a
    java.lang.String toString() -> toString
org.simpleframework.xml.stream.InputStack -> org.b.a.d.w:
    boolean isRelevant(org.simpleframework.xml.stream.InputNode) -> a
org.simpleframework.xml.stream.Mode -> org.b.a.d.x:
    org.simpleframework.xml.stream.Mode DATA -> a
    org.simpleframework.xml.stream.Mode ESCAPE -> b
    org.simpleframework.xml.stream.Mode INHERIT -> c
    org.simpleframework.xml.stream.Mode[] $VALUES -> d
    org.simpleframework.xml.stream.Mode[] values() -> values
    org.simpleframework.xml.stream.Mode valueOf(java.lang.String) -> valueOf
org.simpleframework.xml.stream.NamespaceMap -> org.b.a.d.y:
    java.lang.String get(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String put(java.lang.String,java.lang.String) -> a
org.simpleframework.xml.stream.Node -> org.b.a.d.z:
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
org.simpleframework.xml.stream.NodeBuilder -> org.b.a.d.aa:
    org.simpleframework.xml.stream.Provider provider -> a
    org.simpleframework.xml.stream.InputNode read(java.io.InputStream) -> a
    org.simpleframework.xml.stream.OutputNode write(java.io.Writer,org.simpleframework.xml.stream.Format) -> a
org.simpleframework.xml.stream.NodeException -> org.b.a.d.ab:
org.simpleframework.xml.stream.NodeExtractor -> org.b.a.d.ac:
    void extract(org.w3c.dom.Node) -> a
org.simpleframework.xml.stream.NodeMap -> org.b.a.d.ad:
    org.simpleframework.xml.stream.Node get(java.lang.String) -> c
    org.simpleframework.xml.stream.Node remove(java.lang.String) -> b
    java.util.Iterator iterator() -> iterator
    org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String) -> a
org.simpleframework.xml.stream.NodeReader -> org.b.a.d.ae:
    org.simpleframework.xml.stream.EventReader reader -> a
    org.simpleframework.xml.stream.InputStack stack -> b
    org.simpleframework.xml.stream.InputNode readRoot() -> a
    org.simpleframework.xml.stream.InputNode readElement(org.simpleframework.xml.stream.InputNode) -> a
    org.simpleframework.xml.stream.InputNode readElement(org.simpleframework.xml.stream.InputNode,java.lang.String) -> a
    java.lang.String readValue(org.simpleframework.xml.stream.InputNode) -> b
    boolean isEmpty(org.simpleframework.xml.stream.InputNode) -> c
org.simpleframework.xml.stream.NodeStack -> org.b.a.d.af:
org.simpleframework.xml.stream.NodeWriter -> org.b.a.d.ag:
    org.simpleframework.xml.stream.OutputStack stack -> a
    org.simpleframework.xml.stream.Formatter writer -> b
    java.util.Set active -> c
    boolean verbose -> d
    org.simpleframework.xml.stream.OutputNode writeRoot() -> a
    boolean isCommitted(org.simpleframework.xml.stream.OutputNode) -> a
    void commit(org.simpleframework.xml.stream.OutputNode) -> b
    void remove(org.simpleframework.xml.stream.OutputNode) -> c
    org.simpleframework.xml.stream.OutputNode writeElement(org.simpleframework.xml.stream.OutputNode,java.lang.String) -> a
    org.simpleframework.xml.stream.OutputNode writeStart(org.simpleframework.xml.stream.OutputNode,java.lang.String) -> b
    void writeStart(org.simpleframework.xml.stream.OutputNode) -> d
    void writeEnd(org.simpleframework.xml.stream.OutputNode) -> e
org.simpleframework.xml.stream.OutputAttribute -> org.b.a.d.ah:
    org.simpleframework.xml.stream.NamespaceMap scope -> a
    org.simpleframework.xml.stream.OutputNode source -> b
    java.lang.String reference -> c
    java.lang.String name -> d
    java.lang.String value -> e
    java.lang.String getValue() -> d
    void setValue(java.lang.String) -> a
    java.lang.String getName() -> c
    org.simpleframework.xml.stream.OutputNode getParent() -> a
    org.simpleframework.xml.stream.NodeMap getAttributes() -> b
    org.simpleframework.xml.stream.OutputNode getChild(java.lang.String) -> b
    java.lang.String getComment() -> e
    org.simpleframework.xml.stream.Mode getMode() -> f
    void setMode(org.simpleframework.xml.stream.Mode) -> a
    void setData(boolean) -> a
    java.lang.String getPrefix() -> g
    java.lang.String getPrefix(boolean) -> b
    void setReference(java.lang.String) -> c
    org.simpleframework.xml.stream.NamespaceMap getNamespaces() -> h
    org.simpleframework.xml.stream.OutputNode setAttribute(java.lang.String,java.lang.String) -> a
    void remove() -> i
    void commit() -> j
    boolean isCommitted() -> k
    java.lang.String toString() -> toString
org.simpleframework.xml.stream.OutputBuffer -> org.b.a.d.ai:
    java.lang.StringBuilder text -> a
    void append(char) -> a
    void append(java.lang.String) -> a
    void append(char[]) -> a
    void write(java.io.Writer) -> a
    void clear() -> a
org.simpleframework.xml.stream.OutputDocument -> org.b.a.d.aj:
    org.simpleframework.xml.stream.OutputNodeMap table -> a
    org.simpleframework.xml.stream.NodeWriter writer -> b
    org.simpleframework.xml.stream.OutputStack stack -> c
    java.lang.String reference -> d
    java.lang.String comment -> e
    java.lang.String value -> f
    org.simpleframework.xml.stream.Mode mode -> g
    java.lang.String getPrefix() -> g
    java.lang.String getPrefix(boolean) -> b
    void setReference(java.lang.String) -> c
    org.simpleframework.xml.stream.NamespaceMap getNamespaces() -> h
    org.simpleframework.xml.stream.OutputNode getParent() -> a
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    java.lang.String getComment() -> e
    org.simpleframework.xml.stream.Mode getMode() -> f
    void setMode(org.simpleframework.xml.stream.Mode) -> a
    org.simpleframework.xml.stream.OutputNode setAttribute(java.lang.String,java.lang.String) -> a
    org.simpleframework.xml.stream.NodeMap getAttributes() -> b
    void setValue(java.lang.String) -> a
    void setData(boolean) -> a
    org.simpleframework.xml.stream.OutputNode getChild(java.lang.String) -> b
    void remove() -> i
    void commit() -> j
    boolean isCommitted() -> k
org.simpleframework.xml.stream.OutputElement -> org.b.a.d.ak:
    org.simpleframework.xml.stream.OutputNodeMap table -> a
    org.simpleframework.xml.stream.NamespaceMap scope -> b
    org.simpleframework.xml.stream.NodeWriter writer -> c
    org.simpleframework.xml.stream.OutputNode parent -> d
    java.lang.String reference -> e
    java.lang.String comment -> f
    java.lang.String value -> g
    java.lang.String name -> h
    org.simpleframework.xml.stream.Mode mode -> i
    java.lang.String getPrefix() -> g
    java.lang.String getPrefix(boolean) -> b
    void setReference(java.lang.String) -> c
    org.simpleframework.xml.stream.NamespaceMap getNamespaces() -> h
    org.simpleframework.xml.stream.OutputNode getParent() -> a
    java.lang.String getName() -> c
    java.lang.String getValue() -> d
    java.lang.String getComment() -> e
    org.simpleframework.xml.stream.Mode getMode() -> f
    void setMode(org.simpleframework.xml.stream.Mode) -> a
    void setValue(java.lang.String) -> a
    void setData(boolean) -> a
    org.simpleframework.xml.stream.OutputNode setAttribute(java.lang.String,java.lang.String) -> a
    org.simpleframework.xml.stream.OutputNode getChild(java.lang.String) -> b
    void remove() -> i
    void commit() -> j
    boolean isCommitted() -> k
    java.lang.String toString() -> toString
    org.simpleframework.xml.stream.NodeMap getAttributes() -> b
org.simpleframework.xml.stream.OutputNode -> org.b.a.d.al:
    org.simpleframework.xml.stream.NodeMap getAttributes() -> b
    org.simpleframework.xml.stream.Mode getMode() -> f
    void setMode(org.simpleframework.xml.stream.Mode) -> a
    void setData(boolean) -> a
    java.lang.String getPrefix() -> g
    java.lang.String getPrefix(boolean) -> b
    void setReference(java.lang.String) -> c
    org.simpleframework.xml.stream.NamespaceMap getNamespaces() -> h
    java.lang.String getComment() -> e
    void setValue(java.lang.String) -> a
    org.simpleframework.xml.stream.OutputNode setAttribute(java.lang.String,java.lang.String) -> a
    org.simpleframework.xml.stream.OutputNode getParent() -> a
    org.simpleframework.xml.stream.OutputNode getChild(java.lang.String) -> b
    void remove() -> i
    void commit() -> j
    boolean isCommitted() -> k
org.simpleframework.xml.stream.OutputNodeMap -> org.b.a.d.am:
    org.simpleframework.xml.stream.OutputNode source -> a
    org.simpleframework.xml.stream.OutputNode put(java.lang.String,java.lang.String) -> b
    java.util.Iterator iterator() -> iterator
    org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String) -> a
    org.simpleframework.xml.stream.Node remove(java.lang.String) -> b
    org.simpleframework.xml.stream.Node get(java.lang.String) -> c
org.simpleframework.xml.stream.OutputStack -> org.b.a.d.an:
    java.util.Set active -> a
    org.simpleframework.xml.stream.OutputNode pop() -> a
    org.simpleframework.xml.stream.OutputNode top() -> b
    org.simpleframework.xml.stream.OutputNode bottom() -> c
    org.simpleframework.xml.stream.OutputNode push(org.simpleframework.xml.stream.OutputNode) -> a
    org.simpleframework.xml.stream.OutputNode purge(int) -> a
    java.util.Iterator iterator() -> iterator
org.simpleframework.xml.stream.OutputStack$Sequence -> org.b.a.d.ao:
    int cursor -> b
    org.simpleframework.xml.stream.OutputStack this$0 -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.simpleframework.xml.stream.Position -> org.b.a.d.ap:
org.simpleframework.xml.stream.PrefixResolver -> org.b.a.d.aq:
    org.simpleframework.xml.stream.OutputNode source -> a
    java.lang.String put(java.lang.String,java.lang.String) -> a
    java.lang.String get(java.lang.String) -> a
    java.lang.String resolve(java.lang.String) -> b
    java.util.Iterator iterator() -> iterator
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.simpleframework.xml.stream.Provider -> org.b.a.d.ar:
    org.simpleframework.xml.stream.EventReader provide(java.io.InputStream) -> a
org.simpleframework.xml.stream.ProviderFactory -> org.b.a.d.as:
    org.simpleframework.xml.stream.Provider getInstance() -> a
org.simpleframework.xml.stream.Stack -> org.b.a.d.at:
    java.lang.Object pop() -> a
    java.lang.Object top() -> b
    java.lang.Object push(java.lang.Object) -> a
org.simpleframework.xml.stream.StreamProvider -> org.b.a.d.au:
    javax.xml.stream.XMLInputFactory factory -> a
    org.simpleframework.xml.stream.EventReader provide(java.io.InputStream) -> a
org.simpleframework.xml.stream.StreamReader -> org.b.a.d.av:
    javax.xml.stream.XMLEventReader reader -> a
    org.simpleframework.xml.stream.EventNode peek -> b
    org.simpleframework.xml.stream.EventNode peek() -> a
    org.simpleframework.xml.stream.EventNode next() -> b
org.simpleframework.xml.stream.StreamReader$End -> org.b.a.d.aw:
    boolean isEnd() -> a
org.simpleframework.xml.stream.StreamReader$Entry -> org.b.a.d.ax:
    javax.xml.stream.events.Attribute entry -> a
    java.lang.String getName() -> a
    java.lang.String getPrefix() -> d
    java.lang.String getReference() -> c
    java.lang.String getValue() -> b
    boolean isReserved() -> f
    java.lang.Object getSource() -> e
org.simpleframework.xml.stream.StreamReader$Start -> org.b.a.d.ay:
    javax.xml.stream.events.StartElement element -> a
    javax.xml.stream.Location location -> b
    int getLine() -> e
    java.lang.String getName() -> b
    java.util.Iterator getAttributes() -> g
org.simpleframework.xml.stream.StreamReader$Text -> org.b.a.d.az:
    javax.xml.stream.events.Characters text -> a
    boolean isText() -> b_
    java.lang.String getValue() -> d
org.simpleframework.xml.stream.Style -> org.b.a.d.ba:
    java.lang.String getElement(java.lang.String) -> b
    java.lang.String getAttribute(java.lang.String) -> a
org.simpleframework.xml.transform.ArrayMatcher -> org.b.a.e.a:
    org.simpleframework.xml.transform.Matcher primary -> a
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.transform.ArrayTransform -> org.b.a.e.b:
    org.simpleframework.xml.transform.StringArrayTransform split -> a
    org.simpleframework.xml.transform.Transform delegate -> b
    java.lang.Class entry -> c
    java.lang.Object read(java.lang.String) -> a
    java.lang.String write(java.lang.Object) -> a
org.simpleframework.xml.transform.BigDecimalTransform -> org.b.a.e.c:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.BigIntegerTransform -> org.b.a.e.d:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.BooleanTransform -> org.b.a.e.e:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.ByteTransform -> org.b.a.e.f:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.CharacterArrayTransform -> org.b.a.e.g:
    java.lang.Class entry -> a
    java.lang.Object read(java.lang.String) -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.String write(java.lang.Object,int) -> a
org.simpleframework.xml.transform.CharacterTransform -> org.b.a.e.h:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.ClassTransform -> org.b.a.e.i:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.CurrencyTransform -> org.b.a.e.j:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.DateFactory -> org.b.a.e.k:
    java.lang.reflect.Constructor factory -> a
    java.util.Date getInstance(java.lang.Object[]) -> a
org.simpleframework.xml.transform.DateTransform -> org.b.a.e.l:
    org.simpleframework.xml.transform.DateFactory factory -> a
    java.util.Date read(java.lang.String) -> b
    java.lang.String write(java.util.Date) -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.DateType -> org.b.a.e.m:
    org.simpleframework.xml.transform.DateType FULL -> a
    org.simpleframework.xml.transform.DateType LONG -> b
    org.simpleframework.xml.transform.DateType NORMAL -> c
    org.simpleframework.xml.transform.DateType SHORT -> d
    org.simpleframework.xml.transform.DateType$DateFormat format -> e
    org.simpleframework.xml.transform.DateType[] $VALUES -> f
    org.simpleframework.xml.transform.DateType[] values() -> values
    org.simpleframework.xml.transform.DateType valueOf(java.lang.String) -> valueOf
    java.lang.String getText(java.util.Date) -> a
    java.util.Date getDate(java.lang.String) -> a
org.simpleframework.xml.transform.DateType$DateFormat -> org.b.a.e.n:
    java.text.SimpleDateFormat format -> a
    java.lang.String getText(java.util.Date) -> a
    java.util.Date getDate(java.lang.String) -> a
org.simpleframework.xml.transform.DefaultMatcher -> org.b.a.e.o:
    org.simpleframework.xml.transform.Matcher primitive -> a
    org.simpleframework.xml.transform.Matcher matcher -> b
    org.simpleframework.xml.transform.Matcher stock -> c
    org.simpleframework.xml.transform.Matcher array -> d
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.transform.DoubleTransform -> org.b.a.e.p:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.EnumTransform -> org.b.a.e.q:
    java.lang.Class type -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.FileTransform -> org.b.a.e.r:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.FloatTransform -> org.b.a.e.s:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.GregorianCalendarTransform -> org.b.a.e.t:
    org.simpleframework.xml.transform.DateTransform transform -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.IntegerTransform -> org.b.a.e.u:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.InvalidFormatException -> org.b.a.e.v:
org.simpleframework.xml.transform.LocaleTransform -> org.b.a.e.w:
    java.util.regex.Pattern pattern -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.LongTransform -> org.b.a.e.x:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.Matcher -> org.b.a.e.y:
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.transform.PackageMatcher -> org.b.a.e.z:
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.transform.PrimitiveMatcher -> org.b.a.e.aa:
    org.simpleframework.xml.transform.Transform match(java.lang.Class) -> a
org.simpleframework.xml.transform.ShortTransform -> org.b.a.e.ab:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.StringArrayTransform -> org.b.a.e.ac:
    java.util.regex.Pattern pattern -> a
    java.lang.String token -> b
    java.lang.String[] read(java.lang.String) -> b
    java.lang.String write(java.lang.String[]) -> a
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.StringTransform -> org.b.a.e.ad:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.TimeZoneTransform -> org.b.a.e.ae:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.transform.Transform -> org.b.a.e.af:
    java.lang.Object read(java.lang.String) -> a
    java.lang.String write(java.lang.Object) -> a
org.simpleframework.xml.transform.TransformCache -> org.b.a.e.ag:
org.simpleframework.xml.transform.TransformException -> org.b.a.e.ah:
org.simpleframework.xml.transform.Transformer -> org.b.a.e.ai:
    org.simpleframework.xml.transform.TransformCache cache -> a
    org.simpleframework.xml.transform.Matcher matcher -> b
    org.simpleframework.xml.util.Cache error -> c
    java.lang.Object read(java.lang.String,java.lang.Class) -> a
    java.lang.String write(java.lang.Object,java.lang.Class) -> a
    boolean valid(java.lang.Class) -> a
    org.simpleframework.xml.transform.Transform lookup(java.lang.Class) -> b
org.simpleframework.xml.transform.URLTransform -> org.b.a.e.aj:
    java.lang.String write(java.lang.Object) -> a
    java.lang.Object read(java.lang.String) -> a
org.simpleframework.xml.util.Cache -> org.b.a.f.a:
    void cache(java.lang.Object,java.lang.Object) -> a
    boolean contains(java.lang.Object) -> a
org.simpleframework.xml.util.WeakCache -> org.b.a.f.b:
    org.simpleframework.xml.util.WeakCache$SegmentList list -> a
    void cache(java.lang.Object,java.lang.Object) -> a
    java.lang.Object fetch(java.lang.Object) -> b
    boolean contains(java.lang.Object) -> a
    org.simpleframework.xml.util.WeakCache$Segment map(java.lang.Object) -> c
org.simpleframework.xml.util.WeakCache$Segment -> org.b.a.f.c:
    org.simpleframework.xml.util.WeakCache this$0 -> a
    void cache(java.lang.Object,java.lang.Object) -> a
    java.lang.Object fetch(java.lang.Object) -> a
    boolean contains(java.lang.Object) -> b
org.simpleframework.xml.util.WeakCache$SegmentList -> org.b.a.f.d:
    java.util.List list -> b
    int size -> c
    org.simpleframework.xml.util.WeakCache this$0 -> a
    org.simpleframework.xml.util.WeakCache$Segment get(java.lang.Object) -> a
    void create(int) -> a
